/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "hot/hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "hot/hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "e6cda078f39939019812";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./src/index.ts")(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/antlr4/BufferedTokenStream.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/BufferedTokenStream.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// This implementation of {@link TokenStream} loads tokens from a
// {@link TokenSource} on-demand, and places the tokens in a buffer to provide
// access to any previous token by index.
//
// <p>
// This token stream ignores the value of {@link Token//getChannel}. If your
// parser requires the token stream filter tokens to only those on a particular
// channel, such as {@link Token//DEFAULT_CHANNEL} or
// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
// {@link CommonTokenStream}.</p>

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/Lexer.js").Lexer;
var Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;

// this is just to keep meaningful parameter types to Parser
function TokenStream() {
	return this;
}

function BufferedTokenStream(tokenSource) {

	TokenStream.call(this);
	// The {@link TokenSource} from which tokens for this stream are fetched.
	this.tokenSource = tokenSource;

	// A collection of all tokens fetched from the token source. The list is
	// considered a complete view of the input once {@link //fetchedEOF} is set
	// to {@code true}.
	this.tokens = [];

	// The index into {@link //tokens} of the current token (next token to
	// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
	// be
	// {@link //LT LT(1)}.
	//
	// <p>This field is set to -1 when the stream is first constructed or when
	// {@link //setTokenSource} is called, indicating that the first token has
	// not yet been fetched from the token source. For additional information,
	// see the documentation of {@link IntStream} for a description of
	// Initializing Methods.</p>
	this.index = -1;

	// Indicates whether the {@link Token//EOF} token has been fetched from
	// {@link //tokenSource} and added to {@link //tokens}. This field improves
	// performance for the following cases:
	//
	// <ul>
	// <li>{@link //consume}: The lookahead check in {@link //consume} to
	// prevent
	// consuming the EOF symbol is optimized by checking the values of
	// {@link //fetchedEOF} and {@link //p} instead of calling {@link
	// //LA}.</li>
	// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
	// into
	// {@link //tokens} is trivial with this field.</li>
	// <ul>
	this.fetchedEOF = false;
	return this;
}

BufferedTokenStream.prototype = Object.create(TokenStream.prototype);
BufferedTokenStream.prototype.constructor = BufferedTokenStream;

BufferedTokenStream.prototype.mark = function() {
	return 0;
};

BufferedTokenStream.prototype.release = function(marker) {
	// no resources to release
};

BufferedTokenStream.prototype.reset = function() {
	this.seek(0);
};

BufferedTokenStream.prototype.seek = function(index) {
	this.lazyInit();
	this.index = this.adjustSeekIndex(index);
};

BufferedTokenStream.prototype.get = function(index) {
	this.lazyInit();
	return this.tokens[index];
};

BufferedTokenStream.prototype.consume = function() {
	var skipEofCheck = false;
	if (this.index >= 0) {
		if (this.fetchedEOF) {
			// the last token in tokens is EOF. skip check if p indexes any
			// fetched token except the last.
			skipEofCheck = this.index < this.tokens.length - 1;
		} else {
			// no EOF token in tokens. skip check if p indexes a fetched token.
			skipEofCheck = this.index < this.tokens.length;
		}
	} else {
		// not yet initialized
		skipEofCheck = false;
	}
	if (!skipEofCheck && this.LA(1) === Token.EOF) {
		throw "cannot consume EOF";
	}
	if (this.sync(this.index + 1)) {
		this.index = this.adjustSeekIndex(this.index + 1);
	}
};

// Make sure index {@code i} in tokens has a token.
//
// @return {@code true} if a token is located at index {@code i}, otherwise
// {@code false}.
// @see //get(int i)
// /
BufferedTokenStream.prototype.sync = function(i) {
	var n = i - this.tokens.length + 1; // how many more elements we need?
	if (n > 0) {
		var fetched = this.fetch(n);
		return fetched >= n;
	}
	return true;
};

// Add {@code n} elements to buffer.
//
// @return The actual number of elements added to the buffer.
// /
BufferedTokenStream.prototype.fetch = function(n) {
	if (this.fetchedEOF) {
		return 0;
	}
	for (var i = 0; i < n; i++) {
		var t = this.tokenSource.nextToken();
		t.tokenIndex = this.tokens.length;
		this.tokens.push(t);
		if (t.type === Token.EOF) {
			this.fetchedEOF = true;
			return i + 1;
		}
	}
	return n;
};

// Get all tokens from start..stop inclusively///
BufferedTokenStream.prototype.getTokens = function(start, stop, types) {
	if (types === undefined) {
		types = null;
	}
	if (start < 0 || stop < 0) {
		return null;
	}
	this.lazyInit();
	var subset = [];
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	for (var i = start; i < stop; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		if (types === null || types.contains(t.type)) {
			subset.push(t);
		}
	}
	return subset;
};

BufferedTokenStream.prototype.LA = function(i) {
	return this.LT(i).type;
};

BufferedTokenStream.prototype.LB = function(k) {
	if (this.index - k < 0) {
		return null;
	}
	return this.tokens[this.index - k];
};

BufferedTokenStream.prototype.LT = function(k) {
	this.lazyInit();
	if (k === 0) {
		return null;
	}
	if (k < 0) {
		return this.LB(-k);
	}
	var i = this.index + k - 1;
	this.sync(i);
	if (i >= this.tokens.length) { // return EOF token
		// EOF must be last token
		return this.tokens[this.tokens.length - 1];
	}
	return this.tokens[i];
};

// Allowed derived classes to modify the behavior of operations which change
// the current stream position by adjusting the target token index of a seek
// operation. The default implementation simply returns {@code i}. If an
// exception is thrown in this method, the current stream index should not be
// changed.
//
// <p>For example, {@link CommonTokenStream} overrides this method to ensure
// that
// the seek target is always an on-channel token.</p>
//
// @param i The target token index.
// @return The adjusted target token index.

BufferedTokenStream.prototype.adjustSeekIndex = function(i) {
	return i;
};

BufferedTokenStream.prototype.lazyInit = function() {
	if (this.index === -1) {
		this.setup();
	}
};

BufferedTokenStream.prototype.setup = function() {
	this.sync(0);
	this.index = this.adjustSeekIndex(0);
};

// Reset this token stream by setting its token source.///
BufferedTokenStream.prototype.setTokenSource = function(tokenSource) {
	this.tokenSource = tokenSource;
	this.tokens = [];
	this.index = -1;
	this.fetchedEOF = false;
};


// Given a starting index, return the index of the next token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and EOF.
// /
BufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {
	this.sync(i);
	if (i >= this.tokens.length) {
		return -1;
	}
	var token = this.tokens[i];
	while (token.channel !== this.channel) {
		if (token.type === Token.EOF) {
			return -1;
		}
		i += 1;
		this.sync(i);
		token = this.tokens[i];
	}
	return i;
};

// Given a starting index, return the index of the previous token on channel.
// Return i if tokens[i] is on channel. Return -1 if there are no tokens
// on channel between i and 0.
BufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {
	while (i >= 0 && this.tokens[i].channel !== channel) {
		i -= 1;
	}
	return i;
};

// Collect all tokens on specified channel to the right of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
// EOF. If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	var from_ = tokenIndex + 1;
	// if none onchannel to right, nextOnChannel=-1 so set to = last token
	var to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
	return this.filterForChannel(from_, to, channel);
};

// Collect all tokens on specified channel to the left of
// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
// If channel is -1, find any non default channel token.
BufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,
		channel) {
	if (channel === undefined) {
		channel = -1;
	}
	this.lazyInit();
	if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
		throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
	}
	var prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
	if (prevOnChannel === tokenIndex - 1) {
		return null;
	}
	// if none on channel to left, prevOnChannel=-1 then from=0
	var from_ = prevOnChannel + 1;
	var to = tokenIndex - 1;
	return this.filterForChannel(from_, to, channel);
};

BufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {
	var hidden = [];
	for (var i = left; i < right + 1; i++) {
		var t = this.tokens[i];
		if (channel === -1) {
			if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
				hidden.push(t);
			}
		} else if (t.channel === channel) {
			hidden.push(t);
		}
	}
	if (hidden.length === 0) {
		return null;
	}
	return hidden;
};

BufferedTokenStream.prototype.getSourceName = function() {
	return this.tokenSource.getSourceName();
};

// Get the text of all tokens in this buffer.///
BufferedTokenStream.prototype.getText = function(interval) {
	this.lazyInit();
	this.fill();
	if (interval === undefined || interval === null) {
		interval = new Interval(0, this.tokens.length - 1);
	}
	var start = interval.start;
	if (start instanceof Token) {
		start = start.tokenIndex;
	}
	var stop = interval.stop;
	if (stop instanceof Token) {
		stop = stop.tokenIndex;
	}
	if (start === null || stop === null || start < 0 || stop < 0) {
		return "";
	}
	if (stop >= this.tokens.length) {
		stop = this.tokens.length - 1;
	}
	var s = "";
	for (var i = start; i < stop + 1; i++) {
		var t = this.tokens[i];
		if (t.type === Token.EOF) {
			break;
		}
		s = s + t.text;
	}
	return s;
};

// Get all tokens from lexer until EOF///
BufferedTokenStream.prototype.fill = function() {
	this.lazyInit();
	while (this.fetch(1000) === 1000) {
		continue;
	}
};

exports.BufferedTokenStream = BufferedTokenStream;


/***/ }),

/***/ "./node_modules/antlr4/CharStreams.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/CharStreams.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/InputStream.js").InputStream;

var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js") : null;

// Utility functions to create InputStreams from various sources.
//
// All returned InputStreams support the full range of Unicode
// up to U+10FFFF (the default behavior of InputStream only supports
// code points up to U+FFFF).
var CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return new InputStream(str, true);
  },

  // Asynchronously creates an InputStream from a blob given the
  // encoding of the bytes in that blob (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes onLoad(result) on success, onError(error) on
  // failure.
  fromBlob: function(blob, encoding, onLoad, onError) {
    var reader = FileReader();
    reader.onload = function(e) {
      var is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  // Creates an InputStream from a Buffer given the
  // encoding of the bytes in that buffer (defaults to 'utf8' if
  // encoding is null).
  fromBuffer: function(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  // Asynchronously creates an InputStream from a file on disk given
  // the encoding of the bytes in that file (defaults to 'utf8' if
  // encoding is null).
  //
  // Invokes callback(error, result) on completion.
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      var is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  // Synchronously creates an InputStream given a path to a file
  // on disk and the encoding of the bytes in that file (defaults to
  // 'utf8' if encoding is null).
  fromPathSync: function(path, encoding) {
    var data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

exports.CharStreams = CharStreams;


/***/ }),

/***/ "./node_modules/antlr4/CommonTokenFactory.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/CommonTokenFactory.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This default implementation of {@link TokenFactory} creates
// {@link CommonToken} objects.
//

var CommonToken = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").CommonToken;

function TokenFactory() {
	return this;
}

function CommonTokenFactory(copyText) {
	TokenFactory.call(this);
    // Indicates whether {@link CommonToken//setText} should be called after
    // constructing tokens to explicitly set the text. This is useful for cases
    // where the input stream might not be able to provide arbitrary substrings
    // of text from the input after the lexer creates a token (e.g. the
    // implementation of {@link CharStream//getText} in
    // {@link UnbufferedCharStream} throws an
    // {@link UnsupportedOperationException}). Explicitly setting the token text
    // allows {@link Token//getText} to be called at any time regardless of the
    // input stream implementation.
    //
    // <p>
    // The default value is {@code false} to avoid the performance and memory
    // overhead of copying text for every token unless explicitly requested.</p>
    //
    this.copyText = copyText===undefined ? false : copyText;
	return this;
}

CommonTokenFactory.prototype = Object.create(TokenFactory.prototype);
CommonTokenFactory.prototype.constructor = CommonTokenFactory;

//
// The default {@link CommonTokenFactory} instance.
//
// <p>
// This token factory does not explicitly copy token text when constructing
// tokens.</p>
//
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

CommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {
    var t = new CommonToken(source, type, channel, start, stop);
    t.line = line;
    t.column = column;
    if (text !==null) {
        t.text = text;
    } else if (this.copyText && source[1] !==null) {
        t.text = source[1].getText(start,stop);
    }
    return t;
};

CommonTokenFactory.prototype.createThin = function(type, text) {
    var t = new CommonToken(null, type);
    t.text = text;
    return t;
};

exports.CommonTokenFactory = CommonTokenFactory;


/***/ }),

/***/ "./node_modules/antlr4/CommonTokenStream.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/CommonTokenStream.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//
// This class extends {@link BufferedTokenStream} with functionality to filter
// token streams to tokens on a particular channel (tokens where
// {@link Token//getChannel} returns a particular value).
//
// <p>
// This token stream provides access to all tokens by index or when calling
// methods like {@link //getText}. The channel filtering is only used for code
// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
// {@link //LB}.</p>
//
// <p>
// By default, tokens are placed on the default channel
// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
// call {@link Lexer//setChannel}.
// </p>
//
// <p>
// Note: lexer rules which use the {@code ->skip} lexer command or call
// {@link Lexer//skip} do not produce tokens at all, so input text matched by
// such a rule will not be available as part of the token stream, regardless of
// channel.</p>
///

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var BufferedTokenStream = __webpack_require__(/*! ./BufferedTokenStream */ "./node_modules/antlr4/BufferedTokenStream.js").BufferedTokenStream;

function CommonTokenStream(lexer, channel) {
	BufferedTokenStream.call(this, lexer);
    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    return this;
}

CommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);
CommonTokenStream.prototype.constructor = CommonTokenStream;

CommonTokenStream.prototype.adjustSeekIndex = function(i) {
    return this.nextTokenOnChannel(i, this.channel);
};

CommonTokenStream.prototype.LB = function(k) {
    if (k===0 || this.index-k<0) {
        return null;
    }
    var i = this.index;
    var n = 1;
    // find k good tokens looking backwards
    while (n <= k) {
        // skip off-channel tokens
        i = this.previousTokenOnChannel(i - 1, this.channel);
        n += 1;
    }
    if (i < 0) {
        return null;
    }
    return this.tokens[i];
};

CommonTokenStream.prototype.LT = function(k) {
    this.lazyInit();
    if (k === 0) {
        return null;
    }
    if (k < 0) {
        return this.LB(-k);
    }
    var i = this.index;
    var n = 1; // we know tokens[pos] is a good one
    // find k good tokens
    while (n < k) {
        // skip off-channel tokens, but make sure to not look past EOF
        if (this.sync(i + 1)) {
            i = this.nextTokenOnChannel(i + 1, this.channel);
        }
        n += 1;
    }
    return this.tokens[i];
};

// Count EOF just once.///
CommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {
    var n = 0;
    this.fill();
    for (var i =0; i< this.tokens.length;i++) {
        var t = this.tokens[i];
        if( t.channel===this.channel) {
            n += 1;
        }
        if( t.type===Token.EOF) {
            break;
        }
    }
    return n;
};

exports.CommonTokenStream = CommonTokenStream;

/***/ }),

/***/ "./node_modules/antlr4/FileStream.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/FileStream.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
//  This is an InputStream that is loaded from a file all at once
//  when you construct the object.
//
var InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/InputStream.js").InputStream;
var isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';
var fs = isNodeJs ? __webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js") : null;

function FileStream(fileName, decodeToUnicodeCodePoints) {
	var data = fs.readFileSync(fileName, "utf8");
	InputStream.call(this, data, decodeToUnicodeCodePoints);
	this.fileName = fileName;
	return this;
}

FileStream.prototype = Object.create(InputStream.prototype);
FileStream.prototype.constructor = FileStream;

exports.FileStream = FileStream;


/***/ }),

/***/ "./node_modules/antlr4/InputStream.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/InputStream.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
__webpack_require__(/*! ./polyfills/codepointat */ "./node_modules/antlr4/polyfills/codepointat.js");
__webpack_require__(/*! ./polyfills/fromcodepoint */ "./node_modules/antlr4/polyfills/fromcodepoint.js");

// Vacuum all input from a string and then treat it like a buffer.

function _loadString(stream) {
	stream._index = 0;
	stream.data = [];
	if (stream.decodeToUnicodeCodePoints) {
		for (var i = 0; i < stream.strdata.length; ) {
			var codePoint = stream.strdata.codePointAt(i);
			stream.data.push(codePoint);
			i += codePoint <= 0xFFFF ? 1 : 2;
		}
	} else {
		for (var i = 0; i < stream.strdata.length; i++) {
			var codeUnit = stream.strdata.charCodeAt(i);
			stream.data.push(codeUnit);
		}
	}
	stream._size = stream.data.length;
}

// If decodeToUnicodeCodePoints is true, the input is treated
// as a series of Unicode code points.
//
// Otherwise, the input is treated as a series of 16-bit UTF-16 code
// units.
function InputStream(data, decodeToUnicodeCodePoints) {
	this.name = "<empty>";
	this.strdata = data;
	this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
	_loadString(this);
	return this;
}

Object.defineProperty(InputStream.prototype, "index", {
	get : function() {
		return this._index;
	}
});

Object.defineProperty(InputStream.prototype, "size", {
	get : function() {
		return this._size;
	}
});

// Reset the stream so that it's in the same state it was
// when the object was created *except* the data array is not
// touched.
//
InputStream.prototype.reset = function() {
	this._index = 0;
};

InputStream.prototype.consume = function() {
	if (this._index >= this._size) {
		// assert this.LA(1) == Token.EOF
		throw ("cannot consume EOF");
	}
	this._index += 1;
};

InputStream.prototype.LA = function(offset) {
	if (offset === 0) {
		return 0; // undefined
	}
	if (offset < 0) {
		offset += 1; // e.g., translate LA(-1) to use offset=0
	}
	var pos = this._index + offset - 1;
	if (pos < 0 || pos >= this._size) { // invalid
		return Token.EOF;
	}
	return this.data[pos];
};

InputStream.prototype.LT = function(offset) {
	return this.LA(offset);
};

// mark/release do nothing; we have entire buffer
InputStream.prototype.mark = function() {
	return -1;
};

InputStream.prototype.release = function(marker) {
};

// consume() ahead until p==_index; can't just set p=_index as we must
// update line and column. If we seek backwards, just set p
//
InputStream.prototype.seek = function(_index) {
	if (_index <= this._index) {
		this._index = _index; // just jump; don't update stream state (line,
								// ...)
		return;
	}
	// seek forward
	this._index = Math.min(_index, this._size);
};

InputStream.prototype.getText = function(start, stop) {
	if (stop >= this._size) {
		stop = this._size - 1;
	}
	if (start >= this._size) {
		return "";
	} else {
		if (this.decodeToUnicodeCodePoints) {
			var result = "";
			for (var i = start; i <= stop; i++) {
				result += String.fromCodePoint(this.data[i]);
			}
			return result;
		} else {
			return this.strdata.slice(start, stop + 1);
		}
	}
};

InputStream.prototype.toString = function() {
	return this.strdata;
};

exports.InputStream = InputStream;


/***/ }),

/***/ "./node_modules/antlr4/IntervalSet.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/IntervalSet.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/*jslint smarttabs:true */

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;

/* stop is not included! */
function Interval(start, stop) {
	this.start = start;
	this.stop = stop;
	return this;
}

Interval.prototype.contains = function(item) {
	return item >= this.start && item < this.stop;
};

Interval.prototype.toString = function() {
	if(this.start===this.stop-1) {
		return this.start.toString();
	} else {
		return this.start.toString() + ".." + (this.stop-1).toString();
	}
};


Object.defineProperty(Interval.prototype, "length", {
	get : function() {
		return this.stop - this.start;
	}
});

function IntervalSet() {
	this.intervals = null;
	this.readOnly = false;
}

IntervalSet.prototype.first = function(v) {
	if (this.intervals === null || this.intervals.length===0) {
		return Token.INVALID_TYPE;
	} else {
		return this.intervals[0].start;
	}
};

IntervalSet.prototype.addOne = function(v) {
	this.addInterval(new Interval(v, v + 1));
};

IntervalSet.prototype.addRange = function(l, h) {
	this.addInterval(new Interval(l, h + 1));
};

IntervalSet.prototype.addInterval = function(v) {
	if (this.intervals === null) {
		this.intervals = [];
		this.intervals.push(v);
	} else {
		// find insert pos
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// distinct range -> insert
			if (v.stop < i.start) {
				this.intervals.splice(k, 0, v);
				return;
			}
			// contiguous range -> adjust
			else if (v.stop === i.start) {
				this.intervals[k].start = v.start;
				return;
			}
			// overlapping range -> adjust and reduce
			else if (v.start <= i.stop) {
				this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
				this.reduce(k);
				return;
			}
		}
		// greater than any existing
		this.intervals.push(v);
	}
};

IntervalSet.prototype.addSet = function(other) {
	if (other.intervals !== null) {
		for (var k = 0; k < other.intervals.length; k++) {
			var i = other.intervals[k];
			this.addInterval(new Interval(i.start, i.stop));
		}
	}
	return this;
};

IntervalSet.prototype.reduce = function(k) {
	// only need to reduce if k is not the last
	if (k < this.intervalslength - 1) {
		var l = this.intervals[k];
		var r = this.intervals[k + 1];
		// if r contained in l
		if (l.stop >= r.stop) {
			this.intervals.pop(k + 1);
			this.reduce(k);
		} else if (l.stop >= r.start) {
			this.intervals[k] = new Interval(l.start, r.stop);
			this.intervals.pop(k + 1);
		}
	}
};

IntervalSet.prototype.complement = function(start, stop) {
    var result = new IntervalSet();
    result.addInterval(new Interval(start,stop+1));
    for(var i=0; i<this.intervals.length; i++) {
        result.removeRange(this.intervals[i]);
    }
    return result;
};

IntervalSet.prototype.contains = function(item) {
	if (this.intervals === null) {
		return false;
	} else {
		for (var k = 0; k < this.intervals.length; k++) {
			if(this.intervals[k].contains(item)) {
				return true;
			}
		}
		return false;
	}
};

Object.defineProperty(IntervalSet.prototype, "length", {
	get : function() {
		var len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
});

IntervalSet.prototype.removeRange = function(v) {
    if(v.start===v.stop-1) {
        this.removeOne(v.start);
    } else if (this.intervals!==null) {
        var k = 0;
        for(var n=0; n<this.intervals.length; n++) {
            var i = this.intervals[k];
            // intervals are ordered
            if (v.stop<=i.start) {
                return;
            }
            // check for including range, split it
            else if(v.start>i.start && v.stop<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
                var x = new Interval(v.stop, i.stop);
                this.intervals.splice(k, 0, x);
                return;
            }
            // check for included range, remove it
            else if(v.start<=i.start && v.stop>=i.stop) {
                this.intervals.splice(k, 1);
                k = k - 1; // need another pass
            }
            // check for lower boundary
            else if(v.start<i.stop) {
                this.intervals[k] = new Interval(i.start, v.start);
            }
            // check for upper boundary
            else if(v.stop<i.stop) {
                this.intervals[k] = new Interval(v.stop, i.stop);
            }
            k += 1;
        }
    }
};

IntervalSet.prototype.removeOne = function(v) {
	if (this.intervals !== null) {
		for (var k = 0; k < this.intervals.length; k++) {
			var i = this.intervals[k];
			// intervals is ordered
			if (v < i.start) {
				return;
			}
			// check for single value range
			else if (v === i.start && v === i.stop - 1) {
				this.intervals.splice(k, 1);
				return;
			}
			// check for lower boundary
			else if (v === i.start) {
				this.intervals[k] = new Interval(i.start + 1, i.stop);
				return;
			}
			// check for upper boundary
			else if (v === i.stop - 1) {
				this.intervals[k] = new Interval(i.start, i.stop - 1);
				return;
			}
			// split existing range
			else if (v < i.stop - 1) {
				var x = new Interval(i.start, v);
				i.start = v + 1;
				this.intervals.splice(k, 0, x);
				return;
			}
		}
	}
};

IntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	elemsAreChar = elemsAreChar || false;
	if (this.intervals === null) {
		return "{}";
	} else if(literalNames!==null || symbolicNames!==null) {
		return this.toTokenString(literalNames, symbolicNames);
	} else if(elemsAreChar) {
		return this.toCharString();
	} else {
		return this.toIndexString();
	}
};

IntervalSet.prototype.toCharString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'");
			}
		} else {
			names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toIndexString = function() {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		if(v.stop===v.start+1) {
			if ( v.start===Token.EOF ) {
				names.push("<EOF>");
			} else {
				names.push(v.start.toString());
			}
		} else {
			names.push(v.start.toString() + ".." + (v.stop-1).toString());
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};


IntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {
	var names = [];
	for (var i = 0; i < this.intervals.length; i++) {
		var v = this.intervals[i];
		for (var j = v.start; j < v.stop; j++) {
			names.push(this.elementName(literalNames, symbolicNames, j));
		}
	}
	if (names.length > 1) {
		return "{" + names.join(", ") + "}";
	} else {
		return names[0];
	}
};

IntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {
	if (a === Token.EOF) {
		return "<EOF>";
	} else if (a === Token.EPSILON) {
		return "<EPSILON>";
	} else {
		return literalNames[a] || symbolicNames[a];
	}
};

exports.Interval = Interval;
exports.IntervalSet = IntervalSet;


/***/ }),

/***/ "./node_modules/antlr4/LL1Analyzer.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/LL1Analyzer.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var Set = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js").Set;
var BitSet = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js").BitSet;
var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var ATNConfig = __webpack_require__(/*! ./atn/ATNConfig */ "./node_modules/antlr4/atn/ATNConfig.js").ATNConfig;
var Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var IntervalSet = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;
var RuleStopState = __webpack_require__(/*! ./atn/ATNState */ "./node_modules/antlr4/atn/ATNState.js").RuleStopState;
var RuleTransition = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/atn/Transition.js").RuleTransition;
var NotSetTransition = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/atn/Transition.js").NotSetTransition;
var WildcardTransition = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/atn/Transition.js").WildcardTransition;
var AbstractPredicateTransition = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/atn/Transition.js").AbstractPredicateTransition;

var pc = __webpack_require__(/*! ./PredictionContext */ "./node_modules/antlr4/PredictionContext.js");
var predictionContextFromRuleContext = pc.predictionContextFromRuleContext;
var PredictionContext = pc.PredictionContext;
var SingletonPredictionContext = pc.SingletonPredictionContext;

function LL1Analyzer (atn) {
    this.atn = atn;
}

//* Special value added to the lookahead sets to indicate that we hit
//  a predicate during analysis if {@code seeThruPreds==false}.
///
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;


//*
// Calculates the SLL(1) expected lookahead set for each outgoing transition
// of an {@link ATNState}. The returned array has one element for each
// outgoing transition in {@code s}. If the closure from transition
// <em>i</em> leads to a semantic predicate before matching a symbol, the
// element at index <em>i</em> of the result will be {@code null}.
//
// @param s the ATN state
// @return the expected symbols for each outgoing transition of {@code s}.
///
LL1Analyzer.prototype.getDecisionLookahead = function(s) {
    if (s === null) {
        return null;
    }
    var count = s.transitions.length;
    var look = [];
    for(var alt=0; alt< count; alt++) {
        look[alt] = new IntervalSet();
        var lookBusy = new Set();
        var seeThruPreds = false; // fail to get lookahead upon pred
        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
              look[alt], lookBusy, new BitSet(), seeThruPreds, false);
        // Wipe out lookahead for this alternative if we found nothing
        // or we had a predicate when we !seeThruPreds
        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
            look[alt] = null;
        }
    }
    return look;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and the end of the rule containing
// {@code s} is reached, {@link Token//EPSILON} is added to the result set.
// If {@code ctx} is not {@code null} and the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx the complete parser context, or {@code null} if the context
// should be ignored
//
// @return The set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
///
LL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {
    var r = new IntervalSet();
    var seeThruPreds = true; // ignore preds; get all lookahead
	ctx = ctx || null;
    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
    return r;
};

//*
// Compute set of tokens that can follow {@code s} in the ATN in the
// specified {@code ctx}.
//
// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
// rule containing {@code s} is reached, {@link Token//EPSILON} is added to
// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
// {@code true} and {@code stopState} or the end of the outermost rule is
// reached, {@link Token//EOF} is added to the result set.</p>
//
// @param s the ATN state.
// @param stopState the ATN state to stop at. This can be a
// {@link BlockEndState} to detect epsilon paths through a closure.
// @param ctx The outer context, or {@code null} if the outer context should
// not be used.
// @param look The result lookahead set.
// @param lookBusy A set used for preventing epsilon closures in the ATN
// from causing a stack overflow. Outside code should pass
// {@code new Set<ATNConfig>} for this argument.
// @param calledRuleStack A set used for preventing left recursion in the
// ATN from causing a stack overflow. Outside code should pass
// {@code new BitSet()} for this argument.
// @param seeThruPreds {@code true} to true semantic predicates as
// implicitly {@code true} and "see through them", otherwise {@code false}
// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
// result if one is encountered.
// @param addEOF Add {@link Token//EOF} to the result if the end of the
// outermost context is reached. This parameter has no effect if {@code ctx}
// is {@code null}.
///
LL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);
    if (lookBusy.contains(c)) {
        return;
    }
    lookBusy.add(c);
    if (s === stopState) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
    }
    if (s instanceof RuleStopState ) {
        if (ctx ===null) {
            look.addOne(Token.EPSILON);
            return;
        } else if (ctx.isEmpty() && addEOF) {
            look.addOne(Token.EOF);
            return;
        }
        if (ctx !== PredictionContext.EMPTY) {
            // run thru all possible stack tops in ctx
            for(var i=0; i<ctx.length; i++) {
                var returnState = this.atn.states[ctx.getReturnState(i)];
                var removed = calledRuleStack.contains(returnState.ruleIndex);
                try {
                    calledRuleStack.remove(returnState.ruleIndex);
                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    if (removed) {
                        calledRuleStack.add(returnState.ruleIndex);
                    }
                }
            }
            return;
        }
    }
    for(var j=0; j<s.transitions.length; j++) {
        var t = s.transitions[j];
        if (t.constructor === RuleTransition) {
            if (calledRuleStack.contains(t.target.ruleIndex)) {
                continue;
            }
            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
            try {
                calledRuleStack.add(t.target.ruleIndex);
                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } finally {
                calledRuleStack.remove(t.target.ruleIndex);
            }
        } else if (t instanceof AbstractPredicateTransition ) {
            if (seeThruPreds) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else {
                look.addOne(LL1Analyzer.HIT_PRED);
            }
        } else if( t.isEpsilon) {
            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
        } else if (t.constructor === WildcardTransition) {
            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
        } else {
            var set = t.label;
            if (set !== null) {
                if (t instanceof NotSetTransition) {
                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                }
                look.addSet(set);
            }
        }
    }
};

exports.LL1Analyzer = LL1Analyzer;



/***/ }),

/***/ "./node_modules/antlr4/Lexer.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Lexer.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A lexer is recognizer that draws input symbols from a character stream.
//  lexer grammars result in a subclass of this object. A Lexer object
//  uses simplified match() and error recovery mechanisms in the interest of speed.

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var Recognizer = __webpack_require__(/*! ./Recognizer */ "./node_modules/antlr4/Recognizer.js").Recognizer;
var CommonTokenFactory = __webpack_require__(/*! ./CommonTokenFactory */ "./node_modules/antlr4/CommonTokenFactory.js").CommonTokenFactory;
var RecognitionException  = __webpack_require__(/*! ./error/Errors */ "./node_modules/antlr4/error/Errors.js").RecognitionException;
var LexerNoViableAltException = __webpack_require__(/*! ./error/Errors */ "./node_modules/antlr4/error/Errors.js").LexerNoViableAltException;

function TokenSource() {
	return this;
}

function Lexer(input) {
	Recognizer.call(this);
	this._input = input;
	this._factory = CommonTokenFactory.DEFAULT;
	this._tokenFactorySourcePair = [ this, input ];

	this._interp = null; // child classes must populate this

	// The goal of all lexer rules/methods is to create a token object.
	// this is an instance variable as multiple rules may collaborate to
	// create a single token. nextToken will return this object after
	// matching lexer rule(s). If you subclass to allow multiple token
	// emissions, then set this to the last token to be matched or
	// something nonnull so that the auto token emit mechanism will not
	// emit another token.
	this._token = null;

	// What character index in the stream did the current token start at?
	// Needed, for example, to get the text for current token. Set at
	// the start of nextToken.
	this._tokenStartCharIndex = -1;

	// The line on which the first character of the token resides///
	this._tokenStartLine = -1;

	// The character position of first character within the line///
	this._tokenStartColumn = -1;

	// Once we see EOF on char stream, next token will be EOF.
	// If you have DONE : EOF ; then you see DONE EOF.
	this._hitEOF = false;

	// The channel number for the current token///
	this._channel = Token.DEFAULT_CHANNEL;

	// The token type for the current token///
	this._type = Token.INVALID_TYPE;

	this._modeStack = [];
	this._mode = Lexer.DEFAULT_MODE;

	// You can set the text for the current token to override what is in
	// the input char buffer. Use setText() or can set this instance var.
	// /
	this._text = null;

	return this;
}

Lexer.prototype = Object.create(Recognizer.prototype);
Lexer.prototype.constructor = Lexer;

Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

Lexer.prototype.reset = function() {
	// wack Lexer state variables
	if (this._input !== null) {
		this._input.seek(0); // rewind the input
	}
	this._token = null;
	this._type = Token.INVALID_TYPE;
	this._channel = Token.DEFAULT_CHANNEL;
	this._tokenStartCharIndex = -1;
	this._tokenStartColumn = -1;
	this._tokenStartLine = -1;
	this._text = null;

	this._hitEOF = false;
	this._mode = Lexer.DEFAULT_MODE;
	this._modeStack = [];

	this._interp.reset();
};

// Return a token from this source; i.e., match a token on the char stream.
Lexer.prototype.nextToken = function() {
	if (this._input === null) {
		throw "nextToken requires a non-null input stream.";
	}

	// Mark start location in char stream so unbuffered streams are
	// guaranteed at least have text of current token
	var tokenStartMarker = this._input.mark();
	try {
		while (true) {
			if (this._hitEOF) {
				this.emitEOF();
				return this._token;
			}
			this._token = null;
			this._channel = Token.DEFAULT_CHANNEL;
			this._tokenStartCharIndex = this._input.index;
			this._tokenStartColumn = this._interp.column;
			this._tokenStartLine = this._interp.line;
			this._text = null;
			var continueOuter = false;
			while (true) {
				this._type = Token.INVALID_TYPE;
				var ttype = Lexer.SKIP;
				try {
					ttype = this._interp.match(this._input, this._mode);
				} catch (e) {
				    if(e instanceof RecognitionException) {
                        this.notifyListeners(e); // report error
                        this.recover(e);
                    } else {
                        console.log(e.stack);
                        throw e;
                    }
				}
				if (this._input.LA(1) === Token.EOF) {
					this._hitEOF = true;
				}
				if (this._type === Token.INVALID_TYPE) {
					this._type = ttype;
				}
				if (this._type === Lexer.SKIP) {
					continueOuter = true;
					break;
				}
				if (this._type !== Lexer.MORE) {
					break;
				}
			}
			if (continueOuter) {
				continue;
			}
			if (this._token === null) {
				this.emit();
			}
			return this._token;
		}
	} finally {
		// make sure we release marker after match or
		// unbuffered char stream will keep buffering
		this._input.release(tokenStartMarker);
	}
};

// Instruct the lexer to skip creating a token for current lexer rule
// and look for another token. nextToken() knows to keep looking when
// a lexer rule finishes with token set to SKIP_TOKEN. Recall that
// if token==null at end of any token rule, it creates one for you
// and emits it.
// /
Lexer.prototype.skip = function() {
	this._type = Lexer.SKIP;
};

Lexer.prototype.more = function() {
	this._type = Lexer.MORE;
};

Lexer.prototype.mode = function(m) {
	this._mode = m;
};

Lexer.prototype.pushMode = function(m) {
	if (this._interp.debug) {
		console.log("pushMode " + m);
	}
	this._modeStack.push(this._mode);
	this.mode(m);
};

Lexer.prototype.popMode = function() {
	if (this._modeStack.length === 0) {
		throw "Empty Stack";
	}
	if (this._interp.debug) {
		console.log("popMode back to " + this._modeStack.slice(0, -1));
	}
	this.mode(this._modeStack.pop());
	return this._mode;
};

// Set the char stream and reset the lexer
Object.defineProperty(Lexer.prototype, "inputStream", {
	get : function() {
		return this._input;
	},
	set : function(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}
});

Object.defineProperty(Lexer.prototype, "sourceName", {
	get : function sourceName() {
		return this._input.sourceName;
	}
});

// By default does not support multiple emits per nextToken invocation
// for efficiency reasons. Subclass and override this method, nextToken,
// and getToken (to push tokens into a list and pull from that list
// rather than a single variable as this implementation does).
// /
Lexer.prototype.emitToken = function(token) {
	this._token = token;
};

// The standard method called to automatically emit a token at the
// outermost lexical rule. The token object should point into the
// char buffer start..stop. If there is a text override in 'text',
// use that to set the token's text. Override this method to emit
// custom Token objects or provide a new factory.
// /
Lexer.prototype.emit = function() {
	var t = this._factory.create(this._tokenFactorySourcePair, this._type,
			this._text, this._channel, this._tokenStartCharIndex, this
					.getCharIndex() - 1, this._tokenStartLine,
			this._tokenStartColumn);
	this.emitToken(t);
	return t;
};

Lexer.prototype.emitEOF = function() {
	var cpos = this.column;
	var lpos = this.line;
	var eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
			null, Token.DEFAULT_CHANNEL, this._input.index,
			this._input.index - 1, lpos, cpos);
	this.emitToken(eof);
	return eof;
};

Object.defineProperty(Lexer.prototype, "type", {
	get : function() {
		return this.type;
	},
	set : function(type) {
		this._type = type;
	}
});

Object.defineProperty(Lexer.prototype, "line", {
	get : function() {
		return this._interp.line;
	},
	set : function(line) {
		this._interp.line = line;
	}
});

Object.defineProperty(Lexer.prototype, "column", {
	get : function() {
		return this._interp.column;
	},
	set : function(column) {
		this._interp.column = column;
	}
});


// What is the index of the current character of lookahead?///
Lexer.prototype.getCharIndex = function() {
	return this._input.index;
};

// Return the text matched so far for the current token or any text override.
//Set the complete text of this token; it wipes any previous changes to the text.
Object.defineProperty(Lexer.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	},
	set : function(text) {
		this._text = text;
	}
});
// Return a list of all Token objects in input char stream.
// Forces load of all tokens. Does not include EOF token.
// /
Lexer.prototype.getAllTokens = function() {
	var tokens = [];
	var t = this.nextToken();
	while (t.type !== Token.EOF) {
		tokens.push(t);
		t = this.nextToken();
	}
	return tokens;
};

Lexer.prototype.notifyListeners = function(e) {
	var start = this._tokenStartCharIndex;
	var stop = this._input.index;
	var text = this._input.getText(start, stop);
	var msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, null, this._tokenStartLine,
			this._tokenStartColumn, msg, e);
};

Lexer.prototype.getErrorDisplay = function(s) {
	var d = [];
	for (var i = 0; i < s.length; i++) {
		d.push(s[i]);
	}
	return d.join('');
};

Lexer.prototype.getErrorDisplayForChar = function(c) {
	if (c.charCodeAt(0) === Token.EOF) {
		return "<EOF>";
	} else if (c === '\n') {
		return "\\n";
	} else if (c === '\t') {
		return "\\t";
	} else if (c === '\r') {
		return "\\r";
	} else {
		return c;
	}
};

Lexer.prototype.getCharErrorDisplay = function(c) {
	return "'" + this.getErrorDisplayForChar(c) + "'";
};

// Lexers can normally match any char in it's vocabulary after matching
// a token, so do the easy thing and just kill a character and hope
// it all works out. You can instead use the rule invocation stack
// to do sophisticated error recovery if you are in a fragment rule.
// /
Lexer.prototype.recover = function(re) {
	if (this._input.LA(1) !== Token.EOF) {
		if (re instanceof LexerNoViableAltException) {
			// skip a char and try again
			this._interp.consume(this._input);
		} else {
			// TODO: Do we lose character or line position information?
			this._input.consume();
		}
	}
};

exports.Lexer = Lexer;


/***/ }),

/***/ "./node_modules/antlr4/Parser.js":
/*!***************************************!*\
  !*** ./node_modules/antlr4/Parser.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var ParseTreeListener = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").ParseTreeListener;
var Recognizer = __webpack_require__(/*! ./Recognizer */ "./node_modules/antlr4/Recognizer.js").Recognizer;
var DefaultErrorStrategy = __webpack_require__(/*! ./error/ErrorStrategy */ "./node_modules/antlr4/error/ErrorStrategy.js").DefaultErrorStrategy;
var ATNDeserializer = __webpack_require__(/*! ./atn/ATNDeserializer */ "./node_modules/antlr4/atn/ATNDeserializer.js").ATNDeserializer;
var ATNDeserializationOptions = __webpack_require__(/*! ./atn/ATNDeserializationOptions */ "./node_modules/antlr4/atn/ATNDeserializationOptions.js").ATNDeserializationOptions;
var TerminalNode = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").TerminalNode;
var ErrorNode = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").ErrorNode;

function TraceListener(parser) {
	ParseTreeListener.call(this);
    this.parser = parser;
	return this;
}

TraceListener.prototype = Object.create(ParseTreeListener.prototype);
TraceListener.prototype.constructor = TraceListener;

TraceListener.prototype.enterEveryRule = function(ctx) {
	console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

TraceListener.prototype.visitTerminal = function( node) {
	console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
};

TraceListener.prototype.exitEveryRule = function(ctx) {
	console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
};

// this is all the parsing support code essentially; most of it is error
// recovery stuff.//
function Parser(input) {
	Recognizer.call(this);
	// The input stream.
	this._input = null;
	// The error handling strategy for the parser. The default value is a new
	// instance of {@link DefaultErrorStrategy}.
	this._errHandler = new DefaultErrorStrategy();
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	// The {@link ParserRuleContext} object for the currently executing rule.
	// this is always non-null during the parsing process.
	this._ctx = null;
	// Specifies whether or not the parser should construct a parse tree during
	// the parsing process. The default value is {@code true}.
	this.buildParseTrees = true;
	// When {@link //setTrace}{@code (true)} is called, a reference to the
	// {@link TraceListener} is stored here so it can be easily removed in a
	// later call to {@link //setTrace}{@code (false)}. The listener itself is
	// implemented as a parser listener so this field is not directly used by
	// other parser methods.
	this._tracer = null;
	// The list of {@link ParseTreeListener} listeners registered to receive
	// events during the parse.
	this._parseListeners = null;
	// The number of syntax errors reported during parsing. this value is
	// incremented each time {@link //notifyErrorListeners} is called.
	this._syntaxErrors = 0;
	this.setInputStream(input);
	return this;
}

Parser.prototype = Object.create(Recognizer.prototype);
Parser.prototype.contructor = Parser;

// this field maps from the serialized ATN string to the deserialized {@link
// ATN} with
// bypass alternatives.
//
// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
//
Parser.bypassAltsAtnCache = {};

// reset the parser's state//
Parser.prototype.reset = function() {
	if (this._input !== null) {
		this._input.seek(0);
	}
	this._errHandler.reset(this);
	this._ctx = null;
	this._syntaxErrors = 0;
	this.setTrace(false);
	this._precedenceStack = [];
	this._precedenceStack.push(0);
	if (this._interp !== null) {
		this._interp.reset();
	}
};

// Match current input symbol against {@code ttype}. If the symbol type
// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
// called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @param ttype the token type to match
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// {@code ttype} and the error strategy could not recover from the
// mismatched symbol

Parser.prototype.match = function(ttype) {
	var t = this.getCurrentToken();
	if (t.type === ttype) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this.buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};
// Match current input symbol as a wildcard. If the symbol type matches
// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
// and {@link //consume} are called to complete the match process.
//
// <p>If the symbol type does not match,
// {@link ANTLRErrorStrategy//recoverInline} is called on the current error
// strategy to attempt recovery. If {@link //getBuildParseTree} is
// {@code true} and the token index of the symbol returned by
// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
//
// @return the matched symbol
// @throws RecognitionException if the current input symbol did not match
// a wildcard and the error strategy could not recover from the mismatched
// symbol

Parser.prototype.matchWildcard = function() {
	var t = this.getCurrentToken();
	if (t.type > 0) {
		this._errHandler.reportMatch(this);
		this.consume();
	} else {
		t = this._errHandler.recoverInline(this);
		if (this._buildParseTrees && t.tokenIndex === -1) {
			// we must have conjured up a new token during single token
			// insertion
			// if it's not the current symbol
			this._ctx.addErrorNode(t);
		}
	}
	return t;
};

Parser.prototype.getParseListeners = function() {
	return this._parseListeners || [];
};

// Registers {@code listener} to receive events during the parsing process.
//
// <p>To support output-preserving grammar transformations (including but not
// limited to left-recursion removal, automated left-factoring, and
// optimized code generation), calls to listener methods during the parse
// may differ substantially from calls made by
// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
// particular, rule entry and exit events may occur in a different order
// during the parse than after the parser. In addition, calls to certain
// rule entry methods may be omitted.</p>
//
// <p>With the following specific exceptions, calls to listener events are
// <em>deterministic</em>, i.e. for identical input the calls to listener
// methods will be the same.</p>
//
// <ul>
// <li>Alterations to the grammar used to generate code may change the
// behavior of the listener calls.</li>
// <li>Alterations to the command line options passed to ANTLR 4 when
// generating the parser may change the behavior of the listener calls.</li>
// <li>Changing the version of the ANTLR Tool used to generate the parser
// may change the behavior of the listener calls.</li>
// </ul>
//
// @param listener the listener to add
//
// @throws NullPointerException if {@code} listener is {@code null}
//
Parser.prototype.addParseListener = function(listener) {
	if (listener === null) {
		throw "listener";
	}
	if (this._parseListeners === null) {
		this._parseListeners = [];
	}
	this._parseListeners.push(listener);
};

//
// Remove {@code listener} from the list of parse listeners.
//
// <p>If {@code listener} is {@code null} or has not been added as a parse
// listener, this method does nothing.</p>
// @param listener the listener to remove
//
Parser.prototype.removeParseListener = function(listener) {
	if (this._parseListeners !== null) {
		var idx = this._parseListeners.indexOf(listener);
		if (idx >= 0) {
			this._parseListeners.splice(idx, 1);
		}
		if (this._parseListeners.length === 0) {
			this._parseListeners = null;
		}
	}
};

// Remove all parse listeners.
Parser.prototype.removeParseListeners = function() {
	this._parseListeners = null;
};

// Notify any parse listeners of an enter rule event.
Parser.prototype.triggerEnterRuleEvent = function() {
	if (this._parseListeners !== null) {
        var ctx = this._ctx;
		this._parseListeners.map(function(listener) {
			listener.enterEveryRule(ctx);
			ctx.enterRule(listener);
		});
	}
};

//
// Notify any parse listeners of an exit rule event.
//
// @see //addParseListener
//
Parser.prototype.triggerExitRuleEvent = function() {
	if (this._parseListeners !== null) {
		// reverse order walk of listeners
        var ctx = this._ctx;
		this._parseListeners.slice(0).reverse().map(function(listener) {
			ctx.exitRule(listener);
			listener.exitEveryRule(ctx);
		});
	}
};

Parser.prototype.getTokenFactory = function() {
	return this._input.tokenSource._factory;
};

// Tell our token source and error strategy about a new way to create tokens.//
Parser.prototype.setTokenFactory = function(factory) {
	this._input.tokenSource._factory = factory;
};

// The ATN with bypass alternatives is expensive to create so we create it
// lazily.
//
// @throws UnsupportedOperationException if the current parser does not
// implement the {@link //getSerializedATN()} method.
//
Parser.prototype.getATNWithBypassAlts = function() {
	var serializedAtn = this.getSerializedATN();
	if (serializedAtn === null) {
		throw "The current parser does not support an ATN with bypass alternatives.";
	}
	var result = this.bypassAltsAtnCache[serializedAtn];
	if (result === null) {
		var deserializationOptions = new ATNDeserializationOptions();
		deserializationOptions.generateRuleBypassTransitions = true;
		result = new ATNDeserializer(deserializationOptions)
				.deserialize(serializedAtn);
		this.bypassAltsAtnCache[serializedAtn] = result;
	}
	return result;
};

// The preferred method of getting a tree pattern. For example, here's a
// sample use:
//
// <pre>
// ParseTree t = parser.expr();
// ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
// MyParser.RULE_expr);
// ParseTreeMatch m = p.match(t);
// String id = m.get("ID");
// </pre>

var Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/Lexer.js").Lexer;

Parser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {
	lexer = lexer || null;
	if (lexer === null) {
		if (this.getTokenStream() !== null) {
			var tokenSource = this.getTokenStream().tokenSource;
			if (tokenSource instanceof Lexer) {
				lexer = tokenSource;
			}
		}
	}
	if (lexer === null) {
		throw "Parser can't discover a lexer to use";
	}
	var m = new ParseTreePatternMatcher(lexer, this);
	return m.compile(pattern, patternRuleIndex);
};

Parser.prototype.getInputStream = function() {
	return this.getTokenStream();
};

Parser.prototype.setInputStream = function(input) {
	this.setTokenStream(input);
};

Parser.prototype.getTokenStream = function() {
	return this._input;
};

// Set the token stream and reset the parser.//
Parser.prototype.setTokenStream = function(input) {
	this._input = null;
	this.reset();
	this._input = input;
};

// Match needs to return the current input symbol, which gets put
// into the label for the associated token ref; e.g., x=ID.
//
Parser.prototype.getCurrentToken = function() {
	return this._input.LT(1);
};

Parser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {
	offendingToken = offendingToken || null;
	err = err || null;
	if (offendingToken === null) {
		offendingToken = this.getCurrentToken();
	}
	this._syntaxErrors += 1;
	var line = offendingToken.line;
	var column = offendingToken.column;
	var listener = this.getErrorListenerDispatch();
	listener.syntaxError(this, offendingToken, line, column, msg, err);
};

//
// Consume and return the {@linkplain //getCurrentToken current symbol}.
//
// <p>E.g., given the following input with {@code A} being the current
// lookahead symbol, this function moves the cursor to {@code B} and returns
// {@code A}.</p>
//
// <pre>
// A B
// ^
// </pre>
//
// If the parser is not in error recovery mode, the consumed symbol is added
// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
// If the parser <em>is</em> in error recovery mode, the consumed symbol is
// added to the parse tree using
// {@link ParserRuleContext//addErrorNode(Token)}, and
// {@link ParseTreeListener//visitErrorNode} is called on any parse
// listeners.
//
Parser.prototype.consume = function() {
	var o = this.getCurrentToken();
	if (o.type !== Token.EOF) {
		this.getInputStream().consume();
	}
	var hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
	if (this.buildParseTrees || hasListener) {
		var node;
		if (this._errHandler.inErrorRecoveryMode(this)) {
			node = this._ctx.addErrorNode(o);
		} else {
			node = this._ctx.addTokenNode(o);
		}
        node.invokingState = this.state;
		if (hasListener) {
			this._parseListeners.map(function(listener) {
				if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
					listener.visitErrorNode(node);
				} else if (node instanceof TerminalNode) {
					listener.visitTerminal(node);
				}
			});
		}
	}
	return o;
};

Parser.prototype.addContextToParseTree = function() {
	// add current context to parent if we have a parent
	if (this._ctx.parentCtx !== null) {
		this._ctx.parentCtx.addChild(this._ctx);
	}
};

// Always called by generated parsers upon entry to a rule. Access field
// {@link //_ctx} get the current context.

Parser.prototype.enterRule = function(localctx, state, ruleIndex) {
	this.state = state;
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this.buildParseTrees) {
		this.addContextToParseTree();
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent();
	}
};

Parser.prototype.exitRule = function() {
	this._ctx.stop = this._input.LT(-1);
	// trigger event on _ctx, before it reverts to parent
	if (this._parseListeners !== null) {
		this.triggerExitRuleEvent();
	}
	this.state = this._ctx.invokingState;
	this._ctx = this._ctx.parentCtx;
};

Parser.prototype.enterOuterAlt = function(localctx, altNum) {
   	localctx.setAltNumber(altNum);
	// if we have new localctx, make sure we replace existing ctx
	// that is previous child of parse tree
	if (this.buildParseTrees && this._ctx !== localctx) {
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.removeLastChild();
			this._ctx.parentCtx.addChild(localctx);
		}
	}
	this._ctx = localctx;
};

// Get the precedence level for the top-most precedence rule.
//
// @return The precedence level for the top-most precedence rule, or -1 if
// the parser context is not nested within a precedence rule.

Parser.prototype.getPrecedence = function() {
	if (this._precedenceStack.length === 0) {
		return -1;
	} else {
		return this._precedenceStack[this._precedenceStack.length-1];
	}
};

Parser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,
		precedence) {
	this.state = state;
	this._precedenceStack.push(precedence);
	this._ctx = localctx;
	this._ctx.start = this._input.LT(1);
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

//
// Like {@link //enterRule} but for recursive rules.

Parser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {
	var previous = this._ctx;
	previous.parentCtx = localctx;
	previous.invokingState = state;
	previous.stop = this._input.LT(-1);

	this._ctx = localctx;
	this._ctx.start = previous.start;
	if (this.buildParseTrees) {
		this._ctx.addChild(previous);
	}
	if (this._parseListeners !== null) {
		this.triggerEnterRuleEvent(); // simulates rule entry for
										// left-recursive rules
	}
};

Parser.prototype.unrollRecursionContexts = function(parentCtx) {
	this._precedenceStack.pop();
	this._ctx.stop = this._input.LT(-1);
	var retCtx = this._ctx; // save current ctx (return value)
	// unroll so _ctx is as it was before call to recursive method
	if (this._parseListeners !== null) {
		while (this._ctx !== parentCtx) {
			this.triggerExitRuleEvent();
			this._ctx = this._ctx.parentCtx;
		}
	} else {
		this._ctx = parentCtx;
	}
	// hook into tree
	retCtx.parentCtx = parentCtx;
	if (this.buildParseTrees && parentCtx !== null) {
		// add return ctx into invoking rule's tree
		parentCtx.addChild(retCtx);
	}
};

Parser.prototype.getInvokingContext = function(ruleIndex) {
	var ctx = this._ctx;
	while (ctx !== null) {
		if (ctx.ruleIndex === ruleIndex) {
			return ctx;
		}
		ctx = ctx.parentCtx;
	}
	return null;
};

Parser.prototype.precpred = function(localctx, precedence) {
	return precedence >= this._precedenceStack[this._precedenceStack.length-1];
};

Parser.prototype.inContext = function(context) {
	// TODO: useful in parser?
	return false;
};

//
// Checks whether or not {@code symbol} can follow the current state in the
// ATN. The behavior of this method is equivalent to the following, but is
// implemented such that the complete context-sensitive follow set does not
// need to be explicitly constructed.
//
// <pre>
// return getExpectedTokens().contains(symbol);
// </pre>
//
// @param symbol the symbol type to check
// @return {@code true} if {@code symbol} can follow the current state in
// the ATN, otherwise {@code false}.

Parser.prototype.isExpectedToken = function(symbol) {
	var atn = this._interp.atn;
	var ctx = this._ctx;
	var s = atn.states[this.state];
	var following = atn.nextTokens(s);
	if (following.contains(symbol)) {
		return true;
	}
	if (!following.contains(Token.EPSILON)) {
		return false;
	}
	while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
		var invokingState = atn.states[ctx.invokingState];
		var rt = invokingState.transitions[0];
		following = atn.nextTokens(rt.followState);
		if (following.contains(symbol)) {
			return true;
		}
		ctx = ctx.parentCtx;
	}
	if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
		return true;
	} else {
		return false;
	}
};

// Computes the set of input symbols which could follow the current parser
// state and context, as given by {@link //getState} and {@link //getContext},
// respectively.
//
// @see ATN//getExpectedTokens(int, RuleContext)
//
Parser.prototype.getExpectedTokens = function() {
	return this._interp.atn.getExpectedTokens(this.state, this._ctx);
};

Parser.prototype.getExpectedTokensWithinCurrentRule = function() {
	var atn = this._interp.atn;
	var s = atn.states[this.state];
	return atn.nextTokens(s);
};

// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//
Parser.prototype.getRuleIndex = function(ruleName) {
	var ruleIndex = this.getRuleIndexMap()[ruleName];
	if (ruleIndex !== null) {
		return ruleIndex;
	} else {
		return -1;
	}
};

// Return List&lt;String&gt; of the rule names in your parser instance
// leading up to a call to the current rule. You could override if
// you want more details such as the file/line info of where
// in the ATN a rule is invoked.
//
// this is very useful for error messages.
//
Parser.prototype.getRuleInvocationStack = function(p) {
	p = p || null;
	if (p === null) {
		p = this._ctx;
	}
	var stack = [];
	while (p !== null) {
		// compute what follows who invoked us
		var ruleIndex = p.ruleIndex;
		if (ruleIndex < 0) {
			stack.push("n/a");
		} else {
			stack.push(this.ruleNames[ruleIndex]);
		}
		p = p.parentCtx;
	}
	return stack;
};

// For debugging and other purposes.//
Parser.prototype.getDFAStrings = function() {
	return this._interp.decisionToDFA.toString();
};
// For debugging and other purposes.//
Parser.prototype.dumpDFA = function() {
	var seenOne = false;
	for (var i = 0; i < this._interp.decisionToDFA.length; i++) {
		var dfa = this._interp.decisionToDFA[i];
		if (dfa.states.length > 0) {
			if (seenOne) {
				console.log();
			}
			this.printer.println("Decision " + dfa.decision + ":");
			this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
			seenOne = true;
		}
	}
};

/*
"			printer = function() {\r\n" +
"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
"			};\r\n" +
*/

Parser.prototype.getSourceName = function() {
	return this._input.sourceName;
};

// During a parse is sometimes useful to listen in on the rule entry and exit
// events as well as token matches. this is for quick and dirty debugging.
//
Parser.prototype.setTrace = function(trace) {
	if (!trace) {
		this.removeParseListener(this._tracer);
		this._tracer = null;
	} else {
		if (this._tracer !== null) {
			this.removeParseListener(this._tracer);
		}
		this._tracer = new TraceListener(this);
		this.addParseListener(this._tracer);
	}
};

exports.Parser = Parser;

/***/ }),

/***/ "./node_modules/antlr4/ParserRuleContext.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/ParserRuleContext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//* A rule invocation record for parsing.
//
//  Contains all of the information about the current rule not stored in the
//  RuleContext. It handles parse tree children list, Any ATN state
//  tracing, and the default values available for rule indications:
//  start, stop, rule index, current alt number, current
//  ATN state.
//
//  Subclasses made for each rule and grammar track the parameters,
//  return values, locals, and labels specific to that rule. These
//  are the objects that are returned from rules.
//
//  Note text is not an actual field of a rule return value; it is computed
//  from start and stop using the input stream's toString() method.  I
//  could add a ctor to this so that we can pass in and store the input
//  stream, but I'm not sure we want to do that.  It would seem to be undefined
//  to get the .text property anyway if the rule matches tokens from multiple
//  input streams.
//
//  I do not use getters for fields of objects that are used simply to
//  group values such as this aggregate.  The getters/setters are there to
//  satisfy the superclass interface.

var RuleContext = __webpack_require__(/*! ./RuleContext */ "./node_modules/antlr4/RuleContext.js").RuleContext;
var Tree = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js");
var INVALID_INTERVAL = Tree.INVALID_INTERVAL;
var TerminalNode = Tree.TerminalNode;
var TerminalNodeImpl = Tree.TerminalNodeImpl;
var ErrorNodeImpl = Tree.ErrorNodeImpl;
var Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;

function ParserRuleContext(parent, invokingStateNumber) {
	parent = parent || null;
	invokingStateNumber = invokingStateNumber || null;
	RuleContext.call(this, parent, invokingStateNumber);
	this.ruleIndex = -1;
    // * If we are debugging or building a parse tree for a visitor,
    // we need to track all of the tokens and rule invocations associated
    // with this rule's context. This is empty for parsing w/o tree constr.
    // operation because we don't the need to track the details about
    // how we parse this rule.
    // /
    this.children = null;
    this.start = null;
    this.stop = null;
    // The exception that forced this rule to return. If the rule successfully
    // completed, this is {@code null}.
    this.exception = null;
}

ParserRuleContext.prototype = Object.create(RuleContext.prototype);
ParserRuleContext.prototype.constructor = ParserRuleContext;

// * COPY a ctx (I'm deliberately not using copy constructor)///
ParserRuleContext.prototype.copyFrom = function(ctx) {
    // from RuleContext
    this.parentCtx = ctx.parentCtx;
    this.invokingState = ctx.invokingState;
    this.children = null;
    this.start = ctx.start;
    this.stop = ctx.stop;
    // copy any error nodes to alt label node
    if(ctx.children) {
        this.children = [];
        // reset parent pointer for any error nodes
    	ctx.children.map(function(child) {
    		if (child instanceof ErrorNodeImpl) {
                this.children.push(child);
                child.parentCtx = this;
            }
		}, this);
	}
};

// Double dispatch methods for listeners
ParserRuleContext.prototype.enterRule = function(listener) {
};

ParserRuleContext.prototype.exitRule = function(listener) {
};

// * Does not set parent link; other add methods do that///
ParserRuleContext.prototype.addChild = function(child) {
    if (this.children === null) {
        this.children = [];
    }
    this.children.push(child);
    return child;
};

// * Used by enterOuterAlt to toss out a RuleContext previously added as
// we entered a rule. If we have // label, we will need to remove
// generic ruleContext object.
// /
ParserRuleContext.prototype.removeLastChild = function() {
    if (this.children !== null) {
        this.children.pop();
    }
};

ParserRuleContext.prototype.addTokenNode = function(token) {
    var node = new TerminalNodeImpl(token);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.addErrorNode = function(badToken) {
    var node = new ErrorNodeImpl(badToken);
    this.addChild(node);
    node.parentCtx = this;
    return node;
};

ParserRuleContext.prototype.getChild = function(i, type) {
	type = type || null;
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	if (type === null) {
		return this.children[i];
	} else {
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if(child instanceof type) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
		}
		return null;
    }
};


ParserRuleContext.prototype.getToken = function(ttype, i) {
	if (this.children === null || i < 0 || i >= this.children.length) {
		return null;
	}
	for(var j=0; j<this.children.length; j++) {
		var child = this.children[j];
		if (child instanceof TerminalNode) {
			if (child.symbol.type === ttype) {
				if(i===0) {
					return child;
				} else {
					i -= 1;
				}
			}
        }
	}
    return null;
};

ParserRuleContext.prototype.getTokens = function(ttype ) {
    if (this.children=== null) {
        return [];
    } else {
		var tokens = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					tokens.push(child);
				}
			}
		}
		return tokens;
    }
};

ParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {
    return this.getChild(i, ctxType);
};

ParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {
    if (this.children=== null) {
        return [];
    } else {
		var contexts = [];
		for(var j=0; j<this.children.length; j++) {
			var child = this.children[j];
			if (child instanceof ctxType) {
				contexts.push(child);
			}
		}
		return contexts;
	}
};

ParserRuleContext.prototype.getChildCount = function() {
	if (this.children=== null) {
		return 0;
	} else {
		return this.children.length;
	}
};

ParserRuleContext.prototype.getSourceInterval = function() {
    if( this.start === null || this.stop === null) {
        return INVALID_INTERVAL;
    } else {
        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
    }
};

RuleContext.EMPTY = new ParserRuleContext();

function InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {
	ParserRuleContext.call(parent, invokingStateNumber);
    this.ruleIndex = ruleIndex;
    return this;
}

InterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);
InterpreterRuleContext.prototype.constructor = InterpreterRuleContext;

exports.ParserRuleContext = ParserRuleContext;

/***/ }),

/***/ "./node_modules/antlr4/PredictionContext.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/PredictionContext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var RuleContext = __webpack_require__(/*! ./RuleContext */ "./node_modules/antlr4/RuleContext.js").RuleContext;
var Hash = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js").Hash;
var Map = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js").Map;

function PredictionContext(cachedHashCode) {
	this.cachedHashCode = cachedHashCode;
}

// Represents {@code $} in local context prediction, which means wildcard.
// {@code//+x =//}.
// /
PredictionContext.EMPTY = null;

// Represents {@code $} in an array in full context mode, when {@code $}
// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
// {@code $} = {@link //EMPTY_RETURN_STATE}.
// /
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;

// Stores the computed hash code of this {@link PredictionContext}. The hash
// code is computed in parts to match the following reference algorithm.
//
// <pre>
// private int referenceHashCode() {
// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
// //INITIAL_HASH});
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
// getParent}(i));
// }
//
// for (int i = 0; i &lt; {@link //size()}; i++) {
// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
// //getReturnState getReturnState}(i));
// }
//
// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
// //size()});
// return hash;
// }
// </pre>
// /

// This means only the {@link //EMPTY} context is in set.
PredictionContext.prototype.isEmpty = function() {
	return this === PredictionContext.EMPTY;
};

PredictionContext.prototype.hasEmptyPath = function() {
	return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
};

PredictionContext.prototype.hashCode = function() {
	return this.cachedHashCode;
};


PredictionContext.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};
/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

// Used to cache {@link PredictionContext} objects. Its used for the shared
// context cash associated with contexts in DFA states. This cache
// can be used for both lexers and parsers.

function PredictionContextCache() {
	this.cache = new Map();
	return this;
}

// Add a context to the cache and return it. If the context already exists,
// return that one instead and do not add a new context to the cache.
// Protect shared cache from unsafe thread access.
//
PredictionContextCache.prototype.add = function(ctx) {
	if (ctx === PredictionContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	var existing = this.cache.get(ctx) || null;
	if (existing !== null) {
		return existing;
	}
	this.cache.put(ctx, ctx);
	return ctx;
};

PredictionContextCache.prototype.get = function(ctx) {
	return this.cache.get(ctx) || null;
};

Object.defineProperty(PredictionContextCache.prototype, "length", {
	get : function() {
		return this.cache.length;
	}
});

function SingletonPredictionContext(parent, returnState) {
	var hashCode = 0;
	var hash = new Hash();
	if(parent !== null) {
		hash.update(parent, returnState);
	} else {
		hash.update(1);
	}
	hashCode = hash.finish();
	PredictionContext.call(this, hashCode);
	this.parentCtx = parent;
	this.returnState = returnState;
}

SingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);
SingletonPredictionContext.prototype.contructor = SingletonPredictionContext;

SingletonPredictionContext.create = function(parent, returnState) {
	if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
		// someone can pass in the bits of an array ctx that mean $
		return PredictionContext.EMPTY;
	} else {
		return new SingletonPredictionContext(parent, returnState);
	}
};

Object.defineProperty(SingletonPredictionContext.prototype, "length", {
	get : function() {
		return 1;
	}
});

SingletonPredictionContext.prototype.getParent = function(index) {
	return this.parentCtx;
};

SingletonPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

SingletonPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof SingletonPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		if(this.returnState !== other.returnState)
            return false;
        else if(this.parentCtx==null)
            return other.parentCtx==null
		else
            return this.parentCtx.equals(other.parentCtx);
	}
};

SingletonPredictionContext.prototype.toString = function() {
	var up = this.parentCtx === null ? "" : this.parentCtx.toString();
	if (up.length === 0) {
		if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
			return "$";
		} else {
			return "" + this.returnState;
		}
	} else {
		return "" + this.returnState + " " + up;
	}
};

function EmptyPredictionContext() {
	SingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);
	return this;
}

EmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);
EmptyPredictionContext.prototype.constructor = EmptyPredictionContext;

EmptyPredictionContext.prototype.isEmpty = function() {
	return true;
};

EmptyPredictionContext.prototype.getParent = function(index) {
	return null;
};

EmptyPredictionContext.prototype.getReturnState = function(index) {
	return this.returnState;
};

EmptyPredictionContext.prototype.equals = function(other) {
	return this === other;
};

EmptyPredictionContext.prototype.toString = function() {
	return "$";
};

PredictionContext.EMPTY = new EmptyPredictionContext();

function ArrayPredictionContext(parents, returnStates) {
	// Parent can be null only if full ctx mode and we make an array
	// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
	// null parent and
	// returnState == {@link //EMPTY_RETURN_STATE}.
	var h = new Hash();
	h.update(parents, returnStates);
	var hashCode = h.finish();
	PredictionContext.call(this, hashCode);
	this.parents = parents;
	this.returnStates = returnStates;
	return this;
}

ArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);
ArrayPredictionContext.prototype.constructor = ArrayPredictionContext;

ArrayPredictionContext.prototype.isEmpty = function() {
	// since EMPTY_RETURN_STATE can only appear in the last position, we
	// don't need to verify that size==1
	return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
};

Object.defineProperty(ArrayPredictionContext.prototype, "length", {
	get : function() {
		return this.returnStates.length;
	}
});

ArrayPredictionContext.prototype.getParent = function(index) {
	return this.parents[index];
};

ArrayPredictionContext.prototype.getReturnState = function(index) {
	return this.returnStates[index];
};

ArrayPredictionContext.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof ArrayPredictionContext)) {
		return false;
	} else if (this.hashCode() !== other.hashCode()) {
		return false; // can't be same if hash is different
	} else {
		return this.returnStates === other.returnStates &&
				this.parents === other.parents;
	}
};

ArrayPredictionContext.prototype.toString = function() {
	if (this.isEmpty()) {
		return "[]";
	} else {
		var s = "[";
		for (var i = 0; i < this.returnStates.length; i++) {
			if (i > 0) {
				s = s + ", ";
			}
			if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
				s = s + "$";
				continue;
			}
			s = s + this.returnStates[i];
			if (this.parents[i] !== null) {
				s = s + " " + this.parents[i];
			} else {
				s = s + "null";
			}
		}
		return s + "]";
	}
};

// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
// Return {@link //EMPTY} if {@code outerContext} is empty or null.
// /
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	var parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	var state = atn.states[outerContext.invokingState];
	var transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	var s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

//
// Merge two {@link SingletonPredictionContext} instances.
//
// <p>Stack tops equal, parents merge is same; return left graph.<br>
// <embed src="images/SingletonMerge_SameRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Same stack top, parents differ; merge parents giving array node, then
// remainders of those graphs. A new root node is created to point to the
// merged parents.<br>
// <embed src="images/SingletonMerge_SameRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to same parent. Make array node for the
// root where both element in the root point to the same (original)
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootSamePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Different stack tops pointing to different parents. Make array node for
// the root where each element points to the corresponding original
// parent.<br>
// <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
// type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// @param mergeCache
// /
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	var rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		var parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		var spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		var singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			var payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			var parents = [ singleParent, singleParent ];
			var apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		var payloads = [ a.returnState, b.returnState ];
		var parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		var a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

//
// Handle case where at least one of {@code a} or {@code b} is
// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
// to represent {@link //EMPTY}.
//
// <h2>Local-Context Merges</h2>
//
// <p>These local-context merge operations are used when {@code rootIsWildcard}
// is true.</p>
//
// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
// <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
// {@code //EMPTY}; return left graph.<br>
// <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
//
// <p>Special case of last merge if local context.<br>
// <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
//
// <h2>Full-Context Merges</h2>
//
// <p>These full-context merge operations are used when {@code rootIsWildcard}
// is false.</p>
//
// <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
//
// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
// null parent).<br>
// <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
//
// <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
//
// @param a the first {@link SingletonPredictionContext}
// @param b the second {@link SingletonPredictionContext}
// @param rootIsWildcard {@code true} if this is a local-context merge,
// otherwise false to indicate a full-context merge
// /
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			var payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			var payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			var parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

//
// Merge two {@link ArrayPredictionContext} instances.
//
// <p>Different tops, different parents.<br>
// <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, same parents.<br>
// <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, different parents.<br>
// <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
//
// <p>Shared top, all shared parents.<br>
// <embed src="images/ArrayMerge_ShareTopSharePar.svg"
// type="image/svg+xml"/></p>
//
// <p>Equal tops, merge parents and reduce top to
// {@link SingletonPredictionContext}.<br>
// <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
// /
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		var previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	var i = 0; // walks a
	var j = 0; // walks b
	var k = 0; // walks target M array

	var mergedReturnStates = [];
	var mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		var a_parent = a.parents[i];
		var b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			var payload = a.returnStates[i];
			// $+$ = $
			var bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			var ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				var mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedParents[k] = mergedParent;
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (var p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (var p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			var a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	var M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

//
// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
// ones.
// /
function combineCommonParents(parents) {
	var uniqueParents = new Map();

	for (var p = 0; p < parents.length; p++) {
		var parent = parents[p];
		if (!(uniqueParents.containsKey(parent))) {
			uniqueParents.put(parent, parent);
		}
	}
	for (var q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents.get(parents[q]);
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	var existing = visited.get(context) || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited.put(context, existing);
		return existing;
	}
	var changed = false;
	var parents = [];
	for (var i = 0; i < parents.length; i++) {
		var parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (var j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited.put(context, context);
		return context;
	}
	var updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited.put(updated, updated);
	visited.put(context, updated);

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = new Map();
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited.containsKey(context)) {
			return nodes;
		}
		visited.put(context, context);
		nodes.push(context);
		for (var i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

exports.merge = merge;
exports.PredictionContext = PredictionContext;
exports.PredictionContextCache = PredictionContextCache;
exports.SingletonPredictionContext = SingletonPredictionContext;
exports.predictionContextFromRuleContext = predictionContextFromRuleContext;
exports.getCachedPredictionContext = getCachedPredictionContext;


/***/ }),

/***/ "./node_modules/antlr4/Recognizer.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/Recognizer.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
var ConsoleErrorListener = __webpack_require__(/*! ./error/ErrorListener */ "./node_modules/antlr4/error/ErrorListener.js").ConsoleErrorListener;
var ProxyErrorListener = __webpack_require__(/*! ./error/ErrorListener */ "./node_modules/antlr4/error/ErrorListener.js").ProxyErrorListener;

function Recognizer() {
    this._listeners = [ ConsoleErrorListener.INSTANCE ];
    this._interp = null;
    this._stateNumber = -1;
    return this;
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};


Recognizer.prototype.checkVersion = function(toolVersion) {
    var runtimeVersion = "4.8";
    if (runtimeVersion!==toolVersion) {
        console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
    }
};

Recognizer.prototype.addErrorListener = function(listener) {
    this._listeners.push(listener);
};

Recognizer.prototype.removeErrorListeners = function() {
    this._listeners = [];
};

Recognizer.prototype.getTokenTypeMap = function() {
    var tokenNames = this.getTokenNames();
    if (tokenNames===null) {
        throw("The current recognizer does not provide a list of token names.");
    }
    var result = this.tokenTypeMapCache[tokenNames];
    if(result===undefined) {
        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
        result.EOF = Token.EOF;
        this.tokenTypeMapCache[tokenNames] = result;
    }
    return result;
};

// Get a map from rule names to rule indexes.
//
// <p>Used for XPath and tree pattern compilation.</p>
//
Recognizer.prototype.getRuleIndexMap = function() {
    var ruleNames = this.ruleNames;
    if (ruleNames===null) {
        throw("The current recognizer does not provide a list of rule names.");
    }
    var result = this.ruleIndexMapCache[ruleNames];
    if(result===undefined) {
        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
        this.ruleIndexMapCache[ruleNames] = result;
    }
    return result;
};

Recognizer.prototype.getTokenType = function(tokenName) {
    var ttype = this.getTokenTypeMap()[tokenName];
    if (ttype !==undefined) {
        return ttype;
    } else {
        return Token.INVALID_TYPE;
    }
};


// What is the error header, normally line/character position information?//
Recognizer.prototype.getErrorHeader = function(e) {
    var line = e.getOffendingToken().line;
    var column = e.getOffendingToken().column;
    return "line " + line + ":" + column;
};


// How should a token be displayed in an error message? The default
//  is to display just the text, but during development you might
//  want to have a lot of information spit out.  Override in that case
//  to use t.toString() (which, for CommonToken, dumps everything about
//  the token). This is better than forcing you to override a method in
//  your token objects because you don't have to go modify your lexer
//  so that it creates a new Java type.
//
// @deprecated This method is not called by the ANTLR 4 Runtime. Specific
// implementations of {@link ANTLRErrorStrategy} may provide a similar
// feature when necessary. For example, see
// {@link DefaultErrorStrategy//getTokenErrorDisplay}.
//
Recognizer.prototype.getTokenErrorDisplay = function(t) {
    if (t===null) {
        return "<no token>";
    }
    var s = t.text;
    if (s===null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
    return "'" + s + "'";
};

Recognizer.prototype.getErrorListenerDispatch = function() {
    return new ProxyErrorListener(this._listeners);
};

// subclass needs to override these if there are sempreds or actions
// that the ATN interp needs to execute
Recognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {
    return true;
};

Recognizer.prototype.precpred = function(localctx , precedence) {
    return true;
};

//Indicate that the recognizer has changed internal state that is
//consistent with the ATN state passed in.  This way we always know
//where we are in the ATN as the parser goes along. The rule
//context objects form a stack that lets us see the stack of
//invoking rules. Combine this and we have complete ATN
//configuration information.

Object.defineProperty(Recognizer.prototype, "state", {
	get : function() {
		return this._stateNumber;
	},
	set : function(state) {
		this._stateNumber = state;
	}
});


exports.Recognizer = Recognizer;


/***/ }),

/***/ "./node_modules/antlr4/RuleContext.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/RuleContext.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

//  A rule context is a record of a single rule invocation. It knows
//  which context invoked it, if any. If there is no parent context, then
//  naturally the invoking state is not valid.  The parent link
//  provides a chain upwards from the current rule invocation to the root
//  of the invocation tree, forming a stack. We actually carry no
//  information about the rule associated with this context (except
//  when parsing). We keep only the state number of the invoking state from
//  the ATN submachine that invoked this. Contrast this with the s
//  pointer inside ParserRuleContext that tracks the current state
//  being "executed" for the current rule.
//
//  The parent contexts are useful for computing lookahead sets and
//  getting error information.
//
//  These objects are used during parsing and prediction.
//  For the special case of parsers, we use the subclass
//  ParserRuleContext.
//
//  @see ParserRuleContext
///

var RuleNode = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").RuleNode;
var INVALID_INTERVAL = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/tree/Tree.js").INVALID_INTERVAL;
var INVALID_ALT_NUMBER = __webpack_require__(/*! ./atn/ATN */ "./node_modules/antlr4/atn/ATN.js").INVALID_ALT_NUMBER;

function RuleContext(parent, invokingState) {
	RuleNode.call(this);
	// What context invoked this rule?
	this.parentCtx = parent || null;
	// What state invoked the rule associated with this context?
	// The "return address" is the followState of invokingState
	// If parent is null, this should be -1.
	this.invokingState = invokingState || -1;
	return this;
}

RuleContext.prototype = Object.create(RuleNode.prototype);
RuleContext.prototype.constructor = RuleContext;

RuleContext.prototype.depth = function() {
	var n = 0;
	var p = this;
	while (p !== null) {
		p = p.parentCtx;
		n += 1;
	}
	return n;
};

// A context is empty if there is no invoking state; meaning nobody call
// current context.
RuleContext.prototype.isEmpty = function() {
	return this.invokingState === -1;
};

// satisfy the ParseTree / SyntaxTree interface

RuleContext.prototype.getSourceInterval = function() {
	return INVALID_INTERVAL;
};

RuleContext.prototype.getRuleContext = function() {
	return this;
};

RuleContext.prototype.getPayload = function() {
	return this;
};

// Return the combined text of all child nodes. This method only considers
// tokens which have been added to the parse tree.
// <p>
// Since tokens on hidden channels (e.g. whitespace or comments) are not
// added to the parse trees, they will not appear in the output of this
// method.
// /
RuleContext.prototype.getText = function() {
	if (this.getChildCount() === 0) {
		return "";
	} else {
		return this.children.map(function(child) {
			return child.getText();
		}).join("");
	}
};

// For rule associated with this parse tree internal node, return
// the outer alternative number used to match the input. Default
// implementation does not compute nor store this alt num. Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
// to set it.
RuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }

// Set the outer alternative number for this context node. Default
// implementation does nothing to avoid backing field overhead for
// trees that don't need it.  Create
// a subclass of ParserRuleContext with backing field and set
// option contextSuperClass.
RuleContext.prototype.setAltNumber = function(altNumber) { }

RuleContext.prototype.getChild = function(i) {
	return null;
};

RuleContext.prototype.getChildCount = function() {
	return 0;
};

RuleContext.prototype.accept = function(visitor) {
	return visitor.visitChildren(this);
};

//need to manage circular dependencies, so export now
exports.RuleContext = RuleContext;
var Trees = __webpack_require__(/*! ./tree/Trees */ "./node_modules/antlr4/tree/Trees.js").Trees;


// Print out a whole tree, not just a node, in LISP format
// (root child1 .. childN). Print just a node if this is a leaf.
//

RuleContext.prototype.toStringTree = function(ruleNames, recog) {
	return Trees.toStringTree(this, ruleNames, recog);
};

RuleContext.prototype.toString = function(ruleNames, stop) {
	ruleNames = ruleNames || null;
	stop = stop || null;
	var p = this;
	var s = "[";
	while (p !== null && p !== stop) {
		if (ruleNames === null) {
			if (!p.isEmpty()) {
				s += p.invokingState;
			}
		} else {
			var ri = p.ruleIndex;
			var ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
					: "" + ri;
			s += ruleName;
		}
		if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
			s += " ";
		}
		p = p.parentCtx;
	}
	s += "]";
	return s;
};



/***/ }),

/***/ "./node_modules/antlr4/Token.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Token.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A token has properties: text, type, line, character position in the line
// (so we can ignore tabs), token channel, index, and source from which
// we obtained this token.

function Token() {
	this.source = null;
	this.type = null; // token type of the token
	this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
	this.start = null; // optional; return -1 if not implemented.
	this.stop = null; // optional; return -1 if not implemented.
	this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
	this.line = null; // line=1..n of the 1st character
	this.column = null; // beginning of the line at which it occurs, 0..n-1
	this._text = null; // text of the token.
	return this;
}

Token.INVALID_TYPE = 0;

// During lookahead operations, this "token" signifies we hit rule end ATN state
// and did not follow it despite needing to.
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

// All tokens go to the parser (unless skip() is called in that rule)
// on a particular "channel". The parser tunes to a particular channel
// so that whitespace etc... can go to the parser on a "hidden" channel.

Token.DEFAULT_CHANNEL = 0;

// Anything on different channel than DEFAULT_CHANNEL is not parsed
// by parser.

Token.HIDDEN_CHANNEL = 1;

// Explicitly set the text for this token. If {code text} is not
// {@code null}, then {@link //getText} will return this value rather than
// extracting the text from the input.
//
// @param text The explicit text of the token, or {@code null} if the text
// should be obtained from the input along with the start and stop indexes
// of the token.

Object.defineProperty(Token.prototype, "text", {
	get : function() {
		return this._text;
	},
	set : function(text) {
		this._text = text;
	}
});

Token.prototype.getTokenSource = function() {
	return this.source[0];
};

Token.prototype.getInputStream = function() {
	return this.source[1];
};

function CommonToken(source, type, channel, start, stop) {
	Token.call(this);
	this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
	this.type = type !== undefined ? type : null;
	this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
	this.start = start !== undefined ? start : -1;
	this.stop = stop !== undefined ? stop : -1;
	this.tokenIndex = -1;
	if (this.source[0] !== null) {
		this.line = source[0].line;
		this.column = source[0].column;
	} else {
		this.column = -1;
	}
	return this;
}

CommonToken.prototype = Object.create(Token.prototype);
CommonToken.prototype.constructor = CommonToken;

// An empty {@link Pair} which is used as the default value of
// {@link //source} for tokens that do not have a source.
CommonToken.EMPTY_SOURCE = [ null, null ];

// Constructs a new {@link CommonToken} as a copy of another {@link Token}.
//
// <p>
// If {@code oldToken} is also a {@link CommonToken} instance, the newly
// constructed token will share a reference to the {@link //text} field and
// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
// be assigned the result of calling {@link //getText}, and {@link //source}
// will be constructed from the result of {@link Token//getTokenSource} and
// {@link Token//getInputStream}.</p>
//
// @param oldToken The token to copy.
//
CommonToken.prototype.clone = function() {
	var t = new CommonToken(this.source, this.type, this.channel, this.start,
			this.stop);
	t.tokenIndex = this.tokenIndex;
	t.line = this.line;
	t.column = this.column;
	t.text = this.text;
	return t;
};

Object.defineProperty(CommonToken.prototype, "text", {
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
	set : function(text) {
		this._text = text;
	}
});

CommonToken.prototype.toString = function() {
	var txt = this.text;
	if (txt !== null) {
		txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
	} else {
		txt = "<no text>";
	}
	return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
			txt + "',<" + this.type + ">" +
			(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
			this.line + ":" + this.column + "]";
};

exports.Token = Token;
exports.CommonToken = CommonToken;


/***/ }),

/***/ "./node_modules/antlr4/Utils.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/Utils.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,
        key = this.toString();

    remainder = key.length & 3; // key.length % 4
    bytes = key.length - remainder;
    h1 = String.prototype.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a.equals(b);
}

function standardHashCodeFunction(a) {
    return a.hashCode();
}

function Set(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Set.prototype, "length", {
    get: function () {
        var l = 0;
        for (var key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
});

Set.prototype.add = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
        values.push(value);
        return value;
    } else {
        this.data[key] = [value];
        return value;
    }
};

Set.prototype.contains = function (value) {
    return this.get(value) != null;
};

Set.prototype.get = function (value) {
    var hash = this.hashFunction(value);
    var key = "hash_" + hash;
    if (key in this.data) {
        var values = this.data[key];
        for (var i = 0; i < values.length; i++) {
            if (this.equalsFunction(value, values[i])) {
                return values[i];
            }
        }
    }
    return null;
};

Set.prototype.values = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};

Set.prototype.toString = function () {
    return arrayToString(this.values());
};

function BitSet() {
    this.data = [];
    return this;
}

BitSet.prototype.add = function (value) {
    this.data[value] = true;
};

BitSet.prototype.or = function (set) {
    var bits = this;
    Object.keys(set.data).map(function (alt) {
        bits.add(alt);
    });
};

BitSet.prototype.remove = function (value) {
    delete this.data[value];
};

BitSet.prototype.contains = function (value) {
    return this.data[value] === true;
};

BitSet.prototype.values = function () {
    return Object.keys(this.data);
};

BitSet.prototype.minValue = function () {
    return Math.min.apply(null, this.values());
};

BitSet.prototype.hashCode = function () {
    var hash = new Hash();
    hash.update(this.values());
    return hash.finish();
};

BitSet.prototype.equals = function (other) {
    if (!(other instanceof BitSet)) {
        return false;
    }
    return this.hashCode() === other.hashCode();
};

Object.defineProperty(BitSet.prototype, "length", {
    get: function () {
        return this.values().length;
    }
});

BitSet.prototype.toString = function () {
    return "{" + this.values().join(", ") + "}";
};

function Map(hashFunction, equalsFunction) {
    this.data = {};
    this.hashFunction = hashFunction || standardHashCodeFunction;
    this.equalsFunction = equalsFunction || standardEqualsFunction;
    return this;
}

Object.defineProperty(Map.prototype, "length", {
    get: function () {
        var l = 0;
        for (var hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
});

Map.prototype.put = function (key, value) {
    var hashKey = "hash_" + this.hashFunction(key);
    if (hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key)) {
                var oldValue = entry.value;
                entry.value = value;
                return oldValue;
            }
        }
        entries.push({key:key, value:value});
        return value;
    } else {
        this.data[hashKey] = [{key:key, value:value}];
        return value;
    }
};

Map.prototype.containsKey = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return true;
        }
    }
    return false;
};

Map.prototype.get = function (key) {
    var hashKey = "hash_" + this.hashFunction(key);
    if(hashKey in this.data) {
        var entries = this.data[hashKey];
        for (var i = 0; i < entries.length; i++) {
            var entry = entries[i];
            if (this.equalsFunction(key, entry.key))
                return entry.value;
        }
    }
    return null;
};

Map.prototype.entries = function () {
    var l = [];
    for (var key in this.data) {
        if (key.indexOf("hash_") === 0) {
            l = l.concat(this.data[key]);
        }
    }
    return l;
};


Map.prototype.getKeys = function () {
    return this.entries().map(function(e) {
        return e.key;
    });
};


Map.prototype.getValues = function () {
    return this.entries().map(function(e) {
            return e.value;
    });
};


Map.prototype.toString = function () {
    var ss = this.entries().map(function(entry) {
        return '{' + entry.key + ':' + entry.value + '}';
    });
    return '[' + ss.join(", ") + ']';
};


function AltDict() {
    this.data = {};
    return this;
}


AltDict.prototype.get = function (key) {
    key = "k-" + key;
    if (key in this.data) {
        return this.data[key];
    } else {
        return null;
    }
};

AltDict.prototype.put = function (key, value) {
    key = "k-" + key;
    this.data[key] = value;
};

AltDict.prototype.values = function () {
    var data = this.data;
    var keys = Object.keys(this.data);
    return keys.map(function (key) {
        return data[key];
    });
};

function DoubleDict(defaultMapCtor) {
    this.defaultMapCtor = defaultMapCtor || Map;
    this.cacheMap = new this.defaultMapCtor();
    return this;
}

function Hash() {
    this.count = 0;
    this.hash = 0;
    return this;
}

Hash.prototype.update = function () {
    for(var i=0;i<arguments.length;i++) {
        var value = arguments[i];
        if (value == null)
            continue;
        if(Array.isArray(value))
            this.update.apply(this, value);
        else {
            var k = 0;
            switch (typeof(value)) {
                case 'undefined':
                case 'function':
                    continue;
                case 'number':
                case 'boolean':
                    k = value;
                    break;
                case 'string':
                    k = value.hashCode();
                    break;
                default:
                    if(value.updateHashCode)
                        value.updateHashCode(this);
                    else
                        console.log("No updateHashCode for " + value.toString())
                    continue;
            }
            k = k * 0xCC9E2D51;
            k = (k << 15) | (k >>> (32 - 15));
            k = k * 0x1B873593;
            this.count = this.count + 1;
            var hash = this.hash ^ k;
            hash = (hash << 13) | (hash >>> (32 - 13));
            hash = hash * 5 + 0xE6546B64;
            this.hash = hash;
        }
    }
};

Hash.prototype.finish = function () {
    var hash = this.hash ^ (this.count * 4);
    hash = hash ^ (hash >>> 16);
    hash = hash * 0x85EBCA6B;
    hash = hash ^ (hash >>> 13);
    hash = hash * 0xC2B2AE35;
    hash = hash ^ (hash >>> 16);
    return hash;
};

function hashStuff() {
    var hash = new Hash();
    hash.update.apply(hash, arguments);
    return hash.finish();
}

DoubleDict.prototype.get = function (a, b) {
    var d = this.cacheMap.get(a) || null;
    return d === null ? null : (d.get(b) || null);
};

DoubleDict.prototype.set = function (a, b, o) {
    var d = this.cacheMap.get(a) || null;
    if (d === null) {
        d = new this.defaultMapCtor();
        this.cacheMap.put(a, d);
    }
    d.put(b, o);
};


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t")
         .replace(/\n/g, "\\n")
         .replace(/\r/g, "\\r");
    if (escapeSpaces) {
        s = s.replace(/ /g, "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
};

function equalArrays(a, b)
{
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals(b[i]))
            return false;
    }
    return true;
};

exports.Hash = Hash;
exports.Set = Set;
exports.Map = Map;
exports.BitSet = BitSet;
exports.AltDict = AltDict;
exports.DoubleDict = DoubleDict;
exports.hashStuff = hashStuff;
exports.escapeWhitespace = escapeWhitespace;
exports.arrayToString = arrayToString;
exports.titleCase = titleCase;
exports.equalArrays = equalArrays;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATN.js":
/*!****************************************!*\
  !*** ./node_modules/antlr4/atn/ATN.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var LL1Analyzer = __webpack_require__(/*! ./../LL1Analyzer */ "./node_modules/antlr4/LL1Analyzer.js").LL1Analyzer;
var IntervalSet = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;

function ATN(grammarType , maxTokenType) {

    // Used for runtime deserialization of ATNs from strings///
    // The type of the ATN.
    this.grammarType = grammarType;
    // The maximum value for any symbol recognized by a transition in the ATN.
    this.maxTokenType = maxTokenType;
    this.states = [];
    // Each subrule/rule is a decision point and we must track them so we
    //  can go back later and build DFA predictors for them.  This includes
    //  all the rules, subrules, optional blocks, ()+, ()* etc...
    this.decisionToState = [];
    // Maps from rule index to starting state number.
    this.ruleToStartState = [];
    // Maps from rule index to stop state number.
    this.ruleToStopState = null;
    this.modeNameToStartState = {};
    // For lexer ATNs, this maps the rule index to the resulting token type.
    // For parser ATNs, this maps the rule index to the generated bypass token
    // type if the
    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
    // deserialization option was specified; otherwise, this is {@code null}.
    this.ruleToTokenType = null;
    // For lexer ATNs, this is an array of {@link LexerAction} objects which may
    // be referenced by action transitions in the ATN.
    this.lexerActions = null;
    this.modeToStartState = [];

    return this;
}

// Compute the set of valid tokens that can occur starting in state {@code s}.
//  If {@code ctx} is null, the set of tokens will not include what can follow
//  the rule surrounding {@code s}. In other words, the set will be
//  restricted to tokens reachable staying within {@code s}'s rule.
ATN.prototype.nextTokensInContext = function(s, ctx) {
    var anal = new LL1Analyzer(this);
    return anal.LOOK(s, null, ctx);
};

// Compute the set of valid tokens that can occur starting in {@code s} and
// staying in same rule. {@link Token//EPSILON} is in set if we reach end of
// rule.
ATN.prototype.nextTokensNoContext = function(s) {
    if (s.nextTokenWithinRule !== null ) {
        return s.nextTokenWithinRule;
    }
    s.nextTokenWithinRule = this.nextTokensInContext(s, null);
    s.nextTokenWithinRule.readOnly = true;
    return s.nextTokenWithinRule;
};

ATN.prototype.nextTokens = function(s, ctx) {
    if ( ctx===undefined ) {
        return this.nextTokensNoContext(s);
    } else {
        return this.nextTokensInContext(s, ctx);
    }
};

ATN.prototype.addState = function( state) {
    if ( state !== null ) {
        state.atn = this;
        state.stateNumber = this.states.length;
    }
    this.states.push(state);
};

ATN.prototype.removeState = function( state) {
    this.states[state.stateNumber] = null; // just free mem, don't shift states in list
};

ATN.prototype.defineDecisionState = function( s) {
    this.decisionToState.push(s);
    s.decision = this.decisionToState.length-1;
    return s.decision;
};

ATN.prototype.getDecisionState = function( decision) {
    if (this.decisionToState.length===0) {
        return null;
    } else {
        return this.decisionToState[decision];
    }
};

// Computes the set of input symbols which could follow ATN state number
// {@code stateNumber} in the specified full {@code context}. This method
// considers the complete parser context, but does not evaluate semantic
// predicates (i.e. all predicates encountered during the calculation are
// assumed true). If a path in the ATN exists from the starting state to the
// {@link RuleStopState} of the outermost context without matching any
// symbols, {@link Token//EOF} is added to the returned set.
//
// <p>If {@code context} is {@code null}, it is treated as
// {@link ParserRuleContext//EMPTY}.</p>
//
// @param stateNumber the ATN state number
// @param context the full parse context
// @return The set of potentially valid input symbols which could follow the
// specified state in the specified context.
// @throws IllegalArgumentException if the ATN does not contain a state with
// number {@code stateNumber}
var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;

ATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {
    if ( stateNumber < 0 || stateNumber >= this.states.length ) {
        throw("Invalid state number.");
    }
    var s = this.states[stateNumber];
    var following = this.nextTokens(s);
    if (!following.contains(Token.EPSILON)) {
        return following;
    }
    var expected = new IntervalSet();
    expected.addSet(following);
    expected.removeOne(Token.EPSILON);
    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
        var invokingState = this.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        following = this.nextTokens(rt.followState);
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        ctx = ctx.parentCtx;
    }
    if (following.contains(Token.EPSILON)) {
        expected.addOne(Token.EOF);
    }
    return expected;
};

ATN.INVALID_ALT_NUMBER = 0;

exports.ATN = ATN;

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNConfig.js":
/*!**********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNConfig.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// A tuple: (ATN state, predicted alt, syntactic, semantic context).
//  The syntactic context is a graph-structured stack node whose
//  path(s) to the root is the rule invocation(s)
//  chain used to arrive at the state.  The semantic context is
//  the tree of semantic predicates encountered before reaching
//  an ATN state.
///

var DecisionState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").DecisionState;
var SemanticContext = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").SemanticContext;
var Hash = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/Utils.js").Hash;


function checkParams(params, isCfg) {
	if(params===null) {
		var result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		var props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

function ATNConfig(params, config) {
	this.checkContext(params, config);
	params = checkParams(params);
	config = checkParams(config, true);
    // The ATN state associated with this configuration///
    this.state = params.state!==null ? params.state : config.state;
    // What alt (or lexer rule) is predicted by this configuration///
    this.alt = params.alt!==null ? params.alt : config.alt;
    // The stack of invoking states leading to the rule/states associated
    //  with this config.  We track only those contexts pushed during
    //  execution of the ATN simulator.
    this.context = params.context!==null ? params.context : config.context;
    this.semanticContext = params.semanticContext!==null ? params.semanticContext :
        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
    // We cannot execute predicates dependent upon local context unless
    // we know for sure we are in the correct context. Because there is
    // no way to do this efficiently, we simply cannot evaluate
    // dependent predicates unless we are in the rule that initially
    // invokes the ATN simulator.
    //
    // closure() tracks the depth of how far we dip into the
    // outer context: depth &gt; 0.  Note that it may not be totally
    // accurate depth since I don't ever decrement. TODO: make it a boolean then
    this.reachesIntoOuterContext = config.reachesIntoOuterContext;
    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    return this;
}

ATNConfig.prototype.checkContext = function(params, config) {
	if((params.context===null || params.context===undefined) &&
			(config===null || config.context===null || config.context===undefined)) {
		this.context = null;
	}
};


ATNConfig.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};


ATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
};

// An ATN configuration is equal to another if both have
//  the same state, they predict the same alternative, and
//  syntactic/semantic contexts are the same.

ATNConfig.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            (this.context===null ? other.context===null : this.context.equals(other.context)) &&
            this.semanticContext.equals(other.semanticContext) &&
            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
    }
};


ATNConfig.prototype.hashCodeForConfigSet = function() {
    var hash = new Hash();
    hash.update(this.state.stateNumber, this.alt, this.semanticContext);
    return hash.finish();
};


ATNConfig.prototype.equalsForConfigSet = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof ATNConfig)) {
        return false;
    } else {
        return this.state.stateNumber===other.state.stateNumber &&
            this.alt===other.alt &&
            this.semanticContext.equals(other.semanticContext);
    }
};


ATNConfig.prototype.toString = function() {
    return "(" + this.state + "," + this.alt +
        (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
        (this.semanticContext !== SemanticContext.NONE ?
                ("," + this.semanticContext.toString())
                : "") +
        (this.reachesIntoOuterContext>0 ?
                (",up=" + this.reachesIntoOuterContext)
                : "") + ")";
};


function LexerATNConfig(params, config) {
	ATNConfig.call(this, params, config);

    // This is the backing field for {@link //getLexerActionExecutor}.
	var lexerActionExecutor = params.lexerActionExecutor || null;
    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
    return this;
}

LexerATNConfig.prototype = Object.create(ATNConfig.prototype);
LexerATNConfig.prototype.constructor = LexerATNConfig;

LexerATNConfig.prototype.updateHashCode = function(hash) {
    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
};

LexerATNConfig.prototype.equals = function(other) {
    return this === other ||
            (other instanceof LexerATNConfig &&
            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
            ATNConfig.prototype.equals.call(this, other));
};

LexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;

LexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;


LexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {
    return source.passedThroughNonGreedyDecision ||
        (target instanceof DecisionState) && target.nonGreedy;
};

exports.ATNConfig = ATNConfig;
exports.LexerATNConfig = LexerATNConfig;

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNConfigSet.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNConfigSet.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

//
// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
// info about the set, with support for combining similar configurations using a
// graph-structured stack.
///

var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js");
var Hash = Utils.Hash;
var Set = Utils.Set;
var SemanticContext = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").SemanticContext;
var merge = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").merge;

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }


function ATNConfigSet(fullCtx) {
	//
	// The reason that we need this is because we don't want the hash map to use
	// the standard hash code and equals. We need all configurations with the
	// same
	// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
	// doubles
	// the number of objects associated with ATNConfigs. The other solution is
	// to
	// use a hash table that lets us specify the equals/hashcode operation.
	// All configs but hashed by (s, i, _, pi) not including context. Wiped out
	// when we go readonly as this set becomes a DFA state.
	this.configLookup = new Set(hashATNConfig, equalATNConfigs);
	// Indicates that this configuration set is part of a full context
	// LL prediction. It will be used to determine how to merge $. With SLL
	// it's a wildcard whereas it is not for LL context merge.
	this.fullCtx = fullCtx === undefined ? true : fullCtx;
	// Indicates that the set of configurations is read-only. Do not
	// allow any code to manipulate the set; DFA states will point at
	// the sets and they must not change. This does not protect the other
	// fields; in particular, conflictingAlts is set after
	// we've made this readonly.
	this.readOnly = false;
	// Track the elements as they are added to the set; supports get(i)///
	this.configs = [];

	// TODO: these fields make me pretty uncomfortable but nice to pack up info
	// together, saves recomputation
	// TODO: can we track conflicts as they are added to save scanning configs
	// later?
	this.uniqueAlt = 0;
	this.conflictingAlts = null;

	// Used in parser and lexer. In lexer, it indicates we hit a pred
	// while computing a closure operation. Don't make a DFA state from this.
	this.hasSemanticContext = false;
	this.dipsIntoOuterContext = false;

	this.cachedHashCode = -1;

	return this;
}

// Adding a new config means merging contexts with existing configs for
// {@code (s, i, pi, _)}, where {@code s} is the
// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
// {@code pi} is the {@link ATNConfig//semanticContext}. We use
// {@code (s,i,pi)} as key.
//
// <p>This method updates {@link //dipsIntoOuterContext} and
// {@link //hasSemanticContext} when necessary.</p>
// /
ATNConfigSet.prototype.add = function(config, mergeCache) {
	if (mergeCache === undefined) {
		mergeCache = null;
	}
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (config.semanticContext !== SemanticContext.NONE) {
		this.hasSemanticContext = true;
	}
	if (config.reachesIntoOuterContext > 0) {
		this.dipsIntoOuterContext = true;
	}
	var existing = this.configLookup.add(config);
	if (existing === config) {
		this.cachedHashCode = -1;
		this.configs.push(config); // track order here
		return true;
	}
	// a previous (s,i,pi,_), merge with it and save result
	var rootIsWildcard = !this.fullCtx;
	var merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
	// no need to check for existing.context, config.context in cache
	// since only way to create new graphs is "call rule" and here. We
	// cache at both places.
	existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
	// make sure to preserve the precedence filter suppression during the merge
	if (config.precedenceFilterSuppressed) {
		existing.precedenceFilterSuppressed = true;
	}
	existing.context = merged; // replace context; no need to alt mapping
	return true;
};

ATNConfigSet.prototype.getStates = function() {
	var states = new Set();
	for (var i = 0; i < this.configs.length; i++) {
		states.add(this.configs[i].state);
	}
	return states;
};

ATNConfigSet.prototype.getPredicates = function() {
	var preds = [];
	for (var i = 0; i < this.configs.length; i++) {
		var c = this.configs[i].semanticContext;
		if (c !== SemanticContext.NONE) {
			preds.push(c.semanticContext);
		}
	}
	return preds;
};

Object.defineProperty(ATNConfigSet.prototype, "items", {
	get : function() {
		return this.configs;
	}
});

ATNConfigSet.prototype.optimizeConfigs = function(interpreter) {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	if (this.configLookup.length === 0) {
		return;
	}
	for (var i = 0; i < this.configs.length; i++) {
		var config = this.configs[i];
		config.context = interpreter.getCachedContext(config.context);
	}
};

ATNConfigSet.prototype.addAll = function(coll) {
	for (var i = 0; i < coll.length; i++) {
		this.add(coll[i]);
	}
	return false;
};

ATNConfigSet.prototype.equals = function(other) {
	return this === other ||
		(other instanceof ATNConfigSet &&
		Utils.equalArrays(this.configs, other.configs) &&
		this.fullCtx === other.fullCtx &&
		this.uniqueAlt === other.uniqueAlt &&
		this.conflictingAlts === other.conflictingAlts &&
		this.hasSemanticContext === other.hasSemanticContext &&
		this.dipsIntoOuterContext === other.dipsIntoOuterContext);
};

ATNConfigSet.prototype.hashCode = function() {
    var hash = new Hash();
	hash.update(this.configs);
    return hash.finish();
};


ATNConfigSet.prototype.updateHashCode = function(hash) {
	if (this.readOnly) {
		if (this.cachedHashCode === -1) {
            this.cachedHashCode = this.hashCode();
		}
        hash.update(this.cachedHashCode);
	} else {
        hash.update(this.hashCode());
	}
};


Object.defineProperty(ATNConfigSet.prototype, "length", {
	get : function() {
		return this.configs.length;
	}
});

ATNConfigSet.prototype.isEmpty = function() {
	return this.configs.length === 0;
};

ATNConfigSet.prototype.contains = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.contains(item);
};

ATNConfigSet.prototype.containsFast = function(item) {
	if (this.configLookup === null) {
		throw "This method is not implemented for readonly sets.";
	}
	return this.configLookup.containsFast(item);
};

ATNConfigSet.prototype.clear = function() {
	if (this.readOnly) {
		throw "This set is readonly";
	}
	this.configs = [];
	this.cachedHashCode = -1;
	this.configLookup = new Set();
};

ATNConfigSet.prototype.setReadonly = function(readOnly) {
	this.readOnly = readOnly;
	if (readOnly) {
		this.configLookup = null; // can't mod, no need for lookup cache
	}
};

ATNConfigSet.prototype.toString = function() {
	return Utils.arrayToString(this.configs) +
		(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
		(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
		(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
		(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
};

function OrderedATNConfigSet() {
	ATNConfigSet.call(this);
	this.configLookup = new Set();
	return this;
}

OrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);
OrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;

exports.ATNConfigSet = ATNConfigSet;
exports.OrderedATNConfigSet = OrderedATNConfigSet;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATNDeserializationOptions.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNDeserializationOptions.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function ATNDeserializationOptions(copyFrom) {
	if(copyFrom===undefined) {
		copyFrom = null;
	}
	this.readOnly = false;
    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;

    return this;
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

exports.ATNDeserializationOptions = ATNDeserializationOptions;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATNDeserializer.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNDeserializer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var ATNType = __webpack_require__(/*! ./ATNType */ "./node_modules/antlr4/atn/ATNType.js").ATNType;
var ATNStates = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js");
var ATNState = ATNStates.ATNState;
var BasicState = ATNStates.BasicState;
var DecisionState = ATNStates.DecisionState;
var BlockStartState = ATNStates.BlockStartState;
var BlockEndState = ATNStates.BlockEndState;
var LoopEndState = ATNStates.LoopEndState;
var RuleStartState = ATNStates.RuleStartState;
var RuleStopState = ATNStates.RuleStopState;
var TokensStartState = ATNStates.TokensStartState;
var PlusLoopbackState = ATNStates.PlusLoopbackState;
var StarLoopbackState = ATNStates.StarLoopbackState;
var StarLoopEntryState = ATNStates.StarLoopEntryState;
var PlusBlockStartState = ATNStates.PlusBlockStartState;
var StarBlockStartState = ATNStates.StarBlockStartState;
var BasicBlockStartState = ATNStates.BasicBlockStartState;
var Transitions = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/atn/Transition.js");
var Transition = Transitions.Transition;
var AtomTransition = Transitions.AtomTransition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var RangeTransition = Transitions.RangeTransition;
var ActionTransition = Transitions.ActionTransition;
var EpsilonTransition = Transitions.EpsilonTransition;
var WildcardTransition = Transitions.WildcardTransition;
var PredicateTransition = Transitions.PredicateTransition;
var PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;
var IntervalSet = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var ATNDeserializationOptions = __webpack_require__(/*! ./ATNDeserializationOptions */ "./node_modules/antlr4/atn/ATNDeserializationOptions.js").ATNDeserializationOptions;
var LexerActions = __webpack_require__(/*! ./LexerAction */ "./node_modules/antlr4/atn/LexerAction.js");
var LexerActionType = LexerActions.LexerActionType;
var LexerSkipAction = LexerActions.LexerSkipAction;
var LexerChannelAction = LexerActions.LexerChannelAction;
var LexerCustomAction = LexerActions.LexerCustomAction;
var LexerMoreAction = LexerActions.LexerMoreAction;
var LexerTypeAction = LexerActions.LexerTypeAction;
var LexerPushModeAction = LexerActions.LexerPushModeAction;
var LexerPopModeAction = LexerActions.LexerPopModeAction;
var LexerModeAction = LexerActions.LexerModeAction;
// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
var BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
var ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
var SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

var SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
var SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	var tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

function ATNDeserializer (options) {

    if ( options=== undefined || options === null ) {
        options = ATNDeserializationOptions.defaultOptions;
    }
    this.deserializationOptions = options;
    this.stateFactories = null;
    this.actionFactories = null;

    return this;
}

// Determines if a particular serialized representation of an ATN supports
// a particular feature, identified by the {@link UUID} used for serializing
// the ATN at the time the feature was first introduced.
//
// @param feature The {@link UUID} marking the first time the feature was
// supported in the serialized ATN.
// @param actualUuid The {@link UUID} of the actual serialized ATN which is
// currently being deserialized.
// @return {@code true} if the {@code actualUuid} value represents a
// serialized ATN at or after the feature identified by {@code feature} was
// introduced; otherwise, {@code false}.

ATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {
    var idx1 = SUPPORTED_UUIDS.indexOf(feature);
    if (idx1<0) {
        return false;
    }
    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
    return idx2 >= idx1;
};

ATNDeserializer.prototype.deserialize = function(data) {
    this.reset(data);
    this.checkVersion();
    this.checkUUID();
    var atn = this.readATN();
    this.readStates(atn);
    this.readRules(atn);
    this.readModes(atn);
    var sets = [];
    // First, deserialize sets with 16-bit arguments <= U+FFFF.
    this.readSets(atn, sets, this.readInt.bind(this));
    // Next, if the ATN was serialized with the Unicode SMP feature,
    // deserialize sets with 32-bit arguments <= U+10FFFF.
    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
        this.readSets(atn, sets, this.readInt32.bind(this));
    }
    this.readEdges(atn, sets);
    this.readDecisions(atn);
    this.readLexerActions(atn);
    this.markPrecedenceDecisions(atn);
    this.verifyATN(atn);
    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
        this.generateRuleBypassTransitions(atn);
        // re-verify after modification
        this.verifyATN(atn);
    }
    return atn;
};

ATNDeserializer.prototype.reset = function(data) {
	var adjust = function(c) {
        var v = c.charCodeAt(0);
        return v>1  ? v-2 : v + 65534;
	};
    var temp = data.split("").map(adjust);
    // don't adjust the first value since that's the version number
    temp[0] = data.charCodeAt(0);
    this.data = temp;
    this.pos = 0;
};

ATNDeserializer.prototype.checkVersion = function() {
    var version = this.readInt();
    if ( version !== SERIALIZED_VERSION ) {
        throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
    }
};

ATNDeserializer.prototype.checkUUID = function() {
    var uuid = this.readUUID();
    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
        throw ("Could not deserialize ATN with UUID: " + uuid +
                        " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
    }
    this.uuid = uuid;
};

ATNDeserializer.prototype.readATN = function() {
    var grammarType = this.readInt();
    var maxTokenType = this.readInt();
    return new ATN(grammarType, maxTokenType);
};

ATNDeserializer.prototype.readStates = function(atn) {
	var j, pair, stateNumber;
    var loopBackStateNumbers = [];
    var endStateNumbers = [];
    var nstates = this.readInt();
    for(var i=0; i<nstates; i++) {
        var stype = this.readInt();
        // ignore bad type of states
        if (stype===ATNState.INVALID_TYPE) {
            atn.addState(null);
            continue;
        }
        var ruleIndex = this.readInt();
        if (ruleIndex === 0xFFFF) {
            ruleIndex = -1;
        }
        var s = this.stateFactory(stype, ruleIndex);
        if (stype === ATNState.LOOP_END) { // special case
            var loopBackStateNumber = this.readInt();
            loopBackStateNumbers.push([s, loopBackStateNumber]);
        } else if(s instanceof BlockStartState) {
            var endStateNumber = this.readInt();
            endStateNumbers.push([s, endStateNumber]);
        }
        atn.addState(s);
    }
    // delay the assignment of loop back and end states until we know all the
	// state instances have been initialized
    for (j=0; j<loopBackStateNumbers.length; j++) {
        pair = loopBackStateNumbers[j];
        pair[0].loopBackState = atn.states[pair[1]];
    }

    for (j=0; j<endStateNumbers.length; j++) {
        pair = endStateNumbers[j];
        pair[0].endState = atn.states[pair[1]];
    }

    var numNonGreedyStates = this.readInt();
    for (j=0; j<numNonGreedyStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].nonGreedy = true;
    }

    var numPrecedenceStates = this.readInt();
    for (j=0; j<numPrecedenceStates; j++) {
        stateNumber = this.readInt();
        atn.states[stateNumber].isPrecedenceRule = true;
    }
};

ATNDeserializer.prototype.readRules = function(atn) {
    var i;
    var nrules = this.readInt();
    if (atn.grammarType === ATNType.LEXER ) {
        atn.ruleToTokenType = initArray(nrules, 0);
    }
    atn.ruleToStartState = initArray(nrules, 0);
    for (i=0; i<nrules; i++) {
        var s = this.readInt();
        var startState = atn.states[s];
        atn.ruleToStartState[i] = startState;
        if ( atn.grammarType === ATNType.LEXER ) {
            var tokenType = this.readInt();
            if (tokenType === 0xFFFF) {
                tokenType = Token.EOF;
            }
            atn.ruleToTokenType[i] = tokenType;
        }
    }
    atn.ruleToStopState = initArray(nrules, 0);
    for (i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (!(state instanceof RuleStopState)) {
            continue;
        }
        atn.ruleToStopState[state.ruleIndex] = state;
        atn.ruleToStartState[state.ruleIndex].stopState = state;
    }
};

ATNDeserializer.prototype.readModes = function(atn) {
    var nmodes = this.readInt();
    for (var i=0; i<nmodes; i++) {
        var s = this.readInt();
        atn.modeToStartState.push(atn.states[s]);
    }
};

ATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {
    var m = this.readInt();
    for (var i=0; i<m; i++) {
        var iset = new IntervalSet();
        sets.push(iset);
        var n = this.readInt();
        var containsEof = this.readInt();
        if (containsEof!==0) {
            iset.addOne(-1);
        }
        for (var j=0; j<n; j++) {
            var i1 = readUnicode();
            var i2 = readUnicode();
            iset.addRange(i1, i2);
        }
    }
};

ATNDeserializer.prototype.readEdges = function(atn, sets) {
	var i, j, state, trans, target;
    var nedges = this.readInt();
    for (i=0; i<nedges; i++) {
        var src = this.readInt();
        var trg = this.readInt();
        var ttype = this.readInt();
        var arg1 = this.readInt();
        var arg2 = this.readInt();
        var arg3 = this.readInt();
        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
        var srcState = atn.states[src];
        srcState.addTransition(trans);
    }
    // edges for rule stop states can be derived, so they aren't serialized
    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for (j=0; j<state.transitions.length; j++) {
            var t = state.transitions[j];
            if (!(t instanceof RuleTransition)) {
                continue;
            }
			var outermostPrecedenceReturn = -1;
			if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
				if (t.precedence === 0) {
					outermostPrecedenceReturn = t.target.ruleIndex;
				}
			}

			trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
        }
    }

    for (i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        if (state instanceof BlockStartState) {
            // we need to know the end state to set its start state
            if (state.endState === null) {
                throw ("IllegalState");
            }
            // block end states can only be associated to a single block start
			// state
            if ( state.endState.startState !== null) {
                throw ("IllegalState");
            }
            state.endState.startState = state;
        }
        if (state instanceof PlusLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof PlusBlockStartState) {
                    target.loopBackState = state;
                }
            }
        } else if (state instanceof StarLoopbackState) {
            for (j=0; j<state.transitions.length; j++) {
                target = state.transitions[j].target;
                if (target instanceof StarLoopEntryState) {
                    target.loopBackState = state;
                }
            }
        }
    }
};

ATNDeserializer.prototype.readDecisions = function(atn) {
    var ndecisions = this.readInt();
    for (var i=0; i<ndecisions; i++) {
        var s = this.readInt();
        var decState = atn.states[s];
        atn.decisionToState.push(decState);
        decState.decision = i;
    }
};

ATNDeserializer.prototype.readLexerActions = function(atn) {
    if (atn.grammarType === ATNType.LEXER) {
        var count = this.readInt();
        atn.lexerActions = initArray(count, null);
        for (var i=0; i<count; i++) {
            var actionType = this.readInt();
            var data1 = this.readInt();
            if (data1 === 0xFFFF) {
                data1 = -1;
            }
            var data2 = this.readInt();
            if (data2 === 0xFFFF) {
                data2 = -1;
            }
            var lexerAction = this.lexerActionFactory(actionType, data1, data2);
            atn.lexerActions[i] = lexerAction;
        }
    }
};

ATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {
	var i;
    var count = atn.ruleToStartState.length;
    for(i=0; i<count; i++) {
        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
    }
    for(i=0; i<count; i++) {
        this.generateRuleBypassTransition(atn, i);
    }
};

ATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {
	var i, state;
    var bypassStart = new BasicBlockStartState();
    bypassStart.ruleIndex = idx;
    atn.addState(bypassStart);

    var bypassStop = new BlockEndState();
    bypassStop.ruleIndex = idx;
    atn.addState(bypassStop);

    bypassStart.endState = bypassStop;
    atn.defineDecisionState(bypassStart);

    bypassStop.startState = bypassStart;

    var excludeTransition = null;
    var endState = null;

    if (atn.ruleToStartState[idx].isPrecedenceRule) {
        // wrap from the beginning of the rule to the StarLoopEntryState
        endState = null;
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (this.stateIsEndStateFor(state, idx)) {
                endState = state;
                excludeTransition = state.loopBackState.transitions[0];
                break;
            }
        }
        if (excludeTransition === null) {
            throw ("Couldn't identify final state of the precedence rule prefix section.");
        }
    } else {
        endState = atn.ruleToStopState[idx];
    }

    // all non-excluded transitions that currently target end state need to
	// target blockEnd instead
    for(i=0; i<atn.states.length; i++) {
        state = atn.states[i];
        for(var j=0; j<state.transitions.length; j++) {
            var transition = state.transitions[j];
            if (transition === excludeTransition) {
                continue;
            }
            if (transition.target === endState) {
                transition.target = bypassStop;
            }
        }
    }

    // all transitions leaving the rule start state need to leave blockStart
	// instead
    var ruleToStartState = atn.ruleToStartState[idx];
    var count = ruleToStartState.transitions.length;
    while ( count > 0) {
        bypassStart.addTransition(ruleToStartState.transitions[count-1]);
        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
    }
    // link the new states
    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
    bypassStop.addTransition(new EpsilonTransition(endState));

    var matchState = new BasicState();
    atn.addState(matchState);
    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
    bypassStart.addTransition(new EpsilonTransition(matchState));
};

ATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {
    if ( state.ruleIndex !== idx) {
        return null;
    }
    if (!( state instanceof StarLoopEntryState)) {
        return null;
    }
    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
    if (!( maybeLoopEndState instanceof LoopEndState)) {
        return null;
    }
    if (maybeLoopEndState.epsilonOnlyTransitions &&
        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
        return state;
    } else {
        return null;
    }
};

//
// Analyze the {@link StarLoopEntryState} states in the specified ATN to set
// the {@link StarLoopEntryState//isPrecedenceDecision} field to the
// correct value.
//
// @param atn The ATN.
//
ATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {
	for(var i=0; i<atn.states.length; i++) {
		var state = atn.states[i];
		if (!( state instanceof StarLoopEntryState)) {
            continue;
        }
        // We analyze the ATN to determine if this ATN decision state is the
        // decision for the closure block that determines whether a
        // precedence rule should continue or complete.
        //
        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
            if (maybeLoopEndState instanceof LoopEndState) {
                if ( maybeLoopEndState.epsilonOnlyTransitions &&
                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                    state.isPrecedenceDecision = true;
                }
            }
        }
	}
};

ATNDeserializer.prototype.verifyATN = function(atn) {
    if (!this.deserializationOptions.verifyATN) {
        return;
    }
    // verify assumptions
	for(var i=0; i<atn.states.length; i++) {
        var state = atn.states[i];
        if (state === null) {
            continue;
        }
        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
        if (state instanceof PlusBlockStartState) {
            this.checkCondition(state.loopBackState !== null);
        } else  if (state instanceof StarLoopEntryState) {
            this.checkCondition(state.loopBackState !== null);
            this.checkCondition(state.transitions.length === 2);
            if (state.transitions[0].target instanceof StarBlockStartState) {
                this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                this.checkCondition(!state.nonGreedy);
            } else if (state.transitions[0].target instanceof LoopEndState) {
                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                this.checkCondition(state.nonGreedy);
            } else {
                throw("IllegalState");
            }
        } else if (state instanceof StarLoopbackState) {
            this.checkCondition(state.transitions.length === 1);
            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
        } else if (state instanceof LoopEndState) {
            this.checkCondition(state.loopBackState !== null);
        } else if (state instanceof RuleStartState) {
            this.checkCondition(state.stopState !== null);
        } else if (state instanceof BlockStartState) {
            this.checkCondition(state.endState !== null);
        } else if (state instanceof BlockEndState) {
            this.checkCondition(state.startState !== null);
        } else if (state instanceof DecisionState) {
            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
        } else {
            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
        }
	}
};

ATNDeserializer.prototype.checkCondition = function(condition, message) {
    if (!condition) {
        if (message === undefined || message===null) {
            message = "IllegalState";
        }
        throw (message);
    }
};

ATNDeserializer.prototype.readInt = function() {
    return this.data[this.pos++];
};

ATNDeserializer.prototype.readInt32 = function() {
    var low = this.readInt();
    var high = this.readInt();
    return low | (high << 16);
};

ATNDeserializer.prototype.readLong = function() {
    var low = this.readInt32();
    var high = this.readInt32();
    return (low & 0x00000000FFFFFFFF) | (high << 32);
};

function createByteToHex() {
	var bth = [];
	for (var i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

var byteToHex = createByteToHex();

ATNDeserializer.prototype.readUUID = function() {
	var bb = [];
	for(var i=7;i>=0;i--) {
		var int = this.readInt();
		/* jshint bitwise: false */
		bb[(2*i)+1] = int & 0xFF;
		bb[2*i] = (int >> 8) & 0xFF;
	}
    return byteToHex[bb[0]] + byteToHex[bb[1]] +
    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
    byteToHex[bb[10]] + byteToHex[bb[11]] +
    byteToHex[bb[12]] + byteToHex[bb[13]] +
    byteToHex[bb[14]] + byteToHex[bb[15]];
};

ATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {
    var target = atn.states[trg];
    switch(type) {
    case Transition.EPSILON:
        return new EpsilonTransition(target);
    case Transition.RANGE:
        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
    case Transition.RULE:
        return new RuleTransition(atn.states[arg1], arg2, arg3, target);
    case Transition.PREDICATE:
        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.PRECEDENCE:
        return new PrecedencePredicateTransition(target, arg1);
    case Transition.ATOM:
        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
    case Transition.ACTION:
        return new ActionTransition(target, arg1, arg2, arg3 !== 0);
    case Transition.SET:
        return new SetTransition(target, sets[arg1]);
    case Transition.NOT_SET:
        return new NotSetTransition(target, sets[arg1]);
    case Transition.WILDCARD:
        return new WildcardTransition(target);
    default:
        throw "The specified transition type: " + type + " is not valid.";
    }
};

ATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {
    if (this.stateFactories === null) {
        var sf = [];
        sf[ATNState.INVALID_TYPE] = null;
        sf[ATNState.BASIC] = function() { return new BasicState(); };
        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };
        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };
        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };
        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };
        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };
        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };
        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };
        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };
        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };
        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };
        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };
        this.stateFactories = sf;
    }
    if (type>this.stateFactories.length || this.stateFactories[type] === null) {
        throw("The specified state type " + type + " is not valid.");
    } else {
        var s = this.stateFactories[type]();
        if (s!==null) {
            s.ruleIndex = ruleIndex;
            return s;
        }
    }
};

ATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {
    if (this.actionFactories === null) {
        var af = [];
        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };
        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };
        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };
        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };
        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };
        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };
        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };
        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };
        this.actionFactories = af;
    }
    if (type>this.actionFactories.length || this.actionFactories[type] === null) {
        throw("The specified lexer action type " + type + " is not valid.");
    } else {
        return this.actionFactories[type](data1, data2);
    }
};


exports.ATNDeserializer = ATNDeserializer;

/***/ }),

/***/ "./node_modules/antlr4/atn/ATNSimulator.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/atn/ATNSimulator.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var DFAState = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/dfa/DFAState.js").DFAState;
var ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var getCachedPredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").getCachedPredictionContext;
var Map = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Map;

function ATNSimulator(atn, sharedContextCache) {

    // The context cache maps all PredictionContext objects that are ==
    //  to a single cached copy. This cache is shared across all contexts
    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
    //  to use only cached nodes/graphs in addDFAState(). We don't want to
    //  fill this during closure() since there are lots of contexts that
    //  pop up but are not used ever again. It also greatly slows down closure().
    //
    //  <p>This cache makes a huge difference in memory and a little bit in speed.
    //  For the Java grammar on java.*, it dropped the memory requirements
    //  at the end from 25M to 16M. We don't store any of the full context
    //  graphs in the DFA because they are limited to local context only,
    //  but apparently there's a lot of repetition there as well. We optimize
    //  the config contexts before storing the config set in the DFA states
    //  by literally rebuilding them with cached subgraphs only.</p>
    //
    //  <p>I tried a cache for use during closure operations, that was
    //  whacked after each adaptivePredict(). It cost a little bit
    //  more time I think and doesn't save on the overall footprint
    //  so it's not worth the complexity.</p>
    ///
    this.atn = atn;
    this.sharedContextCache = sharedContextCache;
    return this;
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


ATNSimulator.prototype.getCachedContext = function(context) {
    if (this.sharedContextCache ===null) {
        return context;
    }
    var visited = new Map();
    return getCachedPredictionContext(context, this.sharedContextCache, visited);
};

exports.ATNSimulator = ATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATNState.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNState.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// The following images show the relation of states and
// {@link ATNState//transitions} for various grammar constructs.
//
// <ul>
//
// <li>Solid edges marked with an &//0949; indicate a required
// {@link EpsilonTransition}.</li>
//
// <li>Dashed edges indicate locations where any transition derived from
// {@link Transition} might appear.</li>
//
// <li>Dashed nodes are place holders for either a sequence of linked
// {@link BasicState} states or the inclusion of a block representing a nested
// construct in one of the forms below.</li>
//
// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
// any number of alternatives (one or more). Nodes without the {@code ...} only
// support the exact number of alternatives shown in the diagram.</li>
//
// </ul>
//
// <h2>Basic Blocks</h2>
//
// <h3>Rule</h3>
//
// <embed src="images/Rule.svg" type="image/svg+xml"/>
//
// <h3>Block of 1 or more alternatives</h3>
//
// <embed src="images/Block.svg" type="image/svg+xml"/>
//
// <h2>Greedy Loops</h2>
//
// <h3>Greedy Closure: {@code (...)*}</h3>
//
// <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Positive Closure: {@code (...)+}</h3>
//
// <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
//
// <h3>Greedy Optional: {@code (...)?}</h3>
//
// <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
//
// <h2>Non-Greedy Loops</h2>
//
// <h3>Non-Greedy Closure: {@code (...)*?}</h3>
//
// <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
//
// <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
//
// <h3>Non-Greedy Optional: {@code (...)??}</h3>
//
// <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
//

var INITIAL_NUM_TRANSITIONS = 4;

function ATNState() {
    // Which ATN are we in?
    this.atn = null;
    this.stateNumber = ATNState.INVALID_STATE_NUMBER;
    this.stateType = null;
    this.ruleIndex = 0; // at runtime, we don't have Rule objects
    this.epsilonOnlyTransitions = false;
    // Track the transitions emanating from this ATN state.
    this.transitions = [];
    // Used to cache lookahead during parsing, not used during construction
    this.nextTokenWithinRule = null;
    return this;
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;

ATNState.prototype.toString = function() {
	return this.stateNumber;
};

ATNState.prototype.equals = function(other) {
    if (other instanceof ATNState) {
        return this.stateNumber===other.stateNumber;
    } else {
        return false;
    }
};

ATNState.prototype.isNonGreedyExitState = function() {
    return false;
};


ATNState.prototype.addTransition = function(trans, index) {
	if(index===undefined) {
		index = -1;
	}
    if (this.transitions.length===0) {
        this.epsilonOnlyTransitions = trans.isEpsilon;
    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
        this.epsilonOnlyTransitions = false;
    }
    if (index===-1) {
        this.transitions.push(trans);
    } else {
        this.transitions.splice(index, 1, trans);
    }
};

function BasicState() {
	ATNState.call(this);
    this.stateType = ATNState.BASIC;
    return this;
}

BasicState.prototype = Object.create(ATNState.prototype);
BasicState.prototype.constructor = BasicState;


function DecisionState() {
	ATNState.call(this);
    this.decision = -1;
    this.nonGreedy = false;
    return this;
}

DecisionState.prototype = Object.create(ATNState.prototype);
DecisionState.prototype.constructor = DecisionState;


//  The start of a regular {@code (...)} block.
function BlockStartState() {
	DecisionState.call(this);
	this.endState = null;
	return this;
}

BlockStartState.prototype = Object.create(DecisionState.prototype);
BlockStartState.prototype.constructor = BlockStartState;


function BasicBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.BLOCK_START;
	return this;
}

BasicBlockStartState.prototype = Object.create(BlockStartState.prototype);
BasicBlockStartState.prototype.constructor = BasicBlockStartState;


// Terminal node of a simple {@code (a|b|c)} block.
function BlockEndState() {
	ATNState.call(this);
	this.stateType = ATNState.BLOCK_END;
    this.startState = null;
    return this;
}

BlockEndState.prototype = Object.create(ATNState.prototype);
BlockEndState.prototype.constructor = BlockEndState;


// The last node in the ATN for a rule, unless that rule is the start symbol.
//  In that case, there is one transition to EOF. Later, we might encode
//  references to all calls to this rule to compute FOLLOW sets for
//  error handling.
//
function RuleStopState() {
	ATNState.call(this);
    this.stateType = ATNState.RULE_STOP;
    return this;
}

RuleStopState.prototype = Object.create(ATNState.prototype);
RuleStopState.prototype.constructor = RuleStopState;

function RuleStartState() {
	ATNState.call(this);
	this.stateType = ATNState.RULE_START;
	this.stopState = null;
	this.isPrecedenceRule = false;
	return this;
}

RuleStartState.prototype = Object.create(ATNState.prototype);
RuleStartState.prototype.constructor = RuleStartState;

// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
//  one to the loop back to start of the block and one to exit.
//
function PlusLoopbackState() {
	DecisionState.call(this);
	this.stateType = ATNState.PLUS_LOOP_BACK;
	return this;
}

PlusLoopbackState.prototype = Object.create(DecisionState.prototype);
PlusLoopbackState.prototype.constructor = PlusLoopbackState;


// Start of {@code (A|B|...)+} loop. Technically a decision state, but
//  we don't use for code generation; somebody might need it, so I'm defining
//  it for completeness. In reality, the {@link PlusLoopbackState} node is the
//  real decision-making note for {@code A+}.
//
function PlusBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.PLUS_BLOCK_START;
    this.loopBackState = null;
    return this;
}

PlusBlockStartState.prototype = Object.create(BlockStartState.prototype);
PlusBlockStartState.prototype.constructor = PlusBlockStartState;

// The block that begins a closure loop.
function StarBlockStartState() {
	BlockStartState.call(this);
	this.stateType = ATNState.STAR_BLOCK_START;
	return this;
}

StarBlockStartState.prototype = Object.create(BlockStartState.prototype);
StarBlockStartState.prototype.constructor = StarBlockStartState;


function StarLoopbackState() {
	ATNState.call(this);
	this.stateType = ATNState.STAR_LOOP_BACK;
	return this;
}

StarLoopbackState.prototype = Object.create(ATNState.prototype);
StarLoopbackState.prototype.constructor = StarLoopbackState;


function StarLoopEntryState() {
	DecisionState.call(this);
	this.stateType = ATNState.STAR_LOOP_ENTRY;
    this.loopBackState = null;
    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
    this.isPrecedenceDecision = null;
    return this;
}

StarLoopEntryState.prototype = Object.create(DecisionState.prototype);
StarLoopEntryState.prototype.constructor = StarLoopEntryState;


// Mark the end of a * or + loop.
function LoopEndState() {
	ATNState.call(this);
	this.stateType = ATNState.LOOP_END;
	this.loopBackState = null;
	return this;
}

LoopEndState.prototype = Object.create(ATNState.prototype);
LoopEndState.prototype.constructor = LoopEndState;


// The Tokens rule start state linking to each lexer rule start state */
function TokensStartState() {
	DecisionState.call(this);
	this.stateType = ATNState.TOKEN_START;
	return this;
}

TokensStartState.prototype = Object.create(DecisionState.prototype);
TokensStartState.prototype.constructor = TokensStartState;

exports.ATNState = ATNState;
exports.BasicState = BasicState;
exports.DecisionState = DecisionState;
exports.BlockStartState = BlockStartState;
exports.BlockEndState = BlockEndState;
exports.LoopEndState = LoopEndState;
exports.RuleStartState = RuleStartState;
exports.RuleStopState = RuleStopState;
exports.TokensStartState = TokensStartState;
exports.PlusLoopbackState = PlusLoopbackState;
exports.StarLoopbackState = StarLoopbackState;
exports.StarLoopEntryState = StarLoopEntryState;
exports.PlusBlockStartState = PlusBlockStartState;
exports.StarBlockStartState = StarBlockStartState;
exports.BasicBlockStartState = BasicBlockStartState;


/***/ }),

/***/ "./node_modules/antlr4/atn/ATNType.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/atn/ATNType.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents the type of recognizer an ATN applies to.

function ATNType() {

}

ATNType.LEXER = 0;
ATNType.PARSER = 1;

exports.ATNType = ATNType;



/***/ }),

/***/ "./node_modules/antlr4/atn/LexerATNSimulator.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerATNSimulator.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// When we hit an accept state in either the DFA or the ATN, we
//  have to notify the character stream to start buffering characters
//  via {@link IntStream//mark} and record the current state. The current sim state
//  includes the current index into the input, the current line,
//  and current character position in that line. Note that the Lexer is
//  tracking the starting line and characterization of the token. These
//  variables track the "state" of the simulator when it hits an accept state.
//
//  <p>We track these variables separately for the DFA and ATN simulation
//  because the DFA simulation often has to fail over to the ATN
//  simulation. If the ATN simulation fails, we need the DFA to fall
//  back to its previously accepted state, if any. If the ATN succeeds,
//  then the ATN does the accept and the DFA simulator that invoked it
//  can simply return the predicted token type.</p>
///

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var Lexer = __webpack_require__(/*! ./../Lexer */ "./node_modules/antlr4/Lexer.js").Lexer;
var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ "./node_modules/antlr4/atn/ATNSimulator.js").ATNSimulator;
var DFAState = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/dfa/DFAState.js").DFAState;
var ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var OrderedATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").OrderedATNConfigSet;
var PredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").PredictionContext;
var SingletonPredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").SingletonPredictionContext;
var RuleStopState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").RuleStopState;
var LexerATNConfig = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/atn/ATNConfig.js").LexerATNConfig;
var Transition = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/atn/Transition.js").Transition;
var LexerActionExecutor = __webpack_require__(/*! ./LexerActionExecutor */ "./node_modules/antlr4/atn/LexerActionExecutor.js").LexerActionExecutor;
var LexerNoViableAltException = __webpack_require__(/*! ./../error/Errors */ "./node_modules/antlr4/error/Errors.js").LexerNoViableAltException;

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

function SimState() {
	resetSimState(this);
	return this;
}

SimState.prototype.reset = function() {
	resetSimState(this);
};

function LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
	this.decisionToDFA = decisionToDFA;
	this.recog = recog;
	// The current token's starting index into the character stream.
	// Shared across DFA to ATN simulation in case the ATN fails and the
	// DFA did not have a previous accept state. In this case, we use the
	// ATN-generated exception object.
	this.startIndex = -1;
	// line number 1..n within the input///
	this.line = 1;
	// The index of the character relative to the beginning of the line
	// 0..n-1///
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
	// Used during DFA/ATN exec to record the most recent accept configuration
	// info
	this.prevAccept = new SimState();
	// done
	return this;
}

LexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);
LexerATNSimulator.prototype.constructor = LexerATNSimulator;

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

LexerATNSimulator.prototype.copyState = function(simulator) {
	this.column = simulator.column;
	this.line = simulator.line;
	this.mode = simulator.mode;
	this.startIndex = simulator.startIndex;
};

LexerATNSimulator.prototype.match = function(input, mode) {
	this.match_calls += 1;
	this.mode = mode;
	var mark = input.mark();
	try {
		this.startIndex = input.index;
		this.prevAccept.reset();
		var dfa = this.decisionToDFA[mode];
		if (dfa.s0 === null) {
			return this.matchATN(input);
		} else {
			return this.execATN(input, dfa.s0);
		}
	} finally {
		input.release(mark);
	}
};

LexerATNSimulator.prototype.reset = function() {
	this.prevAccept.reset();
	this.startIndex = -1;
	this.line = 1;
	this.column = 0;
	this.mode = Lexer.DEFAULT_MODE;
};

LexerATNSimulator.prototype.matchATN = function(input) {
	var startState = this.atn.modeToStartState[this.mode];

	if (LexerATNSimulator.debug) {
		console.log("matchATN mode " + this.mode + " start: " + startState);
	}
	var old_mode = this.mode;
	var s0_closure = this.computeStartState(input, startState);
	var suppressEdge = s0_closure.hasSemanticContext;
	s0_closure.hasSemanticContext = false;

	var next = this.addDFAState(s0_closure);
	if (!suppressEdge) {
		this.decisionToDFA[this.mode].s0 = next;
	}

	var predict = this.execATN(input, next);

	if (LexerATNSimulator.debug) {
		console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
	}
	return predict;
};

LexerATNSimulator.prototype.execATN = function(input, ds0) {
	if (LexerATNSimulator.debug) {
		console.log("start state closure=" + ds0.configs);
	}
	if (ds0.isAcceptState) {
		// allow zero-length tokens
		this.captureSimState(this.prevAccept, input, ds0);
	}
	var t = input.LA(1);
	var s = ds0; // s is current/from DFA state

	while (true) { // while more work
		if (LexerATNSimulator.debug) {
			console.log("execATN loop starting closure: " + s.configs);
		}

		// As we move src->trg, src->trg, we keep track of the previous trg to
		// avoid looking up the DFA state again, which is expensive.
		// If the previous target was already part of the DFA, we might
		// be able to avoid doing a reach operation upon t. If s!=null,
		// it means that semantic predicates didn't prevent us from
		// creating a DFA state. Once we know s!=null, we check to see if
		// the DFA state has an edge already for t. If so, we can just reuse
		// it's configuration set; there's no point in re-computing it.
		// This is kind of like doing DFA simulation within the ATN
		// simulation because DFA simulation is really just a way to avoid
		// computing reach/closure sets. Technically, once we know that
		// we have a previously added DFA state, we could jump over to
		// the DFA simulator. But, that would mean popping back and forth
		// a lot and making things more complicated algorithmically.
		// This optimization makes a lot of sense for loops within DFA.
		// A character will take us back to an existing DFA state
		// that already has lots of edges out of it. e.g., .* in comments.
		// print("Target for:" + str(s) + " and:" + str(t))
		var target = this.getExistingTargetState(s, t);
		// print("Existing:" + str(target))
		if (target === null) {
			target = this.computeTargetState(input, s, t);
			// print("Computed:" + str(target))
		}
		if (target === ATNSimulator.ERROR) {
			break;
		}
		// If this is a consumable input element, make sure to consume before
		// capturing the accept state so the input index, line, and char
		// position accurately reflect the state of the interpreter at the
		// end of the token.
		if (t !== Token.EOF) {
			this.consume(input);
		}
		if (target.isAcceptState) {
			this.captureSimState(this.prevAccept, input, target);
			if (t === Token.EOF) {
				break;
			}
		}
		t = input.LA(1);
		s = target; // flip; current DFA target becomes new src/from state
	}
	return this.failOrAccept(this.prevAccept, input, s.configs, t);
};

// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param s The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
LexerATNSimulator.prototype.getExistingTargetState = function(s, t) {
	if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
		return null;
	}

	var target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
	if(target===undefined) {
		target = null;
	}
	if (LexerATNSimulator.debug && target !== null) {
		console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
	}
	return target;
};

// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param input The input stream
// @param s The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
LexerATNSimulator.prototype.computeTargetState = function(input, s, t) {
	var reach = new OrderedATNConfigSet();
	// if we don't find an existing DFA state
	// Fill reach starting from closure, following t transitions
	this.getReachableConfigSet(input, s.configs, reach, t);

	if (reach.items.length === 0) { // we got nowhere on t from s
		if (!reach.hasSemanticContext) {
			// we got nowhere on t, don't throw out this knowledge; it'd
			// cause a failover from DFA later.
			this.addDFAEdge(s, t, ATNSimulator.ERROR);
		}
		// stop when we can't match any more char
		return ATNSimulator.ERROR;
	}
	// Add an edge from s to target DFA found/created for reach
	return this.addDFAEdge(s, t, null, reach);
};

LexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {
	if (this.prevAccept.dfaState !== null) {
		var lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
		this.accept(input, lexerActionExecutor, this.startIndex,
				prevAccept.index, prevAccept.line, prevAccept.column);
		return prevAccept.dfaState.prediction;
	} else {
		// if no accept and EOF is first char, return EOF
		if (t === Token.EOF && input.index === this.startIndex) {
			return Token.EOF;
		}
		throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
	}
};

// Given a starting configuration set, figure out all ATN configurations
// we can reach upon input {@code t}. Parameter {@code reach} is a return
// parameter.
LexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,
		reach, t) {
	// this is used to skip processing for configs which have a lower priority
	// than a config that already reached an accept state for the same rule
	var skipAlt = ATN.INVALID_ALT_NUMBER;
	for (var i = 0; i < closure.items.length; i++) {
		var cfg = closure.items[i];
		var currentAltReachedAcceptState = (cfg.alt === skipAlt);
		if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
			continue;
		}
		if (LexerATNSimulator.debug) {
			console.log("testing %s at %s\n", this.getTokenName(t), cfg
					.toString(this.recog, true));
		}
		for (var j = 0; j < cfg.state.transitions.length; j++) {
			var trans = cfg.state.transitions[j]; // for each transition
			var target = this.getReachableTarget(trans, t);
			if (target !== null) {
				var lexerActionExecutor = cfg.lexerActionExecutor;
				if (lexerActionExecutor !== null) {
					lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
				}
				var treatEofAsEpsilon = (t === Token.EOF);
				var config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
				if (this.closure(input, config, reach,
						currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
					// any remaining configs for this alt have a lower priority
					// than the one that just reached an accept state.
					skipAlt = cfg.alt;
				}
			}
		}
	}
};

LexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,
		startIndex, index, line, charPos) {
	if (LexerATNSimulator.debug) {
		console.log("ACTION %s\n", lexerActionExecutor);
	}
	// seek to after last char in token
	input.seek(index);
	this.line = line;
	this.column = charPos;
	if (lexerActionExecutor !== null && this.recog !== null) {
		lexerActionExecutor.execute(this.recog, input, startIndex);
	}
};

LexerATNSimulator.prototype.getReachableTarget = function(trans, t) {
	if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
		return trans.target;
	} else {
		return null;
	}
};

LexerATNSimulator.prototype.computeStartState = function(input, p) {
	var initialContext = PredictionContext.EMPTY;
	var configs = new OrderedATNConfigSet();
	for (var i = 0; i < p.transitions.length; i++) {
		var target = p.transitions[i].target;
        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
		this.closure(input, cfg, configs, false, false, false);
	}
	return configs;
};

// Since the alternatives within any lexer decision are ordered by
// preference, this method stops pursuing the closure as soon as an accept
// state is reached. After the first accept state is reached by depth-first
// search from {@code config}, all other (potentially reachable) states for
// this rule would have a lower priority.
//
// @return {@code true} if an accept state is reached, otherwise
// {@code false}.
LexerATNSimulator.prototype.closure = function(input, config, configs,
		currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (LexerATNSimulator.debug) {
		console.log("closure(" + config.toString(this.recog, true) + ")");
	}
	if (config.state instanceof RuleStopState) {
		if (LexerATNSimulator.debug) {
			if (this.recog !== null) {
				console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
			} else {
				console.log("closure at rule stop %s\n", config);
			}
		}
		if (config.context === null || config.context.hasEmptyPath()) {
			if (config.context === null || config.context.isEmpty()) {
				configs.add(config);
				return true;
			} else {
				configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
				currentAltReachedAcceptState = true;
			}
		}
		if (config.context !== null && !config.context.isEmpty()) {
			for (var i = 0; i < config.context.length; i++) {
				if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
					var newContext = config.context.getParent(i); // "pop" return state
					var returnState = this.atn.states[config.context.getReturnState(i)];
					cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
					currentAltReachedAcceptState = this.closure(input, cfg,
							configs, currentAltReachedAcceptState, speculative,
							treatEofAsEpsilon);
				}
			}
		}
		return currentAltReachedAcceptState;
	}
	// optimization
	if (!config.state.epsilonOnlyTransitions) {
		if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
			configs.add(config);
		}
	}
	for (var j = 0; j < config.state.transitions.length; j++) {
		var trans = config.state.transitions[j];
		cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
		if (cfg !== null) {
			currentAltReachedAcceptState = this.closure(input, cfg, configs,
					currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
		}
	}
	return currentAltReachedAcceptState;
};

// side-effect: can alter configs.hasSemanticContext
LexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,
		configs, speculative, treatEofAsEpsilon) {
	var cfg = null;
	if (trans.serializationType === Transition.RULE) {
		var newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
		cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
	} else if (trans.serializationType === Transition.PRECEDENCE) {
		throw "Precedence predicates are not supported in lexers.";
	} else if (trans.serializationType === Transition.PREDICATE) {
		// Track traversing semantic predicates. If we traverse,
		// we cannot add a DFA state for this "reach" computation
		// because the DFA would not test the predicate again in the
		// future. Rather than creating collections of semantic predicates
		// like v3 and testing them on prediction, v4 will test them on the
		// fly all the time using the ATN not the DFA. This is slower but
		// semantically it's not used that often. One of the key elements to
		// this predicate mechanism is not adding DFA states that see
		// predicates immediately afterwards in the ATN. For example,

		// a : ID {p1}? | ID {p2}? ;

		// should create the start state for rule 'a' (to save start state
		// competition), but should not create target of ID state. The
		// collection of ATN states the following ID references includes
		// states reached by traversing predicates. Since this is when we
		// test them, we cannot cash the DFA state target of ID.

		if (LexerATNSimulator.debug) {
			console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
		}
		configs.hasSemanticContext = true;
		if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.ACTION) {
		if (config.context === null || config.context.hasEmptyPath()) {
			// execute actions anywhere in the start rule for a token.
			//
			// TODO: if the entry rule is invoked recursively, some
			// actions may be executed during the recursive call. The
			// problem can appear when hasEmptyPath() is true but
			// isEmpty() is false. In this case, the config needs to be
			// split into two contexts - one with just the empty path
			// and another with everything but the empty path.
			// Unfortunately, the current algorithm does not allow
			// getEpsilonTarget to return two configurations, so
			// additional modifications are needed before we can support
			// the split operation.
			var lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
					this.atn.lexerActions[trans.actionIndex]);
			cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
		} else {
			// ignore actions in referenced rules
			cfg = new LexerATNConfig( { state:trans.target}, config);
		}
	} else if (trans.serializationType === Transition.EPSILON) {
		cfg = new LexerATNConfig({ state:trans.target}, config);
	} else if (trans.serializationType === Transition.ATOM ||
				trans.serializationType === Transition.RANGE ||
				trans.serializationType === Transition.SET) {
		if (treatEofAsEpsilon) {
			if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
				cfg = new LexerATNConfig( { state:trans.target }, config);
			}
		}
	}
	return cfg;
};

// Evaluate a predicate specified in the lexer.
//
// <p>If {@code speculative} is {@code true}, this method was called before
// {@link //consume} for the matched character. This method should call
// {@link //consume} before evaluating the predicate to ensure position
// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
// and {@link Lexer//getcolumn}, properly reflect the current
// lexer state. This method should restore {@code input} and the simulator
// to the original state before returning (i.e. undo the actions made by the
// call to {@link //consume}.</p>
//
// @param input The input stream.
// @param ruleIndex The rule containing the predicate.
// @param predIndex The index of the predicate within the rule.
// @param speculative {@code true} if the current index in {@code input} is
// one character before the predicate's location.
//
// @return {@code true} if the specified predicate evaluates to
// {@code true}.
// /
LexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,
		predIndex, speculative) {
	// assume true if no recognizer was provided
	if (this.recog === null) {
		return true;
	}
	if (!speculative) {
		return this.recog.sempred(null, ruleIndex, predIndex);
	}
	var savedcolumn = this.column;
	var savedLine = this.line;
	var index = input.index;
	var marker = input.mark();
	try {
		this.consume(input);
		return this.recog.sempred(null, ruleIndex, predIndex);
	} finally {
		this.column = savedcolumn;
		this.line = savedLine;
		input.seek(index);
		input.release(marker);
	}
};

LexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {
	settings.index = input.index;
	settings.line = this.line;
	settings.column = this.column;
	settings.dfaState = dfaState;
};

LexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {
	if (to === undefined) {
		to = null;
	}
	if (cfgs === undefined) {
		cfgs = null;
	}
	if (to === null && cfgs !== null) {
		// leading to this call, ATNConfigSet.hasSemanticContext is used as a
		// marker indicating dynamic predicate evaluation makes this edge
		// dependent on the specific input sequence, so the static edge in the
		// DFA should be omitted. The target DFAState is still created since
		// execATN has the ability to resynchronize with the DFA state cache
		// following the predicate evaluation step.
		//
		// TJP notes: next time through the DFA, we see a pred again and eval.
		// If that gets us to a previously created (but dangling) DFA
		// state, we can continue in pure DFA mode from there.
		// /
		var suppressEdge = cfgs.hasSemanticContext;
		cfgs.hasSemanticContext = false;

		to = this.addDFAState(cfgs);

		if (suppressEdge) {
			return to;
		}
	}
	// add the edge
	if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
		// Only track edges within the DFA bounds
		return to;
	}
	if (LexerATNSimulator.debug) {
		console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
	}
	if (from_.edges === null) {
		// make room for tokens 1..n and -1 masquerading as index 0
		from_.edges = [];
	}
	from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

	return to;
};

// Add a new DFA state if there isn't one with this set of
// configurations already. This method also detects the first
// configuration containing an ATN rule stop state. Later, when
// traversing the DFA, we will know which rule to accept.
LexerATNSimulator.prototype.addDFAState = function(configs) {
	var proposed = new DFAState(null, configs);
	var firstConfigWithRuleStopState = null;
	for (var i = 0; i < configs.items.length; i++) {
		var cfg = configs.items[i];
		if (cfg.state instanceof RuleStopState) {
			firstConfigWithRuleStopState = cfg;
			break;
		}
	}
	if (firstConfigWithRuleStopState !== null) {
		proposed.isAcceptState = true;
		proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
		proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
	}
	var dfa = this.decisionToDFA[this.mode];
	var existing = dfa.states.get(proposed);
	if (existing!==null) {
		return existing;
	}
	var newState = proposed;
	newState.stateNumber = dfa.states.length;
	configs.setReadonly(true);
	newState.configs = configs;
	dfa.states.add(newState);
	return newState;
};

LexerATNSimulator.prototype.getDFA = function(mode) {
	return this.decisionToDFA[mode];
};

// Get the text matched so far for the current token.
LexerATNSimulator.prototype.getText = function(input) {
	// index is first lookahead char, don't include.
	return input.getText(this.startIndex, input.index - 1);
};

LexerATNSimulator.prototype.consume = function(input) {
	var curChar = input.LA(1);
	if (curChar === "\n".charCodeAt(0)) {
		this.line += 1;
		this.column = 0;
	} else {
		this.column += 1;
	}
	input.consume();
};

LexerATNSimulator.prototype.getTokenName = function(tt) {
	if (tt === -1) {
		return "EOF";
	} else {
		return "'" + String.fromCharCode(tt) + "'";
	}
};

exports.LexerATNSimulator = LexerATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/atn/LexerAction.js":
/*!************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerAction.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
 //

function LexerActionType() {
}

LexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.
LexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.
LexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.
LexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.
LexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.
LexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.
LexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.
LexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.

function LexerAction(action) {
    this.actionType = action;
    this.isPositionDependent = false;
    return this;
}

LexerAction.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish()
};

LexerAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType);
};

LexerAction.prototype.equals = function(other) {
    return this === other;
};



//
// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
//
// <p>The {@code skip} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerSkipAction() {
	LexerAction.call(this, LexerActionType.SKIP);
	return this;
}

LexerSkipAction.prototype = Object.create(LexerAction.prototype);
LexerSkipAction.prototype.constructor = LexerSkipAction;

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

LexerSkipAction.prototype.execute = function(lexer) {
    lexer.skip();
};

LexerSkipAction.prototype.toString = function() {
	return "skip";
};

//  Implements the {@code type} lexer action by calling {@link Lexer//setType}
// with the assigned type.
function LexerTypeAction(type) {
	LexerAction.call(this, LexerActionType.TYPE);
	this.type = type;
	return this;
}

LexerTypeAction.prototype = Object.create(LexerAction.prototype);
LexerTypeAction.prototype.constructor = LexerTypeAction;

LexerTypeAction.prototype.execute = function(lexer) {
    lexer.type = this.type;
};

LexerTypeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.type);
};


LexerTypeAction.prototype.equals = function(other) {
    if(this === other) {
        return true;
    } else if (! (other instanceof LexerTypeAction)) {
        return false;
    } else {
        return this.type === other.type;
    }
};

LexerTypeAction.prototype.toString = function() {
    return "type(" + this.type + ")";
};

// Implements the {@code pushMode} lexer action by calling
// {@link Lexer//pushMode} with the assigned mode.
function LexerPushModeAction(mode) {
	LexerAction.call(this, LexerActionType.PUSH_MODE);
    this.mode = mode;
    return this;
}

LexerPushModeAction.prototype = Object.create(LexerAction.prototype);
LexerPushModeAction.prototype.constructor = LexerPushModeAction;

// <p>This action is implemented by calling {@link Lexer//pushMode} with the
// value provided by {@link //getMode}.</p>
LexerPushModeAction.prototype.execute = function(lexer) {
    lexer.pushMode(this.mode);
};

LexerPushModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerPushModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerPushModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerPushModeAction.prototype.toString = function() {
	return "pushMode(" + this.mode + ")";
};


// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
//
// <p>The {@code popMode} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerPopModeAction() {
	LexerAction.call(this,LexerActionType.POP_MODE);
	return this;
}

LexerPopModeAction.prototype = Object.create(LexerAction.prototype);
LexerPopModeAction.prototype.constructor = LexerPopModeAction;

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerPopModeAction.prototype.execute = function(lexer) {
    lexer.popMode();
};

LexerPopModeAction.prototype.toString = function() {
	return "popMode";
};

// Implements the {@code more} lexer action by calling {@link Lexer//more}.
//
// <p>The {@code more} command does not have any parameters, so this action is
// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
function LexerMoreAction() {
	LexerAction.call(this, LexerActionType.MORE);
	return this;
}

LexerMoreAction.prototype = Object.create(LexerAction.prototype);
LexerMoreAction.prototype.constructor = LexerMoreAction;

LexerMoreAction.INSTANCE = new LexerMoreAction();

// <p>This action is implemented by calling {@link Lexer//popMode}.</p>
LexerMoreAction.prototype.execute = function(lexer) {
    lexer.more();
};

LexerMoreAction.prototype.toString = function() {
    return "more";
};


// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
// the assigned mode.
function LexerModeAction(mode) {
	LexerAction.call(this, LexerActionType.MODE);
    this.mode = mode;
    return this;
}

LexerModeAction.prototype = Object.create(LexerAction.prototype);
LexerModeAction.prototype.constructor = LexerModeAction;

// <p>This action is implemented by calling {@link Lexer//mode} with the
// value provided by {@link //getMode}.</p>
LexerModeAction.prototype.execute = function(lexer) {
    lexer.mode(this.mode);
};

LexerModeAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.mode);
};

LexerModeAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerModeAction)) {
        return false;
    } else {
        return this.mode === other.mode;
    }
};

LexerModeAction.prototype.toString = function() {
    return "mode(" + this.mode + ")";
};

// Executes a custom lexer action by calling {@link Recognizer//action} with the
// rule and action indexes assigned to the custom action. The implementation of
// a custom action is added to the generated code for the lexer in an override
// of {@link Recognizer//action} when the grammar is compiled.
//
// <p>This class may represent embedded actions created with the <code>{...}</code>
// syntax in ANTLR 4, as well as actions created for lexer commands where the
// command argument could not be evaluated when the grammar was compiled.</p>


    // Constructs a custom lexer action with the specified rule and action
    // indexes.
    //
    // @param ruleIndex The rule index to use for calls to
    // {@link Recognizer//action}.
    // @param actionIndex The action index to use for calls to
    // {@link Recognizer//action}.

function LexerCustomAction(ruleIndex, actionIndex) {
	LexerAction.call(this, LexerActionType.CUSTOM);
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex;
    this.isPositionDependent = true;
    return this;
}

LexerCustomAction.prototype = Object.create(LexerAction.prototype);
LexerCustomAction.prototype.constructor = LexerCustomAction;

// <p>Custom actions are implemented by calling {@link Lexer//action} with the
// appropriate rule and action indexes.</p>
LexerCustomAction.prototype.execute = function(lexer) {
    lexer.action(null, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.ruleIndex, this.actionIndex);
};

LexerCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerCustomAction)) {
        return false;
    } else {
        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
    }
};

// Implements the {@code channel} lexer action by calling
// {@link Lexer//setChannel} with the assigned channel.
// Constructs a new {@code channel} action with the specified channel value.
// @param channel The channel value to pass to {@link Lexer//setChannel}.
function LexerChannelAction(channel) {
	LexerAction.call(this, LexerActionType.CHANNEL);
    this.channel = channel;
    return this;
}

LexerChannelAction.prototype = Object.create(LexerAction.prototype);
LexerChannelAction.prototype.constructor = LexerChannelAction;

// <p>This action is implemented by calling {@link Lexer//setChannel} with the
// value provided by {@link //getChannel}.</p>
LexerChannelAction.prototype.execute = function(lexer) {
    lexer._channel = this.channel;
};

LexerChannelAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.channel);
};

LexerChannelAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerChannelAction)) {
        return false;
    } else {
        return this.channel === other.channel;
    }
};

LexerChannelAction.prototype.toString = function() {
    return "channel(" + this.channel + ")";
};

// This implementation of {@link LexerAction} is used for tracking input offsets
// for position-dependent actions within a {@link LexerActionExecutor}.
//
// <p>This action is not serialized as part of the ATN, and is only required for
// position-dependent lexer actions which appear at a location other than the
// end of a rule. For more information about DFA optimizations employed for
// lexer actions, see {@link LexerActionExecutor//append} and
// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>

// Constructs a new indexed custom action by associating a character offset
// with a {@link LexerAction}.
//
// <p>Note: This class is only required for lexer actions for which
// {@link LexerAction//isPositionDependent} returns {@code true}.</p>
//
// @param offset The offset into the input {@link CharStream}, relative to
// the token start index, at which the specified lexer action should be
// executed.
// @param action The lexer action to execute at a particular offset in the
// input {@link CharStream}.
function LexerIndexedCustomAction(offset, action) {
	LexerAction.call(this, action.actionType);
    this.offset = offset;
    this.action = action;
    this.isPositionDependent = true;
    return this;
}

LexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);
LexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;

// <p>This method calls {@link //execute} on the result of {@link //getAction}
// using the provided {@code lexer}.</p>
LexerIndexedCustomAction.prototype.execute = function(lexer) {
    // assume the input stream position was properly set by the calling code
    this.action.execute(lexer);
};

LexerIndexedCustomAction.prototype.updateHashCode = function(hash) {
    hash.update(this.actionType, this.offset, this.action);
};

LexerIndexedCustomAction.prototype.equals = function(other) {
    if (this === other) {
        return true;
    } else if (! (other instanceof LexerIndexedCustomAction)) {
        return false;
    } else {
        return this.offset === other.offset && this.action === other.action;
    }
};


exports.LexerActionType = LexerActionType;
exports.LexerSkipAction = LexerSkipAction;
exports.LexerChannelAction = LexerChannelAction;
exports.LexerCustomAction = LexerCustomAction;
exports.LexerIndexedCustomAction = LexerIndexedCustomAction;
exports.LexerMoreAction = LexerMoreAction;
exports.LexerTypeAction = LexerTypeAction;
exports.LexerPushModeAction = LexerPushModeAction;
exports.LexerPopModeAction = LexerPopModeAction;
exports.LexerModeAction = LexerModeAction;

/***/ }),

/***/ "./node_modules/antlr4/atn/LexerActionExecutor.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/atn/LexerActionExecutor.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// Represents an executor for a sequence of lexer actions which traversed during
// the matching operation of a lexer rule (token).
//
// <p>The executor tracks position information for position-dependent lexer actions
// efficiently, ensuring that actions appearing only at the end of the rule do
// not cause bloating of the {@link DFA} created for the lexer.</p>

var hashStuff = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/Utils.js").hashStuff;
var LexerIndexedCustomAction = __webpack_require__(/*! ./LexerAction */ "./node_modules/antlr4/atn/LexerAction.js").LexerIndexedCustomAction;

function LexerActionExecutor(lexerActions) {
	this.lexerActions = lexerActions === null ? [] : lexerActions;
	// Caches the result of {@link //hashCode} since the hash code is an element
	// of the performance-critical {@link LexerATNConfig//hashCode} operation.
	this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
	// lexerActions]))
	return this;
}

// Creates a {@link LexerActionExecutor} which executes the actions for
// the input {@code lexerActionExecutor} followed by a specified
// {@code lexerAction}.
//
// @param lexerActionExecutor The executor for actions already traversed by
// the lexer while matching a token within a particular
// {@link LexerATNConfig}. If this is {@code null}, the method behaves as
// though it were an empty executor.
// @param lexerAction The lexer action to execute after the actions
// specified in {@code lexerActionExecutor}.
//
// @return A {@link LexerActionExecutor} for executing the combine actions
// of {@code lexerActionExecutor} and {@code lexerAction}.
LexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {
	if (lexerActionExecutor === null) {
		return new LexerActionExecutor([ lexerAction ]);
	}
	var lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
	return new LexerActionExecutor(lexerActions);
};

// Creates a {@link LexerActionExecutor} which encodes the current offset
// for position-dependent lexer actions.
//
// <p>Normally, when the executor encounters lexer actions where
// {@link LexerAction//isPositionDependent} returns {@code true}, it calls
// {@link IntStream//seek} on the input {@link CharStream} to set the input
// position to the <em>end</em> of the current token. This behavior provides
// for efficient DFA representation of lexer actions which appear at the end
// of a lexer rule, even when the lexer rule matches a variable number of
// characters.</p>
//
// <p>Prior to traversing a match transition in the ATN, the current offset
// from the token start index is assigned to all position-dependent lexer
// actions which have not already been assigned a fixed offset. By storing
// the offsets relative to the token start index, the DFA representation of
// lexer actions which appear in the middle of tokens remains efficient due
// to sharing among tokens of the same length, regardless of their absolute
// position in the input stream.</p>
//
// <p>If the current executor already has offsets assigned to all
// position-dependent lexer actions, the method returns {@code this}.</p>
//
// @param offset The current offset to assign to all position-dependent
// lexer actions which do not already have offsets assigned.
//
// @return A {@link LexerActionExecutor} which stores input stream offsets
// for all position-dependent lexer actions.
// /
LexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {
	var updatedLexerActions = null;
	for (var i = 0; i < this.lexerActions.length; i++) {
		if (this.lexerActions[i].isPositionDependent &&
				!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
			if (updatedLexerActions === null) {
				updatedLexerActions = this.lexerActions.concat([]);
			}
			updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
					this.lexerActions[i]);
		}
	}
	if (updatedLexerActions === null) {
		return this;
	} else {
		return new LexerActionExecutor(updatedLexerActions);
	}
};

// Execute the actions encapsulated by this executor within the context of a
// particular {@link Lexer}.
//
// <p>This method calls {@link IntStream//seek} to set the position of the
// {@code input} {@link CharStream} prior to calling
// {@link LexerAction//execute} on a position-dependent action. Before the
// method returns, the input position will be restored to the same position
// it was in when the method was invoked.</p>
//
// @param lexer The lexer instance.
// @param input The input stream which is the source for the current token.
// When this method is called, the current {@link IntStream//index} for
// {@code input} should be the start of the following token, i.e. 1
// character past the end of the current token.
// @param startIndex The token start index. This value may be passed to
// {@link IntStream//seek} to set the {@code input} position to the beginning
// of the token.
// /
LexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {
	var requiresSeek = false;
	var stopIndex = input.index;
	try {
		for (var i = 0; i < this.lexerActions.length; i++) {
			var lexerAction = this.lexerActions[i];
			if (lexerAction instanceof LexerIndexedCustomAction) {
				var offset = lexerAction.offset;
				input.seek(startIndex + offset);
				lexerAction = lexerAction.action;
				requiresSeek = (startIndex + offset) !== stopIndex;
			} else if (lexerAction.isPositionDependent) {
				input.seek(stopIndex);
				requiresSeek = false;
			}
			lexerAction.execute(lexer);
		}
	} finally {
		if (requiresSeek) {
			input.seek(stopIndex);
		}
	}
};

LexerActionExecutor.prototype.hashCode = function() {
	return this.cachedHashCode;
};

LexerActionExecutor.prototype.updateHashCode = function(hash) {
    hash.update(this.cachedHashCode);
};


LexerActionExecutor.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof LexerActionExecutor)) {
		return false;
	} else if (this.cachedHashCode != other.cachedHashCode) {
		return false;
	} else if (this.lexerActions.length != other.lexerActions.length) {
		return false;
	} else {
		var numActions = this.lexerActions.length
		for (var idx = 0; idx < numActions; ++idx) {
			if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
				return false;
			}
		}
		return true;
	}
};

exports.LexerActionExecutor = LexerActionExecutor;


/***/ }),

/***/ "./node_modules/antlr4/atn/ParserATNSimulator.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/atn/ParserATNSimulator.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
//
// <p>
// The basic complexity of the adaptive strategy makes it harder to understand.
// We begin with ATN simulation to build paths in a DFA. Subsequent prediction
// requests go through the DFA first. If they reach a state without an edge for
// the current symbol, the algorithm fails over to the ATN simulation to
// complete the DFA path for the current input (until it finds a conflict state
// or uniquely predicting state).</p>
//
// <p>
// All of that is done without using the outer context because we want to create
// a DFA that is not dependent upon the rule invocation stack when we do a
// prediction. One DFA works in all contexts. We avoid using context not
// necessarily because it's slower, although it can be, but because of the DFA
// caching problem. The closure routine only considers the rule invocation stack
// created during prediction beginning in the decision rule. For example, if
// prediction occurs without invoking another rule's ATN, there are no context
// stacks in the configurations. When lack of context leads to a conflict, we
// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
// strategy (versus full LL(*)).</p>
//
// <p>
// When SLL yields a configuration set with conflict, we rewind the input and
// retry the ATN simulation, this time using full outer context without adding
// to the DFA. Configuration context stacks will be the full invocation stacks
// from the start rule. If we get a conflict using full context, then we can
// definitively say we have a true ambiguity for that input sequence. If we
// don't get a conflict, it implies that the decision is sensitive to the outer
// context. (It is not context-sensitive in the sense of context-sensitive
// grammars.)</p>
//
// <p>
// The next time we reach this DFA state with an SLL conflict, through DFA
// simulation, we will again retry the ATN simulation using full context mode.
// This is slow because we can't save the results and have to "interpret" the
// ATN each time we get that input.</p>
//
// <p>
// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
//
// <p>
// We could cache results from full context to predicted alternative easily and
// that saves a lot of time but doesn't work in presence of predicates. The set
// of visible predicates from the ATN start state changes depending on the
// context, because closure can fall off the end of a rule. I tried to cache
// tuples (stack context, semantic context, predicted alt) but it was slower
// than interpreting and much more complicated. Also required a huge amount of
// memory. The goal is not to create the world's fastest parser anyway. I'd like
// to keep this algorithm simple. By launching multiple threads, we can improve
// the speed of parsing across a large number of files.</p>
//
// <p>
// There is no strict ordering between the amount of input used by SLL vs LL,
// which makes it really hard to build a cache for full context. Let's say that
// we have input A B C that leads to an SLL conflict with full context X. That
// implies that using X we might only use A B but we could also use A B C D to
// resolve conflict. Input A B C D could predict alternative 1 in one position
// in the input and A B C E could predict alternative 2 in another position in
// input. The conflicting SLL configurations could still be non-unique in the
// full context prediction, which would lead us to requiring more input than the
// original A B C.	To make a	prediction cache work, we have to track	the exact
// input	used during the previous prediction. That amounts to a cache that maps
// X to a specific DFA for that context.</p>
//
// <p>
// Something should be done for left-recursive expression predictions. They are
// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
// with full LL thing Sam does.</p>
//
// <p>
// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
//
// <p>
// We avoid doing full context retry when the outer context is empty, we did not
// dip into the outer context by falling off the end of the decision state rule,
// or when we force SLL mode.</p>
//
// <p>
// As an example of the not dip into outer context case, consider as super
// constructor calls versus function calls. One grammar might look like
// this:</p>
//
// <pre>
// ctorBody
//   : '{' superCall? stat* '}'
//   ;
// </pre>
//
// <p>
// Or, you might see something like</p>
//
// <pre>
// stat
//   : superCall ';'
//   | expression ';'
//   | ...
//   ;
// </pre>
//
// <p>
// In both cases I believe that no closure operations will dip into the outer
// context. In the first case ctorBody in the worst case will stop at the '}'.
// In the 2nd case it should stop at the ';'. Both cases should stay within the
// entry rule and not dip into the outer context.</p>
//
// <p>
// <strong>PREDICATES</strong></p>
//
// <p>
// Predicates are always evaluated if present in either SLL or LL both. SLL and
// LL simulation deals with predicates differently. SLL collects predicates as
// it performs closure operations like ANTLR v3 did. It delays predicate
// evaluation until it reaches and accept state. This allows us to cache the SLL
// ATN simulation whereas, if we had evaluated predicates on-the-fly during
// closure, the DFA state configuration sets would be different and we couldn't
// build up a suitable DFA.</p>
//
// <p>
// When building a DFA accept state during ATN simulation, we evaluate any
// predicates and return the sole semantically valid alternative. If there is
// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
// we throw an exception. Alternatives without predicates act like they have
// true predicates. The simple way to think about it is to strip away all
// alternatives with false predicates and choose the minimum alternative that
// remains.</p>
//
// <p>
// When we start in the DFA and reach an accept state that's predicated, we test
// those and return the minimum semantically viable alternative. If no
// alternatives are viable, we throw an exception.</p>
//
// <p>
// During full LL ATN simulation, closure always evaluates predicates and
// on-the-fly. This is crucial to reducing the configuration set size during
// closure. It hits a landmine when parsing with the Java grammar, for example,
// without this on-the-fly evaluation.</p>
//
// <p>
// <strong>SHARING DFA</strong></p>
//
// <p>
// All instances of the same parser share the same decision DFAs through a
// static field. Each instance gets its own ATN simulator but they share the
// same {@link //decisionToDFA} field. They also share a
// {@link PredictionContextCache} object that makes sure that all
// {@link PredictionContext} objects are shared among the DFA states. This makes
// a big size difference.</p>
//
// <p>
// <strong>THREAD SAFETY</strong></p>
//
// <p>
// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
// it adds a new DFA object to that array. {@link //addDFAEdge}
// locks on the DFA for the current decision when setting the
// {@link DFAState//edges} field. {@link //addDFAState} locks on
// the DFA for the current decision when looking up a DFA state to see if it
// already exists. We must make sure that all requests to add DFA states that
// are equivalent result in the same shared DFA object. This is because lots of
// threads will be trying to update the DFA at once. The
// {@link //addDFAState} method also locks inside the DFA lock
// but this time on the shared context cache when it rebuilds the
// configurations' {@link PredictionContext} objects using cached
// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
// safe as long as we can guarantee that all threads referencing
// {@code s.edge[t]} get the same physical target {@link DFAState}, or
// {@code null}. Once into the DFA, the DFA simulation does not reference the
// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
// targets. The DFA simulator will either find {@link DFAState//edges} to be
// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
// {@code dfa.edges[t]} to be non-null. The
// {@link //addDFAEdge} method could be racing to set the field
// but in either case the DFA simulator works; if {@code null}, and requests ATN
// simulation. It could also race trying to get {@code dfa.edges[t]}, but either
// way it will work because it's not doing a test and set operation.</p>
//
// <p>
// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
// Parsing)</strong></p>
//
// <p>
// Sam pointed out that if SLL does not give a syntax error, then there is no
// point in doing full LL, which is slower. We only have to try LL if we get a
// syntax error. For maximum speed, Sam starts the parser set to pure SLL
// mode with the {@link BailErrorStrategy}:</p>
//
// <pre>
// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
// </pre>
//
// <p>
// If it does not get a syntax error, then we're done. If it does get a syntax
// error, we need to retry with the combined SLL/LL strategy.</p>
//
// <p>
// The reason this works is as follows. If there are no SLL conflicts, then the
// grammar is SLL (at least for that input set). If there is an SLL conflict,
// the full LL analysis must yield a set of viable alternatives which is a
// subset of the alternatives reported by SLL. If the LL set is a singleton,
// then the grammar is LL but not SLL. If the LL set is the same size as the SLL
// set, the decision is SLL. If the LL set has size &gt; 1, then that decision
// is truly ambiguous on the current input. If the LL set is smaller, then the
// SLL conflict resolution might choose an alternative that the full LL would
// rule out as a possibility based upon better context information. If that's
// the case, then the SLL parse will definitely get an error because the full LL
// analysis says it's not viable. If SLL conflict resolution chooses an
// alternative within the LL set, them both SLL and LL would choose the same
// alternative because they both choose the minimum of multiple conflicting
// alternatives.</p>
//
// <p>
// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
// parsing will get an error because SLL will pursue alternative 1. If
// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
// choose the same alternative because alternative one is the minimum of either
// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
//
// <p>
// Of course, if the input is invalid, then we will get an error for sure in
// both SLL and LL parsing. Erroneous input will therefore require 2 passes over
// the input.</p>
//

var Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js");
var Set = Utils.Set;
var BitSet = Utils.BitSet;
var DoubleDict = Utils.DoubleDict;
var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var ATNState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").ATNState;
var ATNConfig = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/atn/ATNConfig.js").ATNConfig;
var ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var DFAState = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/dfa/DFAState.js").DFAState;
var PredPrediction = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/dfa/DFAState.js").PredPrediction;
var ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ "./node_modules/antlr4/atn/ATNSimulator.js").ATNSimulator;
var PredictionMode = __webpack_require__(/*! ./PredictionMode */ "./node_modules/antlr4/atn/PredictionMode.js").PredictionMode;
var RuleContext = __webpack_require__(/*! ./../RuleContext */ "./node_modules/antlr4/RuleContext.js").RuleContext;
var ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ "./node_modules/antlr4/ParserRuleContext.js").ParserRuleContext;
var SemanticContext = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").SemanticContext;
var StarLoopEntryState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").StarLoopEntryState;
var RuleStopState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").RuleStopState;
var PredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").PredictionContext;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var Transitions = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/atn/Transition.js");
var Transition = Transitions.Transition;
var SetTransition = Transitions.SetTransition;
var NotSetTransition = Transitions.NotSetTransition;
var RuleTransition = Transitions.RuleTransition;
var ActionTransition = Transitions.ActionTransition;
var NoViableAltException = __webpack_require__(/*! ./../error/Errors */ "./node_modules/antlr4/error/Errors.js").NoViableAltException;

var SingletonPredictionContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").SingletonPredictionContext;
var predictionContextFromRuleContext = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/PredictionContext.js").predictionContextFromRuleContext;

function ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {
	ATNSimulator.call(this, atn, sharedContextCache);
    this.parser = parser;
    this.decisionToDFA = decisionToDFA;
    // SLL, LL, or LL + exact ambig detection?//
    this.predictionMode = PredictionMode.LL;
    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
    this._input = null;
    this._startIndex = 0;
    this._outerContext = null;
    this._dfa = null;
    // Each prediction operation uses a cache for merge of prediction contexts.
    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
    //  isn't synchronized but we're ok since two threads shouldn't reuse same
    //  parser/atnsim object because it can only handle one input at a time.
    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
    //  also be examined during cache lookup.
    //
    this.mergeCache = null;
    return this;
}

ParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);
ParserATNSimulator.prototype.constructor = ParserATNSimulator;

ParserATNSimulator.prototype.debug = false;
ParserATNSimulator.prototype.debug_closure = false;
ParserATNSimulator.prototype.debug_add = false;
ParserATNSimulator.prototype.debug_list_atn_decisions = false;
ParserATNSimulator.prototype.dfa_debug = false;
ParserATNSimulator.prototype.retry_debug = false;


ParserATNSimulator.prototype.reset = function() {
};

ParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("adaptivePredict decision " + decision +
                               " exec LA(1)==" + this.getLookaheadName(input) +
                               " line " + input.LT(1).line + ":" +
                               input.LT(1).column);
    }
    this._input = input;
    this._startIndex = input.index;
    this._outerContext = outerContext;

    var dfa = this.decisionToDFA[decision];
    this._dfa = dfa;
    var m = input.mark();
    var index = input.index;

    // Now we are certain to have a specific decision's DFA
    // But, do we still need an initial state?
    try {
        var s0;
        if (dfa.precedenceDfa) {
            // the start state for a precedence DFA depends on the current
            // parser precedence, and is provided by a DFA method.
            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
        } else {
            // the start state for a "regular" DFA is just s0
            s0 = dfa.s0;
        }
        if (s0===null) {
            if (outerContext===null) {
                outerContext = RuleContext.EMPTY;
            }
            if (this.debug || this.debug_list_atn_decisions) {
                console.log("predictATN decision " + dfa.decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   ", outerContext=" + outerContext.toString(this.parser.ruleNames));
            }

            var fullCtx = false;
            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

            if( dfa.precedenceDfa) {
                // If this is a precedence DFA, we use applyPrecedenceFilter
                // to convert the computed start state to a precedence start
                // state. We then use DFA.setPrecedenceStartState to set the
                // appropriate start state for the precedence level rather
                // than simply setting DFA.s0.
                //
                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                s0_closure = this.applyPrecedenceFilter(s0_closure);
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
            } else {
                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                dfa.s0 = s0;
            }
        }
        var alt = this.execATN(dfa, s0, input, index, outerContext);
        if (this.debug) {
            console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
        }
        return alt;
    } finally {
        this._dfa = null;
        this.mergeCache = null; // wack cache after each prediction
        input.seek(index);
        input.release(m);
    }
};
// Performs ATN simulation to compute a predicted alternative based
//  upon the remaining input, but also updates the DFA cache to avoid
//  having to traverse the ATN again for the same input sequence.

// There are some key conditions we're looking for after computing a new
// set of ATN configs (proposed DFA state):
      // if the set is empty, there is no viable alternative for current symbol
      // does the state uniquely predict an alternative?
      // does the state have a conflict that would prevent us from
      //   putting it on the work list?

// We also have some key operations to do:
      // add an edge from previous DFA state to potentially new DFA state, D,
      //   upon current symbol but only if adding to work list, which means in all
      //   cases except no viable alternative (and possibly non-greedy decisions?)
      // collecting predicates and adding semantic context to DFA accept states
      // adding rule context to context-sensitive DFA accept states
      // consuming an input symbol
      // reporting a conflict
      // reporting an ambiguity
      // reporting a context sensitivity
      // reporting insufficient predicates

// cover these cases:
//    dead end
//    single alt
//    single alt + preds
//    conflict
//    conflict + preds
//
ParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATN decision " + dfa.decision +
                " exec LA(1)==" + this.getLookaheadName(input) +
                " line " + input.LT(1).line + ":" + input.LT(1).column);
    }
    var alt;
    var previousD = s0;

    if (this.debug) {
        console.log("s0 = " + s0);
    }
    var t = input.LA(1);
    while(true) { // while more work
        var D = this.getExistingTargetState(previousD, t);
        if(D===null) {
            D = this.computeTargetState(dfa, previousD, t);
        }
        if(D===ATNSimulator.ERROR) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for SLL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
            input.seek(startIndex);
            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
            var conflictingAlts = null;
            if (D.predicates!==null) {
                if (this.debug) {
                    console.log("DFA state has preds in DFA sim LL failover");
                }
                var conflictIndex = input.index;
                if(conflictIndex !== startIndex) {
                    input.seek(startIndex);
                }
                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (conflictingAlts.length===1) {
                    if(this.debug) {
                        console.log("Full LL avoided");
                    }
                    return conflictingAlts.minValue();
                }
                if (conflictIndex !== startIndex) {
                    // restore the index so reporting the fallback to full
                    // context occurs with the index at the correct spot
                    input.seek(conflictIndex);
                }
            }
            if (this.dfa_debug) {
                console.log("ctx sensitive state " + outerContext +" in " + D);
            }
            var fullCtx = true;
            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
            return alt;
        }
        if (D.isAcceptState) {
            if (D.predicates===null) {
                return D.prediction;
            }
            var stopIndex = input.index;
            input.seek(startIndex);
            var alts = this.evalSemanticContext(D.predicates, outerContext, true);
            if (alts.length===0) {
                throw this.noViableAlt(input, outerContext, D.configs, startIndex);
            } else if (alts.length===1) {
                return alts.minValue();
            } else {
                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                return alts.minValue();
            }
        }
        previousD = D;

        if (t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
};
//
// Get an existing target state for an edge in the DFA. If the target state
// for the edge has not yet been computed or is otherwise not available,
// this method returns {@code null}.
//
// @param previousD The current DFA state
// @param t The next input symbol
// @return The existing target DFA state for the given input symbol
// {@code t}, or {@code null} if the target state for this edge is not
// already cached
//
ParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {
    var edges = previousD.edges;
    if (edges===null) {
        return null;
    } else {
        return edges[t + 1] || null;
    }
};
//
// Compute a target state for an edge in the DFA, and attempt to add the
// computed state and corresponding edge to the DFA.
//
// @param dfa The DFA
// @param previousD The current DFA state
// @param t The next input symbol
//
// @return The computed target DFA state for the given input symbol
// {@code t}. If {@code t} does not lead to a valid DFA state, this method
// returns {@link //ERROR}.
//
ParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {
   var reach = this.computeReachSet(previousD.configs, t, false);
    if(reach===null) {
        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
        return ATNSimulator.ERROR;
    }
    // create new target state; we'll add to DFA after it's complete
    var D = new DFAState(null, reach);

    var predictedAlt = this.getUniqueAlt(reach);

    if (this.debug) {
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                    ", previous=" + previousD.configs +
                    ", configs=" + reach +
                    ", predict=" + predictedAlt +
                    ", allSubsetsConflict=" +
                    PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                    this.getConflictingAlts(reach));
    }
    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
        // NO CONFLICT, UNIQUELY PREDICTED ALT
        D.isAcceptState = true;
        D.configs.uniqueAlt = predictedAlt;
        D.prediction = predictedAlt;
    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
        // MORE THAN ONE VIABLE ALTERNATIVE
        D.configs.conflictingAlts = this.getConflictingAlts(reach);
        D.requiresFullContext = true;
        // in SLL-only mode, we will stop at this state and return the minimum alt
        D.isAcceptState = true;
        D.prediction = D.configs.conflictingAlts.minValue();
    }
    if (D.isAcceptState && D.configs.hasSemanticContext) {
        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
        if( D.predicates!==null) {
            D.prediction = ATN.INVALID_ALT_NUMBER;
        }
    }
    // all adds to dfa are done after we've created full D state
    D = this.addDFAEdge(dfa, previousD, t, D);
    return D;
};

ParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {
    // We need to test all predicates, even in DFA states that
    // uniquely predict alternative.
    var nalts = decisionState.transitions.length;
    // Update DFA so reach becomes accept state with (predicate,alt)
    // pairs if preds found for conflicting alts
    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
    if (altToPred!==null) {
        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
    } else {
        // There are preds in configs but they might go away
        // when OR'd together like {p}? || NONE == NONE. If neither
        // alt has preds, resolve to min alt
        dfaState.prediction = altsToCollectPredsFrom.minValue();
    }
};

// comes back with reach.uniqueAlt set to a valid alt
ParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over
                                     s0,
                                     input,
                                     startIndex,
                                     outerContext) {
    if (this.debug || this.debug_list_atn_decisions) {
        console.log("execATNWithFullContext "+s0);
    }
    var fullCtx = true;
    var foundExactAmbig = false;
    var reach = null;
    var previous = s0;
    input.seek(startIndex);
    var t = input.LA(1);
    var predictedAlt = -1;
    while (true) { // while more work
        reach = this.computeReachSet(previous, t, fullCtx);
        if (reach===null) {
            // if any configs in previous dipped into outer context, that
            // means that input up to t actually finished entry rule
            // at least for LL decision. Full LL doesn't dip into outer
            // so don't need special case.
            // We will get an error no matter what so delay until after
            // decision; better error message. Also, no reachable target
            // ATN states in SLL implies LL will also get nowhere.
            // If conflict in states that dip out, choose min since we
            // will get error no matter what.
            var e = this.noViableAlt(input, outerContext, previous, startIndex);
            input.seek(startIndex);
            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
            if(alt!==ATN.INVALID_ALT_NUMBER) {
                return alt;
            } else {
                throw e;
            }
        }
        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);
        if(this.debug) {
            console.log("LL altSubSets=" + altSubSets + ", predict=" +
                  PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));
        }
        reach.uniqueAlt = this.getUniqueAlt(reach);
        // unique prediction?
        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
            predictedAlt = reach.uniqueAlt;
            break;
        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                break;
            }
        } else {
            // In exact ambiguity mode, we never try to terminate early.
            // Just keeps scarfing until we know what the conflict is
            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                foundExactAmbig = true;
                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                break;
            }
            // else there are multiple non-conflicting subsets or
            // we're not sure what the ambiguity is yet.
            // So, keep going.
        }
        previous = reach;
        if( t !== Token.EOF) {
            input.consume();
            t = input.LA(1);
        }
    }
    // If the configuration set uniquely predicts an alternative,
    // without conflict, then we know that it's a full LL decision
    // not SLL.
    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
        return predictedAlt;
    }
    // We do not check predicates here because we have checked them
    // on-the-fly when doing full context prediction.

    //
    // In non-exact ambiguity detection mode, we might	actually be able to
    // detect an exact ambiguity, but I'm not going to spend the cycles
    // needed to check. We only emit ambiguity warnings in exact ambiguity
    // mode.
    //
    // For example, we might know that we have conflicting configurations.
    // But, that does not mean that there is no way forward without a
    // conflict. It's possible to have nonconflicting alt subsets as in:

    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

    // from
    //
    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
    //
    // In this case, (17,1,[5 $]) indicates there is some next sequence that
    // would resolve this without conflict to alternative 1. Any other viable
    // next sequence, however, is associated with a conflict.  We stop
    // looking for input because no amount of further lookahead will alter
    // the fact that we should predict alternative 1.  We just can't say for
    // sure that there is an ambiguity without looking further.

    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

    return predictedAlt;
};

ParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {
    if (this.debug) {
        console.log("in computeReachSet, starting closure: " + closure);
    }
    if( this.mergeCache===null) {
        this.mergeCache = new DoubleDict();
    }
    var intermediate = new ATNConfigSet(fullCtx);

    // Configurations already in a rule stop state indicate reaching the end
    // of the decision rule (local context) or end of the start rule (full
    // context). Once reached, these configurations are never updated by a
    // closure operation, so they are handled separately for the performance
    // advantage of having a smaller intermediate set when calling closure.
    //
    // For full-context reach operations, separate handling is required to
    // ensure that the alternative matching the longest overall sequence is
    // chosen when multiple such configurations can match the input.

    var skippedStopStates = null;

    // First figure out where we can reach on input t
    for (var i=0; i<closure.items.length;i++) {
        var c = closure.items[i];
        if(this.debug_add) {
            console.log("testing " + this.getTokenName(t) + " at " + c);
        }
        if (c.state instanceof RuleStopState) {
            if (fullCtx || t === Token.EOF) {
                if (skippedStopStates===null) {
                    skippedStopStates = [];
                }
                skippedStopStates.push(c);
                if(this.debug_add) {
                    console.log("added " + c + " to skippedStopStates");
                }
            }
            continue;
        }
        for(var j=0;j<c.state.transitions.length;j++) {
            var trans = c.state.transitions[j];
            var target = this.getReachableTarget(trans, t);
            if (target!==null) {
                var cfg = new ATNConfig({state:target}, c);
                intermediate.add(cfg, this.mergeCache);
                if(this.debug_add) {
                    console.log("added " + cfg + " to intermediate");
                }
            }
        }
    }
    // Now figure out where the reach operation can take us...
    var reach = null;

    // This block optimizes the reach operation for intermediate sets which
    // trivially indicate a termination state for the overall
    // adaptivePredict operation.
    //
    // The conditions assume that intermediate
    // contains all configurations relevant to the reach set, but this
    // condition is not true when one or more configurations have been
    // withheld in skippedStopStates, or when the current symbol is EOF.
    //
    if (skippedStopStates===null && t!==Token.EOF) {
        if (intermediate.items.length===1) {
            // Don't pursue the closure if there is just one state.
            // It can only have one alternative; just add to result
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
            // Also don't pursue the closure if there is unique alternative
            // among the configurations.
            reach = intermediate;
        }
    }
    // If the reach set could not be trivially determined, perform a closure
    // operation on the intermediate set to compute its initial value.
    //
    if (reach===null) {
        reach = new ATNConfigSet(fullCtx);
        var closureBusy = new Set();
        var treatEofAsEpsilon = t === Token.EOF;
        for (var k=0; k<intermediate.items.length;k++) {
            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
        }
    }
    if (t === Token.EOF) {
        // After consuming EOF no additional input is possible, so we are
        // only interested in configurations which reached the end of the
        // decision rule (local context) or end of the start rule (full
        // context). Update reach to contain only these configurations. This
        // handles both explicit EOF transitions in the grammar and implicit
        // EOF transitions following the end of the decision or start rule.
        //
        // When reach==intermediate, no closure operation was performed. In
        // this case, removeAllConfigsNotInRuleStopState needs to check for
        // reachable rule stop states as well as configurations already in
        // a rule stop state.
        //
        // This is handled before the configurations in skippedStopStates,
        // because any configurations potentially added from that list are
        // already guaranteed to meet this condition whether or not it's
        // required.
        //
        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
    }
    // If skippedStopStates!==null, then it contains at least one
    // configuration. For full-context reach operations, these
    // configurations reached the end of the start rule, in which case we
    // only add them back to reach if no configuration during the current
    // closure operation reached such a state. This ensures adaptivePredict
    // chooses an alternative matching the longest overall sequence when
    // multiple alternatives are viable.
    //
    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
        for (var l=0; l<skippedStopStates.length;l++) {
            reach.add(skippedStopStates[l], this.mergeCache);
        }
    }
    if (reach.items.length===0) {
        return null;
    } else {
        return reach;
    }
};
//
// Return a configuration set containing only the configurations from
// {@code configs} which are in a {@link RuleStopState}. If all
// configurations in {@code configs} are already in a rule stop state, this
// method simply returns {@code configs}.
//
// <p>When {@code lookToEndOfRule} is true, this method uses
// {@link ATN//nextTokens} for each configuration in {@code configs} which is
// not already in a rule stop state to see if a rule stop state is reachable
// from the configuration via epsilon-only transitions.</p>
//
// @param configs the configuration set to update
// @param lookToEndOfRule when true, this method checks for rule stop states
// reachable by epsilon-only transitions from each configuration in
// {@code configs}.
//
// @return {@code configs} if all configurations in {@code configs} are in a
// rule stop state, otherwise return a new configuration set containing only
// the configurations from {@code configs} which are in a rule stop state
//
ParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return configs;
    }
    var result = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length;i++) {
        var config = configs.items[i];
        if (config.state instanceof RuleStopState) {
            result.add(config, this.mergeCache);
            continue;
        }
        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
            var nextTokens = this.atn.nextTokens(config.state);
            if (nextTokens.contains(Token.EPSILON)) {
                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
            }
        }
    }
    return result;
};

ParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {
    // always at least the implicit call to start rule
    var initialContext = predictionContextFromRuleContext(this.atn, ctx);
    var configs = new ATNConfigSet(fullCtx);
    for(var i=0;i<p.transitions.length;i++) {
        var target = p.transitions[i].target;
        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
        var closureBusy = new Set();
        this.closure(c, configs, closureBusy, true, fullCtx, false);
    }
    return configs;
};

//
// This method transforms the start state computed by
// {@link //computeStartState} to the special start state used by a
// precedence DFA for a particular precedence value. The transformation
// process applies the following changes to the start state's configuration
// set.
//
// <ol>
// <li>Evaluate the precedence predicates for each configuration using
// {@link SemanticContext//evalPrecedence}.</li>
// <li>Remove all configurations which predict an alternative greater than
// 1, for which another configuration that predicts alternative 1 is in the
// same ATN state with the same prediction context. This transformation is
// valid for the following reasons:
// <ul>
// <li>The closure block cannot contain any epsilon transitions which bypass
// the body of the closure, so all states reachable via alternative 1 are
// part of the precedence alternatives of the transformed left-recursive
// rule.</li>
// <li>The "primary" portion of a left recursive rule cannot contain an
// epsilon transition, so the only way an alternative other than 1 can exist
// in a state that is also reachable via alternative 1 is by nesting calls
// to the left-recursive rule, with the outer calls not being at the
// preferred precedence level.</li>
// </ul>
// </li>
// </ol>
//
// <p>
// The prediction context must be considered by this filter to address
// situations like the following.
// </p>
// <code>
// <pre>
// grammar TA;
// prog: statement* EOF;
// statement: letterA | statement letterA 'b' ;
// letterA: 'a';
// </pre>
// </code>
// <p>
// If the above grammar, the ATN state immediately before the token
// reference {@code 'a'} in {@code letterA} is reachable from the left edge
// of both the primary and closure blocks of the left-recursive rule
// {@code statement}. The prediction context associated with each of these
// configurations distinguishes between them, and prevents the alternative
// which stepped out to {@code prog} (and then back in to {@code statement}
// from being eliminated by the filter.
// </p>
//
// @param configs The configuration set computed by
// {@link //computeStartState} as the start state for the DFA.
// @return The transformed configuration set representing the start state
// for a precedence DFA at a particular precedence level (determined by
// calling {@link Parser//getPrecedence}).
//
ParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {
	var config;
	var statesFromAlt1 = [];
    var configSet = new ATNConfigSet(configs.fullCtx);
    for(var i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        // handle alt 1 first
        if (config.alt !== 1) {
            continue;
        }
        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
        if (updatedContext===null) {
            // the configuration was eliminated
            continue;
        }
        statesFromAlt1[config.state.stateNumber] = config.context;
        if (updatedContext !== config.semanticContext) {
            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
        } else {
            configSet.add(config, this.mergeCache);
        }
    }
    for(i=0; i<configs.items.length; i++) {
        config = configs.items[i];
        if (config.alt === 1) {
            // already handled
            continue;
        }
        // In the future, this elimination step could be updated to also
        // filter the prediction context for alternatives predicting alt>1
        // (basically a graph subtraction algorithm).
		if (!config.precedenceFilterSuppressed) {
            var context = statesFromAlt1[config.state.stateNumber] || null;
            if (context!==null && context.equals(config.context)) {
                // eliminated
                continue;
            }
		}
        configSet.add(config, this.mergeCache);
    }
    return configSet;
};

ParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {
    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
        return trans.target;
    } else {
        return null;
    }
};

ParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {
    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
    // altToPred starts as an array of all null contexts. The entry at index i
    // corresponds to alternative i. altToPred[i] may have one of three values:
    //   1. null: no ATNConfig c is found such that c.alt==i
    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
    //      alt i has at least one unpredicated config.
    //   3. Non-NONE Semantic Context: There exists at least one, and for all
    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
    //
    // From this, it is clear that NONE||anything==NONE.
    //
    var altToPred = [];
    for(var i=0;i<configs.items.length;i++) {
        var c = configs.items[i];
        if(ambigAlts.contains( c.alt )) {
            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
        }
    }
    var nPredAlts = 0;
    for (i =1;i< nalts+1;i++) {
        var pred = altToPred[i] || null;
        if (pred===null) {
            altToPred[i] = SemanticContext.NONE;
        } else if (pred !== SemanticContext.NONE) {
            nPredAlts += 1;
        }
    }
    // nonambig alts are null in altToPred
    if (nPredAlts===0) {
        altToPred = null;
    }
    if (this.debug) {
        console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
    }
    return altToPred;
};

ParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {
    var pairs = [];
    var containsPredicate = false;
    for (var i=1; i<altToPred.length;i++) {
        var pred = altToPred[i];
        // unpredicated is indicated by SemanticContext.NONE
        if( ambigAlts!==null && ambigAlts.contains( i )) {
            pairs.push(new PredPrediction(pred, i));
        }
        if (pred !== SemanticContext.NONE) {
            containsPredicate = true;
        }
    }
    if (! containsPredicate) {
        return null;
    }
    return pairs;
};

//
// This method is used to improve the localization of error messages by
// choosing an alternative rather than throwing a
// {@link NoViableAltException} in particular prediction scenarios where the
// {@link //ERROR} state was reached during ATN simulation.
//
// <p>
// The default implementation of this method uses the following
// algorithm to identify an ATN configuration which successfully parsed the
// decision entry rule. Choosing such an alternative ensures that the
// {@link ParserRuleContext} returned by the calling rule will be complete
// and valid, and the syntax error will be reported later at a more
// localized location.</p>
//
// <ul>
// <li>If a syntactically valid path or paths reach the end of the decision rule and
// they are semantically valid if predicated, return the min associated alt.</li>
// <li>Else, if a semantically invalid but syntactically valid path exist
// or paths exist, return the minimum associated alt.
// </li>
// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
// </ul>
//
// <p>
// In some scenarios, the algorithm described above could predict an
// alternative which will result in a {@link FailedPredicateException} in
// the parser. Specifically, this could occur if the <em>only</em> configuration
// capable of successfully parsing to the end of the decision rule is
// blocked by a semantic predicate. By choosing this alternative within
// {@link //adaptivePredict} instead of throwing a
// {@link NoViableAltException}, the resulting
// {@link FailedPredicateException} in the parser will identify the specific
// predicate which is preventing the parser from successfully parsing the
// decision rule, which helps developers identify and correct logic errors
// in semantic predicates.
// </p>
//
// @param configs The ATN configurations which were valid immediately before
// the {@link //ERROR} state was reached
// @param outerContext The is the \gamma_0 initial parser context from the paper
// or the parser stack at the instant before prediction commences.
//
// @return The value to return from {@link //adaptivePredict}, or
// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
// identified and {@link //adaptivePredict} should report an error instead.
//
ParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {
    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
    var semValidConfigs = cfgs[0];
    var semInvalidConfigs = cfgs[1];
    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
        return alt;
    }
    // Is there a syntactically valid path with a failed pred?
    if (semInvalidConfigs.items.length>0) {
        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
            return alt;
        }
    }
    return ATN.INVALID_ALT_NUMBER;
};

ParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {
    var alts = [];
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
            if(alts.indexOf(c.alt)<0) {
                alts.push(c.alt);
            }
        }
    }
    if (alts.length===0) {
        return ATN.INVALID_ALT_NUMBER;
    } else {
        return Math.min.apply(null, alts);
    }
};
// Walk the list of configurations and split them according to
//  those that have preds evaluating to true/false.  If no pred, assume
//  true pred and include in succeeded set.  Returns Pair of sets.
//
//  Create a new set so as not to alter the incoming parameter.
//
//  Assumption: the input stream has been restored to the starting point
//  prediction, which is where predicates need to evaluate.
//
ParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {
    var succeeded = new ATNConfigSet(configs.fullCtx);
    var failed = new ATNConfigSet(configs.fullCtx);
    for(var i=0;i<configs.items.length; i++) {
        var c = configs.items[i];
        if (c.semanticContext !== SemanticContext.NONE) {
            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
            if (predicateEvaluationResult) {
                succeeded.add(c);
            } else {
                failed.add(c);
            }
        } else {
            succeeded.add(c);
        }
    }
    return [succeeded, failed];
};

// Look through a list of predicate/alt pairs, returning alts for the
//  pairs that win. A {@code NONE} predicate indicates an alt containing an
//  unpredicated config which behaves as "always true." If !complete
//  then we stop at the first predicate that evaluates to true. This
//  includes pairs with null predicates.
//
ParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {
    var predictions = new BitSet();
    for(var i=0;i<predPredictions.length;i++) {
    	var pair = predPredictions[i];
        if (pair.pred === SemanticContext.NONE) {
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
            continue;
        }
        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
        if (this.debug || this.dfa_debug) {
            console.log("eval pred " + pair + "=" + predicateEvaluationResult);
        }
        if (predicateEvaluationResult) {
            if (this.debug || this.dfa_debug) {
                console.log("PREDICT " + pair.alt);
            }
            predictions.add(pair.alt);
            if (! complete) {
                break;
            }
        }
    }
    return predictions;
};

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//

ParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
    var initialDepth = 0;
    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                             fullCtx, initialDepth, treatEofAsEpsilon);
};


ParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    if (this.debug || this.debug_closure) {
        console.log("closure(" + config.toString(this.parser,true) + ")");
        // console.log("configs(" + configs.toString() + ")");
        if(config.reachesIntoOuterContext>50) {
            throw "problem";
        }
    }
    if (config.state instanceof RuleStopState) {
        // We hit rule end. If we have context info, use it
        // run thru all possible stack tops in ctx
        if (! config.context.isEmpty()) {
            for ( var i =0; i<config.context.length; i++) {
                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                    if (fullCtx) {
                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                        continue;
                    } else {
                        // we have no context info, just chase follow links (if greedy)
                        if (this.debug) {
                            console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                        }
                        this.closure_(config, configs, closureBusy, collectPredicates,
                                 fullCtx, depth, treatEofAsEpsilon);
                    }
                    continue;
                }
                var returnState = this.atn.states[config.context.getReturnState(i)];
                var newContext = config.context.getParent(i); // "pop" return state
                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                var c = new ATNConfig(parms, null);
                // While we have context to pop back from, we may have
                // gotten that context AFTER having falling off a rule.
                // Make sure we track that we are now out of context.
                c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
            }
            return;
        } else if( fullCtx) {
            // reached end of start rule
            configs.add(config, this.mergeCache);
            return;
        } else {
            // else if we have no context info, just chase follow links (if greedy)
            if (this.debug) {
                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
            }
        }
    }
    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
};


// Do the actual work of walking epsilon edges//
ParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
    var p = config.state;
    // optimization
    if (! p.epsilonOnlyTransitions) {
        configs.add(config, this.mergeCache);
        // make sure to not return here, because EOF transitions can act as
        // both epsilon transitions and non-epsilon transitions.
    }
    for(var i = 0;i<p.transitions.length; i++) {
        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
            continue;

        var t = p.transitions[i];
        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);
        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
        if (c!==null) {
            var newDepth = depth;
            if ( config.state instanceof RuleStopState) {
                // target fell off end of rule; mark resulting c as having dipped into outer context
                // We can't get here if incoming config was rule stop and we had context
                // track how far we dip into outer context.  Might
                // come in handy and we avoid evaluating context dependent
                // preds if this is > 0.
				if (this._dfa !== null && this._dfa.precedenceDfa) {
					if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
						c.precedenceFilterSuppressed = true;
					}
				}

                c.reachesIntoOuterContext += 1;
                if (closureBusy.add(c)!==c) {
                    // avoid infinite recursion for right-recursive rules
                    continue;
                }
                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                newDepth -= 1;
                if (this.debug) {
                    console.log("dips into outer ctx: " + c);
                }
            } else {
                if (!t.isEpsilon && closureBusy.add(c)!==c){
                    // avoid infinite recursion for EOF* and EOF+
                    continue;
                }
                if (t instanceof RuleTransition) {
                    // latch when newDepth goes negative - once we step out of the entry context we can't return
                    if (newDepth >= 0) {
                        newDepth += 1;
                    }
                }
            }
            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
        }
    }
};


ParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {
    // return False
    var p = config.state;
    // First check to see if we are in StarLoopEntryState generated during
    // left-recursion elimination. For efficiency, also check if
    // the context has an empty stack case. If so, it would mean
    // global FOLLOW so we can't perform optimization
    // Are we the special loop entry/exit state? or SLL wildcard
    if(p.stateType != ATNState.STAR_LOOP_ENTRY)
        return false;
    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
           config.context.isEmpty() || config.context.hasEmptyPath())
        return false;

    // Require all return states to return back to the same rule that p is in.
    var numCtxs = config.context.length;
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnState = this.atn.states[config.context.getReturnState(i)];
        if (returnState.ruleIndex != p.ruleIndex)
            return false;
    }

    var decisionStartState = p.transitions[0].target;
    var blockEndStateNum = decisionStartState.endState.stateNumber;
    var blockEndState = this.atn.states[blockEndStateNum];

    // Verify that the top of each stack context leads to loop entry/exit
    // state through epsilon edges and w/o leaving rule.
    for(var i=0; i<numCtxs; i++) { // for each stack context
        var returnStateNumber = config.context.getReturnState(i);
        var returnState = this.atn.states[returnStateNumber];
        // all states must have single outgoing epsilon edge
        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
            return false;

        // Look for prefix op case like 'not expr', (' type ')' expr
        var returnStateTarget = returnState.transitions[0].target;
        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
            continue;

        // Look for 'expr op expr' or case where expr's return state is block end
        // of (...)* internal block; the block end points to loop back
        // which points to p but we don't need to check that
        if ( returnState == blockEndState )
            continue;

        // Look for ternary expr ? expr : expr. The return state points at block end,
        // which points at loop entry state
        if ( returnStateTarget == blockEndState )
            continue;

        // Look for complex prefix 'between expr and expr' case where 2nd expr's
        // return state points at block end state of (...)* internal block
        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
            continue;

        // anything else ain't conforming
        return false;
    }
    return true;
};


ParserATNSimulator.prototype.getRuleName = function( index) {
    if (this.parser!==null && index>=0) {
        return this.parser.ruleNames[index];
    } else {
        return "<rule " + index + ">";
    }
};

ParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
    switch(t.serializationType) {
    case Transition.RULE:
        return this.ruleTransition(config, t);
    case Transition.PRECEDENCE:
        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.PREDICATE:
        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
    case Transition.ACTION:
        return this.actionTransition(config, t);
    case Transition.EPSILON:
        return new ATNConfig({state:t.target}, config);
    case Transition.ATOM:
    case Transition.RANGE:
    case Transition.SET:
        // EOF transitions act like epsilon transitions after the first EOF
        // transition is traversed
        if (treatEofAsEpsilon) {
            if (t.matches(Token.EOF, 0, 1)) {
                return new ATNConfig({state: t.target}, config);
            }
        }
        return null;
    default:
    	return null;
    }
};

ParserATNSimulator.prototype.actionTransition = function(config, t) {
    if (this.debug) {
        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;
        console.log("ACTION edge " + t.ruleIndex + ":" + index);
    }
    return new ATNConfig({state:t.target}, config);
};

ParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                pt.precedence + ">=_p, ctx dependent=true");
        if (this.parser!==null) {
        	console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && inContext) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {
    if (this.debug) {
        console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
        if (this.parser!==null) {
            console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
        }
    }
    var c = null;
    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
        if (fullCtx) {
            // In full context mode, we can evaluate predicates on-the-fly
            // during closure, which dramatically reduces the size of
            // the config sets. It also obviates the need to test predicates
            // later during conflict resolution.
            var currentPosition = this._input.index;
            this._input.seek(this._startIndex);
            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
            this._input.seek(currentPosition);
            if (predSucceeds) {
                c = new ATNConfig({state:pt.target}, config); // no pred context
            }
        } else {
            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
        }
    } else {
        c = new ATNConfig({state:pt.target}, config);
    }
    if (this.debug) {
        console.log("config from pred transition=" + c);
    }
    return c;
};

ParserATNSimulator.prototype.ruleTransition = function(config, t) {
    if (this.debug) {
        console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
    }
    var returnState = t.followState;
    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
    return new ATNConfig({state:t.target, context:newContext}, config );
};

ParserATNSimulator.prototype.getConflictingAlts = function(configs) {
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.getAlts(altsets);
};

 // Sam pointed out a problem with the previous definition, v3, of
 // ambiguous states. If we have another state associated with conflicting
 // alternatives, we should keep going. For example, the following grammar
 //
 // s : (ID | ID ID?) ';' ;
 //
 // When the ATN simulation reaches the state before ';', it has a DFA
 // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
 // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
 // because alternative to has another way to continue, via [6|2|[]].
 // The key is that we have a single state that has config's only associated
 // with a single alternative, 2, and crucially the state transitions
 // among the configurations are all non-epsilon transitions. That means
 // we don't consider any conflicts that include alternative 2. So, we
 // ignore the conflict between alts 1 and 2. We ignore a set of
 // conflicting alts when there is an intersection with an alternative
 // associated with a single alt state in the state&rarr;config-list map.
 //
 // It's also the case that we might have two conflicting configurations but
 // also a 3rd nonconflicting configuration for a different alternative:
 // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
 //
 // a : A | A | A B ;
 //
 // After matching input A, we reach the stop state for rule A, state 1.
 // State 8 is the state right before B. Clearly alternatives 1 and 2
 // conflict and no amount of further lookahead will separate the two.
 // However, alternative 3 will be able to continue and so we do not
 // stop working on this state. In the previous example, we're concerned
 // with states associated with the conflicting alternatives. Here alt
 // 3 is not associated with the conflicting configs, but since we can continue
 // looking for input reasonably, I don't declare the state done. We
 // ignore a set of conflicting alts when we have an alternative
 // that we still need to pursue.
//

ParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {
    var conflictingAlts = null;
    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
        conflictingAlts = new BitSet();
        conflictingAlts.add(configs.uniqueAlt);
    } else {
        conflictingAlts = configs.conflictingAlts;
    }
    return conflictingAlts;
};

ParserATNSimulator.prototype.getTokenName = function( t) {
    if (t===Token.EOF) {
        return "EOF";
    }
    if( this.parser!==null && this.parser.literalNames!==null) {
        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
            console.log("" + t + " ttype out of range: " + this.parser.literalNames);
            console.log("" + this.parser.getInputStream().getTokens());
        } else {
            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
            return name + "<" + t + ">";
        }
    }
    return "" + t;
};

ParserATNSimulator.prototype.getLookaheadName = function(input) {
    return this.getTokenName(input.LA(1));
};

// Used for debugging in adaptivePredict around execATN but I cut
//  it out for clarity now that alg. works well. We can leave this
//  "dead" code for a bit.
//
ParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {
    console.log("dead end configs: ");
    var decs = nvae.getDeadEndConfigs();
    for(var i=0; i<decs.length; i++) {
    	var c = decs[i];
        var trans = "no edges";
        if (c.state.transitions.length>0) {
            var t = c.state.transitions[0];
            if (t instanceof AtomTransition) {
                trans = "Atom "+ this.getTokenName(t.label);
            } else if (t instanceof SetTransition) {
                var neg = (t instanceof NotSetTransition);
                trans = (neg ? "~" : "") + "Set " + t.set;
            }
        }
        console.error(c.toString(this.parser, true) + ":" + trans);
    }
};

ParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {
    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
};

ParserATNSimulator.prototype.getUniqueAlt = function(configs) {
    var alt = ATN.INVALID_ALT_NUMBER;
    for(var i=0;i<configs.items.length;i++) {
    	var c = configs.items[i];
        if (alt === ATN.INVALID_ALT_NUMBER) {
            alt = c.alt // found first alt
        } else if( c.alt!==alt) {
            return ATN.INVALID_ALT_NUMBER;
        }
    }
    return alt;
};

//
// Add an edge to the DFA, if possible. This method calls
// {@link //addDFAState} to ensure the {@code to} state is present in the
// DFA. If {@code from} is {@code null}, or if {@code t} is outside the
// range of edges that can be represented in the DFA tables, this method
// returns without adding the edge to the DFA.
//
// <p>If {@code to} is {@code null}, this method returns {@code null}.
// Otherwise, this method returns the {@link DFAState} returned by calling
// {@link //addDFAState} for the {@code to} state.</p>
//
// @param dfa The DFA
// @param from The source state for the edge
// @param t The input symbol
// @param to The target state for the edge
//
// @return If {@code to} is {@code null}, this method returns {@code null};
// otherwise this method returns the result of calling {@link //addDFAState}
// on {@code to}
//
ParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {
    if( this.debug) {
        console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
    }
    if (to===null) {
        return null;
    }
    to = this.addDFAState(dfa, to); // used existing if possible not incoming
    if (from_===null || t < -1 || t > this.atn.maxTokenType) {
        return to;
    }
    if (from_.edges===null) {
        from_.edges = [];
    }
    from_.edges[t+1] = to; // connect

    if (this.debug) {
        var literalNames = this.parser===null ? null : this.parser.literalNames;
        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
        console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
    }
    return to;
};
//
// Add state {@code D} to the DFA if it is not already present, and return
// the actual instance stored in the DFA. If a state equivalent to {@code D}
// is already in the DFA, the existing state is returned. Otherwise this
// method returns {@code D} after adding it to the DFA.
//
// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
// does not change the DFA.</p>
//
// @param dfa The dfa
// @param D The DFA state to add
// @return The state stored in the DFA. This will be either the existing
// state if {@code D} is already in the DFA, or {@code D} itself if the
// state was not already present.
//
ParserATNSimulator.prototype.addDFAState = function(dfa, D) {
    if (D == ATNSimulator.ERROR) {
        return D;
    }
    var existing = dfa.states.get(D);
    if(existing!==null) {
        return existing;
    }
    D.stateNumber = dfa.states.length;
    if (! D.configs.readOnly) {
        D.configs.optimizeConfigs(this);
        D.configs.setReadonly(true);
    }
    dfa.states.add(D);
    if (this.debug) {
        console.log("adding new DFA state: " + D);
    }
    return D;
};

ParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
    }
};

ParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
    }
};

// If context sensitive parsing, we know it's ambiguity not conflict//
ParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,
                               exact, ambigAlts, configs ) {
    if (this.debug || this.retry_debug) {
        var interval = new Interval(startIndex, stopIndex + 1);
        console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                           ", input=" + this.parser.getTokenStream().getText(interval));
    }
    if (this.parser!==null) {
        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
    }
};

exports.ParserATNSimulator = ParserATNSimulator;

/***/ }),

/***/ "./node_modules/antlr4/atn/PredictionMode.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/atn/PredictionMode.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//
//
// This enumeration defines the prediction modes available in ANTLR 4 along with
// utility methods for analyzing configuration sets for conflicts and/or
// ambiguities.

var Set = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Set;
var Map = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Map;
var BitSet = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").BitSet;
var AltDict = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").AltDict;
var ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
var RuleStopState = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/atn/ATNState.js").RuleStopState;
var ATNConfigSet = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var ATNConfig = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/atn/ATNConfig.js").ATNConfig;
var SemanticContext = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").SemanticContext;
var Hash = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/Utils.js").Hash;
var hashStuff = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").hashStuff;
var equalArrays = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").equalArrays;

function PredictionMode() {
	return this;
}

//
// The SLL(*) prediction mode. This prediction mode ignores the current
// parser context when making predictions. This is the fastest prediction
// mode, and provides correct results for many grammars. This prediction
// mode is more powerful than the prediction mode provided by ANTLR 3, but
// may result in syntax errors for grammar and input combinations which are
// not SLL.
//
// <p>
// When using this prediction mode, the parser will either return a correct
// parse tree (i.e. the same parse tree that would be returned with the
// {@link //LL} prediction mode), or it will report a syntax error. If a
// syntax error is encountered when using the {@link //SLL} prediction mode,
// it may be due to either an actual syntax error in the input or indicate
// that the particular combination of grammar and input requires the more
// powerful {@link //LL} prediction abilities to complete successfully.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.SLL = 0;
//
// The LL(*) prediction mode. This prediction mode allows the current parser
// context to be used for resolving SLL conflicts that occur during
// prediction. This is the fastest prediction mode that guarantees correct
// parse results for all combinations of grammars with syntactically correct
// inputs.
//
// <p>
// When using this prediction mode, the parser will make correct decisions
// for all syntactically-correct grammar and input combinations. However, in
// cases where the grammar is truly ambiguous this prediction mode might not
// report a precise answer for <em>exactly which</em> alternatives are
// ambiguous.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL = 1;
//
// The LL(*) prediction mode with exact ambiguity detection. In addition to
// the correctness guarantees provided by the {@link //LL} prediction mode,
// this prediction mode instructs the prediction algorithm to determine the
// complete and exact set of ambiguous alternatives for every ambiguous
// decision encountered while parsing.
//
// <p>
// This prediction mode may be used for diagnosing ambiguities during
// grammar development. Due to the performance overhead of calculating sets
// of ambiguous alternatives, this prediction mode should be avoided when
// the exact results are not necessary.</p>
//
// <p>
// This prediction mode does not provide any guarantees for prediction
// behavior for syntactically-incorrect inputs.</p>
//
PredictionMode.LL_EXACT_AMBIG_DETECTION = 2;


//
// Computes the SLL prediction termination condition.
//
// <p>
// This method computes the SLL prediction termination condition for both of
// the following cases.</p>
//
// <ul>
// <li>The usual SLL+LL fallback upon SLL conflict</li>
// <li>Pure SLL without LL fallback</li>
// </ul>
//
// <p><strong>COMBINED SLL+LL PARSING</strong></p>
//
// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
// ensured regardless of how the termination condition is computed by this
// method. Due to the substantially higher cost of LL prediction, the
// prediction should only fall back to LL when the additional lookahead
// cannot lead to a unique SLL prediction.</p>
//
// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
// conflicting subsets should fall back to full LL, even if the
// configuration sets don't resolve to the same alternative (e.g.
// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
// configuration, SLL could continue with the hopes that more lookahead will
// resolve via one of those non-conflicting configurations.</p>
//
// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
// stops when it sees only conflicting configuration subsets. In contrast,
// full LL keeps going when there is uncertainty.</p>
//
// <p><strong>HEURISTIC</strong></p>
//
// <p>As a heuristic, we stop prediction when we see any conflicting subset
// unless we see a state that only has one alternative associated with it.
// The single-alt-state thing lets prediction continue upon rules like
// (otherwise, it would admit defeat too soon):</p>
//
// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
//
// <p>When the ATN simulation reaches the state before {@code ';'}, it has a
// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
// processing this node because alternative to has another way to continue,
// via {@code [6|2|[]]}.</p>
//
// <p>It also let's us continue for this rule:</p>
//
// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
//
// <p>After matching input A, we reach the stop state for rule A, state 1.
// State 8 is the state right before B. Clearly alternatives 1 and 2
// conflict and no amount of further lookahead will separate the two.
// However, alternative 3 will be able to continue and so we do not stop
// working on this state. In the previous example, we're concerned with
// states associated with the conflicting alternatives. Here alt 3 is not
// associated with the conflicting configs, but since we can continue
// looking for input reasonably, don't declare the state done.</p>
//
// <p><strong>PURE SLL PARSING</strong></p>
//
// <p>To handle pure SLL parsing, all we have to do is make sure that we
// combine stack contexts for configurations that differ only by semantic
// predicate. From there, we can do the usual SLL termination heuristic.</p>
//
// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
//
// <p>SLL decisions don't evaluate predicates until after they reach DFA stop
// states because they need to create the DFA cache that works in all
// semantic situations. In contrast, full LL evaluates predicates collected
// during start state computation so it can ignore predicates thereafter.
// This means that SLL termination detection can totally ignore semantic
// predicates.</p>
//
// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
// semantic predicate contexts so we might see two configurations like the
// following.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
//
// <p>Before testing these configurations against others, we have to merge
// {@code x} and {@code x'} (without modifying the existing configurations).
// For example, we test {@code (x+x')==x''} when looking for conflicts in
// the following configurations.</p>
//
// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
//
// <p>If the configuration set has predicates (as indicated by
// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
// the configurations to strip out all of the predicates so that a standard
// {@link ATNConfigSet} will merge everything ignoring predicates.</p>
//
PredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {
    // Configs in rule stop states indicate reaching the end of the decision
    // rule (local context) or end of start rule (full context). If all
    // configs meet this condition, then none of the configurations is able
    // to match additional input so we terminate prediction.
    //
    if (PredictionMode.allConfigsInRuleStopStates(configs)) {
        return true;
    }
    // pure SLL mode parsing
    if (mode === PredictionMode.SLL) {
        // Don't bother with combining configs from different semantic
        // contexts if we can fail over to full LL; costs more time
        // since we'll often fail over anyway.
        if (configs.hasSemanticContext) {
            // dup configs, tossing out semantic predicates
            var dup = new ATNConfigSet();
            for(var i=0;i<configs.items.length;i++) {
            	var c = configs.items[i];
                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                dup.add(c);
            }
            configs = dup;
        }
        // now we have combined contexts for configs with dissimilar preds
    }
    // pure SLL or combined SLL+LL mode parsing
    var altsets = PredictionMode.getConflictingAltSubsets(configs);
    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
};

// Checks if any configuration in {@code configs} is in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if any configuration in {@code configs} is in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.hasConfigInRuleStopState = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (c.state instanceof RuleStopState) {
            return true;
        }
	}
    return false;
};

// Checks if all configurations in {@code configs} are in a
// {@link RuleStopState}. Configurations meeting this condition have reached
// the end of the decision rule (local context) or end of start rule (full
// context).
//
// @param configs the configuration set to test
// @return {@code true} if all configurations in {@code configs} are in a
// {@link RuleStopState}, otherwise {@code false}
PredictionMode.allConfigsInRuleStopStates = function(configs) {
	for(var i=0;i<configs.items.length;i++) {
		var c = configs.items[i];
        if (!(c.state instanceof RuleStopState)) {
            return false;
        }
	}
    return true;
};

//
// Full LL prediction termination.
//
// <p>Can we stop looking ahead during ATN simulation or is there some
// uncertainty as to which alternative we will ultimately pick, after
// consuming more input? Even if there are partial conflicts, we might know
// that everything is going to resolve to the same minimum alternative. That
// means we can stop since no more lookahead will change that fact. On the
// other hand, there might be multiple conflicts that resolve to different
// minimums. That means we need more look ahead to decide which of those
// alternatives we should predict.</p>
//
// <p>The basic idea is to split the set of configurations {@code C}, into
// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
// non-conflicting configurations. Two configurations conflict if they have
// identical {@link ATNConfig//state} and {@link ATNConfig//context} values
// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
//
// <p>Reduce these configuration subsets to the set of possible alternatives.
// You can compute the alternative subsets in one pass as follows:</p>
//
// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
// {@code C} holding {@code s} and {@code ctx} fixed.</p>
//
// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>
//
// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
//
// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
// {@code s} and {@code ctx}.</p>
//
// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
// the union of these alternative subsets is a singleton, then no amount of
// more lookahead will help us. We will always pick that alternative. If,
// however, there is more than one alternative, then we are uncertain which
// alternative to predict and must continue looking for resolution. We may
// or may not discover an ambiguity in the future, even if there are no
// conflicting subsets this round.</p>
//
// <p>The biggest sin is to terminate early because it means we've made a
// decision but were uncertain as to the eventual outcome. We haven't used
// enough lookahead. On the other hand, announcing a conflict too late is no
// big deal; you will still have the conflict. It's just inefficient. It
// might even look until the end of file.</p>
//
// <p>No special consideration for semantic predicates is required because
// predicates are evaluated on-the-fly for full LL prediction, ensuring that
// no configuration contains a semantic context during the termination
// check.</p>
//
// <p><strong>CONFLICTING CONFIGS</strong></p>
//
// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
// when {@code i!=j} but {@code x=x'}. Because we merge all
// {@code (s, i, _)} configurations together, that means that there are at
// most {@code n} configurations associated with state {@code s} for
// {@code n} possible alternatives in the decision. The merged stacks
// complicate the comparison of configuration contexts {@code x} and
// {@code x'}. Sam checks to see if one is a subset of the other by calling
// merge and checking to see if the merged result is either {@code x} or
// {@code x'}. If the {@code x} associated with lowest alternative {@code i}
// is the superset, then {@code i} is the only possible prediction since the
// others resolve to {@code min(i)} as well. However, if {@code x} is
// associated with {@code j>i} then at least one stack configuration for
// {@code j} is not in conflict with alternative {@code i}. The algorithm
// should keep going, looking for more lookahead due to the uncertainty.</p>
//
// <p>For simplicity, I'm doing a equality check between {@code x} and
// {@code x'} that lets the algorithm continue to consume lookahead longer
// than necessary. The reason I like the equality is of course the
// simplicity but also because that is the test you need to detect the
// alternatives that are actually in conflict.</p>
//
// <p><strong>CONTINUE/STOP RULE</strong></p>
//
// <p>Continue if union of resolved alternative sets from non-conflicting and
// conflicting alternative subsets has more than one alternative. We are
// uncertain about which alternative to predict.</p>
//
// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
// alternatives are still in the running for the amount of input we've
// consumed at this point. The conflicting sets let us to strip away
// configurations that won't lead to more states because we resolve
// conflicts to the configuration with a minimum alternate for the
// conflicting set.</p>
//
// <p><strong>CASES</strong></p>
//
// <ul>
//
// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
//
// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1,3}} =&gt; continue
// </li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
// {@code {1}} =&gt; stop and predict 1</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
// ambiguity {@code {1,2}}</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {2}} = {@code {1,2}} =&gt; continue</li>
//
// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
// {@code {3}} = {@code {1,3}} =&gt; continue</li>
//
// </ul>
//
// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
//
// <p>If all states report the same conflicting set of alternatives, then we
// know we have the exact ambiguity set.</p>
//
// <p><code>|A_<em>i</em>|&gt;1</code> and
// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
//
// <p>In other words, we continue examining lookahead until all {@code A_i}
// have more than one alternative and all {@code A_i} are the same. If
// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
// because the resolved set is {@code {1}}. To determine what the real
// ambiguity is, we have to know whether the ambiguity is between one and
// two or one and three so we keep going. We can only stop prediction when
// we need exact ambiguity detection when the sets look like
// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
//
PredictionMode.resolvesToJustOneViableAlt = function(altsets) {
    return PredictionMode.getSingleViableAlt(altsets);
};

//
// Determines if every alternative subset in {@code altsets} contains more
// than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every {@link BitSet} in {@code altsets} has
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.allSubsetsConflict = function(altsets) {
    return ! PredictionMode.hasNonConflictingAltSet(altsets);
};
//
// Determines if any single alternative subset in {@code altsets} contains
// exactly one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
//
PredictionMode.hasNonConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length===1) {
            return true;
        }
	}
    return false;
};

//
// Determines if any single alternative subset in {@code altsets} contains
// more than one alternative.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if {@code altsets} contains a {@link BitSet} with
// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
//
PredictionMode.hasConflictingAltSet = function(altsets) {
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (alts.length>1) {
            return true;
        }
	}
    return false;
};

//
// Determines if every alternative subset in {@code altsets} is equivalent.
//
// @param altsets a collection of alternative subsets
// @return {@code true} if every member of {@code altsets} is equal to the
// others, otherwise {@code false}
//
PredictionMode.allSubsetsEqual = function(altsets) {
    var first = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        if (first === null) {
            first = alts;
        } else if (alts!==first) {
            return false;
        }
	}
    return true;
};

//
// Returns the unique alternative predicted by all alternative subsets in
// {@code altsets}. If no such alternative exists, this method returns
// {@link ATN//INVALID_ALT_NUMBER}.
//
// @param altsets a collection of alternative subsets
//
PredictionMode.getUniqueAlt = function(altsets) {
    var all = PredictionMode.getAlts(altsets);
    if (all.length===1) {
        return all.minValue();
    } else {
        return ATN.INVALID_ALT_NUMBER;
    }
};

// Gets the complete set of represented alternatives for a collection of
// alternative subsets. This method returns the union of each {@link BitSet}
// in {@code altsets}.
//
// @param altsets a collection of alternative subsets
// @return the set of represented alternatives in {@code altsets}
//
PredictionMode.getAlts = function(altsets) {
    var all = new BitSet();
    altsets.map( function(alts) { all.or(alts); });
    return all;
};

//
// This function gets the conflicting alt subsets from a configuration set.
// For each configuration {@code c} in {@code configs}:
//
// <pre>
// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
// alt and not pred
// </pre>

PredictionMode.getConflictingAltSubsets = function(configs) {
    var configToAlts = new Map();
    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
    configs.items.map(function(cfg) {
        var alts = configToAlts.get(cfg);
        if (alts === null) {
            alts = new BitSet();
            configToAlts.put(cfg, alts);
        }
        alts.add(cfg.alt);
	});
    return configToAlts.getValues();
};

//
// Get a map from state to alt subset from a configuration set. For each
// configuration {@code c} in {@code configs}:
//
// <pre>
// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
// </pre>
//
PredictionMode.getStateToAltMap = function(configs) {
    var m = new AltDict();
    configs.items.map(function(c) {
        var alts = m.get(c.state);
        if (alts === null) {
            alts = new BitSet();
            m.put(c.state, alts);
        }
        alts.add(c.alt);
    });
    return m;
};

PredictionMode.hasStateAssociatedWithOneAlt = function(configs) {
    var values = PredictionMode.getStateToAltMap(configs).values();
    for(var i=0;i<values.length;i++) {
        if (values[i].length===1) {
            return true;
        }
    }
    return false;
};

PredictionMode.getSingleViableAlt = function(altsets) {
    var result = null;
	for(var i=0;i<altsets.length;i++) {
		var alts = altsets[i];
        var minAlt = alts.minValue();
        if(result===null) {
            result = minAlt;
        } else if(result!==minAlt) { // more than 1 viable alt
            return ATN.INVALID_ALT_NUMBER;
        }
	}
    return result;
};

exports.PredictionMode = PredictionMode;


/***/ }),

/***/ "./node_modules/antlr4/atn/SemanticContext.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/atn/SemanticContext.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

// A tree structure used to record the semantic context in which
//  an ATN configuration is valid.  It's either a single predicate,
//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
//
//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
//  {@link SemanticContext} within the scope of this outer class.</p>
//

var Set = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Set;
var Hash = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").Hash;

function SemanticContext() {
	return this;
}

SemanticContext.prototype.hashCode = function() {
    var hash = new Hash();
    this.updateHashCode(hash);
    return hash.finish();
};

// For context independent predicates, we evaluate them without a local
// context (i.e., null context). That way, we can evaluate them without
// having to create proper rule-specific context during prediction (as
// opposed to the parser, which creates them naturally). In a practical
// sense, this avoids a cast exception from RuleContext to myruleContext.
//
// <p>For context dependent predicates, we must pass in a local context so that
// references such as $arg evaluate properly as _localctx.arg. We only
// capture context dependent predicates in the context in which we begin
// prediction, so we passed in the outer context here in case of context
// dependent predicate evaluation.</p>
//
SemanticContext.prototype.evaluate = function(parser, outerContext) {
};

//
// Evaluate the precedence predicates for the context and reduce the result.
//
// @param parser The parser instance.
// @param outerContext The current parser context object.
// @return The simplified semantic context after precedence predicates are
// evaluated, which will be one of the following values.
// <ul>
// <li>{@link //NONE}: if the predicate simplifies to {@code true} after
// precedence predicates are evaluated.</li>
// <li>{@code null}: if the predicate simplifies to {@code false} after
// precedence predicates are evaluated.</li>
// <li>{@code this}: if the semantic context is not changed as a result of
// precedence predicate evaluation.</li>
// <li>A non-{@code null} {@link SemanticContext}: the new simplified
// semantic context after precedence predicates are evaluated.</li>
// </ul>
//
SemanticContext.prototype.evalPrecedence = function(parser, outerContext) {
	return this;
};

SemanticContext.andContext = function(a, b) {
	if (a === null || a === SemanticContext.NONE) {
		return b;
	}
	if (b === null || b === SemanticContext.NONE) {
		return a;
	}
	var result = new AND(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

SemanticContext.orContext = function(a, b) {
	if (a === null) {
		return b;
	}
	if (b === null) {
		return a;
	}
	if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
		return SemanticContext.NONE;
	}
	var result = new OR(a, b);
	if (result.opnds.length === 1) {
		return result.opnds[0];
	} else {
		return result;
	}
};

function Predicate(ruleIndex, predIndex, isCtxDependent) {
	SemanticContext.call(this);
	this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
	this.predIndex = predIndex === undefined ? -1 : predIndex;
	this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	return this;
}

Predicate.prototype = Object.create(SemanticContext.prototype);
Predicate.prototype.constructor = Predicate;

//The default {@link SemanticContext}, which is semantically equivalent to
//a predicate of the form {@code {true}?}.
//
SemanticContext.NONE = new Predicate();


Predicate.prototype.evaluate = function(parser, outerContext) {
	var localctx = this.isCtxDependent ? outerContext : null;
	return parser.sempred(localctx, this.ruleIndex, this.predIndex);
};

Predicate.prototype.updateHashCode = function(hash) {
	hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

Predicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof Predicate)) {
		return false;
	} else {
		return this.ruleIndex === other.ruleIndex &&
				this.predIndex === other.predIndex &&
				this.isCtxDependent === other.isCtxDependent;
	}
};

Predicate.prototype.toString = function() {
	return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
};

function PrecedencePredicate(precedence) {
	SemanticContext.call(this);
	this.precedence = precedence === undefined ? 0 : precedence;
}

PrecedencePredicate.prototype = Object.create(SemanticContext.prototype);
PrecedencePredicate.prototype.constructor = PrecedencePredicate;

PrecedencePredicate.prototype.evaluate = function(parser, outerContext) {
	return parser.precpred(outerContext, this.precedence);
};

PrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {
	if (parser.precpred(outerContext, this.precedence)) {
		return SemanticContext.NONE;
	} else {
		return null;
	}
};

PrecedencePredicate.prototype.compareTo = function(other) {
	return this.precedence - other.precedence;
};

PrecedencePredicate.prototype.updateHashCode = function(hash) {
    hash.update(31);
};

PrecedencePredicate.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof PrecedencePredicate)) {
		return false;
	} else {
		return this.precedence === other.precedence;
	}
};

PrecedencePredicate.prototype.toString = function() {
	return "{"+this.precedence+">=prec}?";
};



PrecedencePredicate.filterPrecedencePredicates = function(set) {
	var result = [];
	set.values().map( function(context) {
		if (context instanceof PrecedencePredicate) {
			result.push(context);
		}
	});
	return result;
};


// A semantic context which is true whenever none of the contained contexts
// is false.
//
function AND(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof AND) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof AND) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}
	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the lowest precedence
		var reduced = null;
		precedencePredicates.map( function(p) {
			if(reduced===null || p.precedence<reduced.precedence) {
				reduced = p;
			}
		});
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

AND.prototype = Object.create(SemanticContext.prototype);
AND.prototype.constructor = AND;

AND.prototype.equals = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof AND)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

AND.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "AND");
};
//
// {@inheritDoc}
//
// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
AND.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (!this.opnds[i].evaluate(parser, outerContext)) {
			return false;
		}
	}
	return true;
};

AND.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === null) {
			// The AND context is false if any element is false
			return null;
		} else if (evaluated !== SemanticContext.NONE) {
			// Reduce the result by skipping true elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were true, so the AND context is true
		return SemanticContext.NONE;
	}
	var result = null;
	operands.map(function(o) {
		result = result === null ? o : SemanticContext.andContext(result, o);
	});
	return result;
};

AND.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "&& " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

//
// A semantic context which is true whenever at least one of the contained
// contexts is true.
//
function OR(a, b) {
	SemanticContext.call(this);
	var operands = new Set();
	if (a instanceof OR) {
		a.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(a);
	}
	if (b instanceof OR) {
		b.opnds.map(function(o) {
			operands.add(o);
		});
	} else {
		operands.add(b);
	}

	var precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
	if (precedencePredicates.length > 0) {
		// interested in the transition with the highest precedence
		var s = precedencePredicates.sort(function(a, b) {
			return a.compareTo(b);
		});
		var reduced = s[s.length-1];
		operands.add(reduced);
	}
	this.opnds = operands.values();
	return this;
}

OR.prototype = Object.create(SemanticContext.prototype);
OR.prototype.constructor = OR;

OR.prototype.constructor = function(other) {
	if (this === other) {
		return true;
	} else if (!(other instanceof OR)) {
		return false;
	} else {
		return this.opnds === other.opnds;
	}
};

OR.prototype.updateHashCode = function(hash) {
    hash.update(this.opnds, "OR");
};

// <p>
// The evaluation of predicates by this context is short-circuiting, but
// unordered.</p>
//
OR.prototype.evaluate = function(parser, outerContext) {
	for (var i = 0; i < this.opnds.length; i++) {
		if (this.opnds[i].evaluate(parser, outerContext)) {
			return true;
		}
	}
	return false;
};

OR.prototype.evalPrecedence = function(parser, outerContext) {
	var differs = false;
	var operands = [];
	for (var i = 0; i < this.opnds.length; i++) {
		var context = this.opnds[i];
		var evaluated = context.evalPrecedence(parser, outerContext);
		differs |= (evaluated !== context);
		if (evaluated === SemanticContext.NONE) {
			// The OR context is true if any element is true
			return SemanticContext.NONE;
		} else if (evaluated !== null) {
			// Reduce the result by skipping false elements
			operands.push(evaluated);
		}
	}
	if (!differs) {
		return this;
	}
	if (operands.length === 0) {
		// all elements were false, so the OR context is false
		return null;
	}
	var result = null;
	operands.map(function(o) {
		return result === null ? o : SemanticContext.orContext(result, o);
	});
	return result;
};

OR.prototype.toString = function() {
	var s = "";
	this.opnds.map(function(o) {
		s += "|| " + o.toString();
	});
	return s.length > 3 ? s.slice(3) : s;
};

exports.SemanticContext = SemanticContext;
exports.PrecedencePredicate = PrecedencePredicate;
exports.Predicate = Predicate;


/***/ }),

/***/ "./node_modules/antlr4/atn/Transition.js":
/*!***********************************************!*\
  !*** ./node_modules/antlr4/atn/Transition.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//  An ATN transition between any two ATN states.  Subclasses define
//  atom, set, epsilon, action, predicate, rule transitions.
//
//  <p>This is a one way link.  It emanates from a state (usually via a list of
//  transitions) and has a target state.</p>
//
//  <p>Since we never have to change the ATN transitions once we construct it,
//  we can fix these transitions as specific classes. The DFA transitions
//  on the other hand need to update the labels as it adds transitions to
//  the states. We'll use the term Edge for the DFA to distinguish them from
//  ATN transitions.</p>

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var IntervalSet = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;
var Predicate = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").Predicate;
var PrecedencePredicate = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/atn/SemanticContext.js").PrecedencePredicate;

function Transition (target) {
    // The target of this transition.
    if (target===undefined || target===null) {
        throw "target cannot be null.";
    }
    this.target = target;
    // Are we epsilon, action, sempred?
    this.isEpsilon = false;
    this.label = null;
    return this;
}
    // constants for serialization
Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
Transition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?
Transition.ATOM = 5;
Transition.ACTION = 6;
Transition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges
function AtomTransition(target, label) {
	Transition.call(this, target);
	this.label_ = label; // The token type or character value; or, signifies special label.
    this.label = this.makeLabel();
    this.serializationType = Transition.ATOM;
    return this;
}

AtomTransition.prototype = Object.create(Transition.prototype);
AtomTransition.prototype.constructor = AtomTransition;

AtomTransition.prototype.makeLabel = function() {
	var s = new IntervalSet();
    s.addOne(this.label_);
    return s;
};

AtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
    return this.label_ === symbol;
};

AtomTransition.prototype.toString = function() {
	return this.label_;
};

function RuleTransition(ruleStart, ruleIndex, precedence, followState) {
	Transition.call(this, ruleStart);
    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref
    this.precedence = precedence;
    this.followState = followState; // what node to begin computations following ref to rule
    this.serializationType = Transition.RULE;
    this.isEpsilon = true;
    return this;
}

RuleTransition.prototype = Object.create(Transition.prototype);
RuleTransition.prototype.constructor = RuleTransition;

RuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};


function EpsilonTransition(target, outermostPrecedenceReturn) {
	Transition.call(this, target);
    this.serializationType = Transition.EPSILON;
    this.isEpsilon = true;
    this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    return this;
}

EpsilonTransition.prototype = Object.create(Transition.prototype);
EpsilonTransition.prototype.constructor = EpsilonTransition;

EpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

EpsilonTransition.prototype.toString = function() {
	return "epsilon";
};

function RangeTransition(target, start, stop) {
	Transition.call(this, target);
	this.serializationType = Transition.RANGE;
    this.start = start;
    this.stop = stop;
    this.label = this.makeLabel();
    return this;
}

RangeTransition.prototype = Object.create(Transition.prototype);
RangeTransition.prototype.constructor = RangeTransition;

RangeTransition.prototype.makeLabel = function() {
    var s = new IntervalSet();
    s.addRange(this.start, this.stop);
    return s;
};

RangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= this.start && symbol <= this.stop;
};

RangeTransition.prototype.toString = function() {
	return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
};

function AbstractPredicateTransition(target) {
	Transition.call(this, target);
	return this;
}

AbstractPredicateTransition.prototype = Object.create(Transition.prototype);
AbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;

function PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PREDICATE;
    this.ruleIndex = ruleIndex;
    this.predIndex = predIndex;
    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

PredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PredicateTransition.prototype.constructor = PredicateTransition;

PredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PredicateTransition.prototype.getPredicate = function() {
	return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
};

PredicateTransition.prototype.toString = function() {
	return "pred_" + this.ruleIndex + ":" + this.predIndex;
};

function ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {
	Transition.call(this, target);
    this.serializationType = Transition.ACTION;
    this.ruleIndex = ruleIndex;
    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
    this.isEpsilon = true;
    return this;
}

ActionTransition.prototype = Object.create(Transition.prototype);
ActionTransition.prototype.constructor = ActionTransition;


ActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

ActionTransition.prototype.toString = function() {
	return "action_" + this.ruleIndex + ":" + this.actionIndex;
};


// A transition containing a set of values.
function SetTransition(target, set) {
	Transition.call(this, target);
	this.serializationType = Transition.SET;
    if (set !==undefined && set !==null) {
        this.label = set;
    } else {
        this.label = new IntervalSet();
        this.label.addOne(Token.INVALID_TYPE);
    }
    return this;
}

SetTransition.prototype = Object.create(Transition.prototype);
SetTransition.prototype.constructor = SetTransition;

SetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return this.label.contains(symbol);
};


SetTransition.prototype.toString = function() {
	return this.label.toString();
};

function NotSetTransition(target, set) {
	SetTransition.call(this, target, set);
	this.serializationType = Transition.NOT_SET;
	return this;
}

NotSetTransition.prototype = Object.create(SetTransition.prototype);
NotSetTransition.prototype.constructor = NotSetTransition;

NotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
			!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);
};

NotSetTransition.prototype.toString = function() {
	return '~' + SetTransition.prototype.toString.call(this);
};

function WildcardTransition(target) {
	Transition.call(this, target);
	this.serializationType = Transition.WILDCARD;
	return this;
}

WildcardTransition.prototype = Object.create(Transition.prototype);
WildcardTransition.prototype.constructor = WildcardTransition;


WildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
};

WildcardTransition.prototype.toString = function() {
	return ".";
};

function PrecedencePredicateTransition(target, precedence) {
	AbstractPredicateTransition.call(this, target);
    this.serializationType = Transition.PRECEDENCE;
    this.precedence = precedence;
    this.isEpsilon = true;
    return this;
}

PrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);
PrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;

PrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {
	return false;
};

PrecedencePredicateTransition.prototype.getPredicate = function() {
	return new PrecedencePredicate(this.precedence);
};

PrecedencePredicateTransition.prototype.toString = function() {
	return this.precedence + " >= _p";
};

exports.Transition = Transition;
exports.AtomTransition = AtomTransition;
exports.SetTransition = SetTransition;
exports.NotSetTransition = NotSetTransition;
exports.RuleTransition = RuleTransition;
exports.ActionTransition = ActionTransition;
exports.EpsilonTransition = EpsilonTransition;
exports.RangeTransition = RangeTransition;
exports.WildcardTransition = WildcardTransition;
exports.PredicateTransition = PredicateTransition;
exports.PrecedencePredicateTransition = PrecedencePredicateTransition;
exports.AbstractPredicateTransition = AbstractPredicateTransition;

/***/ }),

/***/ "./node_modules/antlr4/atn/index.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/atn/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/atn/ATN.js").ATN;
exports.ATNDeserializer = __webpack_require__(/*! ./ATNDeserializer */ "./node_modules/antlr4/atn/ATNDeserializer.js").ATNDeserializer;
exports.LexerATNSimulator = __webpack_require__(/*! ./LexerATNSimulator */ "./node_modules/antlr4/atn/LexerATNSimulator.js").LexerATNSimulator;
exports.ParserATNSimulator = __webpack_require__(/*! ./ParserATNSimulator */ "./node_modules/antlr4/atn/ParserATNSimulator.js").ParserATNSimulator;
exports.PredictionMode = __webpack_require__(/*! ./PredictionMode */ "./node_modules/antlr4/atn/PredictionMode.js").PredictionMode;


/***/ }),

/***/ "./node_modules/antlr4/dfa/DFA.js":
/*!****************************************!*\
  !*** ./node_modules/antlr4/dfa/DFA.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Set = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/Utils.js").Set;
var DFAState = __webpack_require__(/*! ./DFAState */ "./node_modules/antlr4/dfa/DFAState.js").DFAState;
var StarLoopEntryState = __webpack_require__(/*! ../atn/ATNState */ "./node_modules/antlr4/atn/ATNState.js").StarLoopEntryState;
var ATNConfigSet = __webpack_require__(/*! ./../atn/ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var DFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/dfa/DFASerializer.js").DFASerializer;
var LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/dfa/DFASerializer.js").LexerDFASerializer;



function DFA(atnStartState, decision) {
	if (decision === undefined) {
		decision = 0;
	}
	// From which ATN state did we create this DFA?
	this.atnStartState = atnStartState;
	this.decision = decision;
	// A set of all DFA states. Use {@link Map} so we can get old state back
	// ({@link Set} only allows you to see if it's there).
	this._states = new Set();
	this.s0 = null;
	// {@code true} if this DFA is for a precedence decision; otherwise,
	// {@code false}. This is the backing field for {@link //isPrecedenceDfa},
	// {@link //setPrecedenceDfa}.
	this.precedenceDfa = false;
    if (atnStartState instanceof StarLoopEntryState)
    {
        if (atnStartState.isPrecedenceDecision) {
            this.precedenceDfa = true;
            var precedenceState = new DFAState(null, new ATNConfigSet());
            precedenceState.edges = [];
            precedenceState.isAcceptState = false;
            precedenceState.requiresFullContext = false;
            this.s0 = precedenceState;
        }
    }
	return this;
}

// Get the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @return The start state corresponding to the specified precedence, or
// {@code null} if no start state exists for the specified precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()

DFA.prototype.getPrecedenceStartState = function(precedence) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	// s0.edges is never null for a precedence DFA
	if (precedence < 0 || precedence >= this.s0.edges.length) {
		return null;
	}
	return this.s0.edges[precedence] || null;
};

// Set the start state for a specific precedence value.
//
// @param precedence The current precedence.
// @param startState The start state corresponding to the specified
// precedence.
//
// @throws IllegalStateException if this is not a precedence DFA.
// @see //isPrecedenceDfa()
//
DFA.prototype.setPrecedenceStartState = function(precedence, startState) {
	if (!(this.precedenceDfa)) {
		throw ("Only precedence DFAs may contain a precedence start state.");
	}
	if (precedence < 0) {
		return;
	}

	// synchronization on s0 here is ok. when the DFA is turned into a
	// precedence DFA, s0 will be initialized once and not updated again
	// s0.edges is never null for a precedence DFA
	this.s0.edges[precedence] = startState;
};

//
// Sets whether this is a precedence DFA. If the specified value differs
// from the current DFA configuration, the following actions are taken;
// otherwise no changes are made to the current DFA.
//
// <ul>
// <li>The {@link //states} map is cleared</li>
// <li>If {@code precedenceDfa} is {@code false}, the initial state
// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
// store the start states for individual precedence values.</li>
// <li>The {@link //precedenceDfa} field is updated</li>
// </ul>
//
// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
// {@code false}

DFA.prototype.setPrecedenceDfa = function(precedenceDfa) {
	if (this.precedenceDfa!==precedenceDfa) {
		this._states = new DFAStatesSet();
		if (precedenceDfa) {
			var precedenceState = new DFAState(null, new ATNConfigSet());
			precedenceState.edges = [];
			precedenceState.isAcceptState = false;
			precedenceState.requiresFullContext = false;
			this.s0 = precedenceState;
		} else {
			this.s0 = null;
		}
		this.precedenceDfa = precedenceDfa;
	}
};

Object.defineProperty(DFA.prototype, "states", {
	get : function() {
		return this._states;
	}
});

// Return a list of all states in this DFA, ordered by state number.
DFA.prototype.sortedStates = function() {
	var list = this._states.values();
	return list.sort(function(a, b) {
		return a.stateNumber - b.stateNumber;
	});
};

DFA.prototype.toString = function(literalNames, symbolicNames) {
	literalNames = literalNames || null;
	symbolicNames = symbolicNames || null;
	if (this.s0 === null) {
		return "";
	}
	var serializer = new DFASerializer(this, literalNames, symbolicNames);
	return serializer.toString();
};

DFA.prototype.toLexerString = function() {
	if (this.s0 === null) {
		return "";
	}
	var serializer = new LexerDFASerializer(this);
	return serializer.toString();
};

exports.DFA = DFA;


/***/ }),

/***/ "./node_modules/antlr4/dfa/DFASerializer.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/dfa/DFASerializer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// A DFA walker that knows how to dump them to serialized strings.#/


function DFASerializer(dfa, literalNames, symbolicNames) {
	this.dfa = dfa;
	this.literalNames = literalNames || [];
	this.symbolicNames = symbolicNames || [];
	return this;
}

DFASerializer.prototype.toString = function() {
   if(this.dfa.s0 === null) {
       return null;
   }
   var buf = "";
   var states = this.dfa.sortedStates();
   for(var i=0;i<states.length;i++) {
       var s = states[i];
       if(s.edges!==null) {
            var n = s.edges.length;
            for(var j=0;j<n;j++) {
                var t = s.edges[j] || null;
                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                    buf = buf.concat(this.getStateString(s));
                    buf = buf.concat("-");
                    buf = buf.concat(this.getEdgeLabel(j));
                    buf = buf.concat("->");
                    buf = buf.concat(this.getStateString(t));
                    buf = buf.concat('\n');
                }
            }
       }
   }
   return buf.length===0 ? null : buf;
};

DFASerializer.prototype.getEdgeLabel = function(i) {
    if (i===0) {
        return "EOF";
    } else if(this.literalNames !==null || this.symbolicNames!==null) {
        return this.literalNames[i-1] || this.symbolicNames[i-1];
    } else {
        return String.fromCharCode(i-1);
    }
};

DFASerializer.prototype.getStateString = function(s) {
    var baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
    if(s.isAcceptState) {
        if (s.predicates !== null) {
            return baseStateStr + "=>" + s.predicates.toString();
        } else {
            return baseStateStr + "=>" + s.prediction.toString();
        }
    } else {
        return baseStateStr;
    }
};

function LexerDFASerializer(dfa) {
	DFASerializer.call(this, dfa, null);
	return this;
}

LexerDFASerializer.prototype = Object.create(DFASerializer.prototype);
LexerDFASerializer.prototype.constructor = LexerDFASerializer;

LexerDFASerializer.prototype.getEdgeLabel = function(i) {
	return "'" + String.fromCharCode(i) + "'";
};

exports.DFASerializer = DFASerializer;
exports.LexerDFASerializer = LexerDFASerializer;



/***/ }),

/***/ "./node_modules/antlr4/dfa/DFAState.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/dfa/DFAState.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

var ATNConfigSet = __webpack_require__(/*! ./../atn/ATNConfigSet */ "./node_modules/antlr4/atn/ATNConfigSet.js").ATNConfigSet;
var Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js");
var Hash = Utils.Hash;
var Set = Utils.Set;

// Map a predicate to a predicted alternative.///

function PredPrediction(pred, alt) {
	this.alt = alt;
	this.pred = pred;
	return this;
}

PredPrediction.prototype.toString = function() {
	return "(" + this.pred + ", " + this.alt + ")";
};

// A DFA state represents a set of possible ATN configurations.
// As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
// to keep track of all possible states the ATN can be in after
// reading each input symbol. That is to say, after reading
// input a1a2..an, the DFA is in a state that represents the
// subset T of the states of the ATN that are reachable from the
// ATN's start state along some path labeled a1a2..an."
// In conventional NFA&rarr;DFA conversion, therefore, the subset T
// would be a bitset representing the set of states the
// ATN could be in. We need to track the alt predicted by each
// state as well, however. More importantly, we need to maintain
// a stack of states, tracking the closure operations as they
// jump from rule to rule, emulating rule invocations (method calls).
// I have to add a stack to simulate the proper lookahead sequences for
// the underlying LL grammar from which the ATN was derived.
//
// <p>I use a set of ATNConfig objects not simple states. An ATNConfig
// is both a state (ala normal conversion) and a RuleContext describing
// the chain of rules (if any) followed to arrive at that state.</p>
//
// <p>A DFA state may have multiple references to a particular state,
// but with different ATN contexts (with same or different alts)
// meaning that state was reached via a different set of rule invocations.</p>
// /

function DFAState(stateNumber, configs) {
	if (stateNumber === null) {
		stateNumber = -1;
	}
	if (configs === null) {
		configs = new ATNConfigSet();
	}
	this.stateNumber = stateNumber;
	this.configs = configs;
	// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
	// {@link Token//EOF} maps to {@code edges[0]}.
	this.edges = null;
	this.isAcceptState = false;
	// if accept state, what ttype do we match or alt do we predict?
	// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link
	// //predicates}{@code !=null} or
	// {@link //requiresFullContext}.
	this.prediction = 0;
	this.lexerActionExecutor = null;
	// Indicates that this state was created during SLL prediction that
	// discovered a conflict between the configurations in the state. Future
	// {@link ParserATNSimulator//execATN} invocations immediately jumped doing
	// full context prediction if this field is true.
	this.requiresFullContext = false;
	// During SLL parsing, this is a list of predicates associated with the
	// ATN configurations of the DFA state. When we have predicates,
	// {@link //requiresFullContext} is {@code false} since full context
	// prediction evaluates predicates
	// on-the-fly. If this is not null, then {@link //prediction} is
	// {@link ATN//INVALID_ALT_NUMBER}.
	//
	// <p>We only use these for non-{@link //requiresFullContext} but
	// conflicting states. That
	// means we know from the context (it's $ or we don't dip into outer
	// context) that it's an ambiguity not a conflict.</p>
	//
	// <p>This list is computed by {@link
	// ParserATNSimulator//predicateDFAState}.</p>
	this.predicates = null;
	return this;
}

// Get the set of all alts mentioned by all ATN configurations in this
// DFA state.
DFAState.prototype.getAltSet = function() {
	var alts = new Set();
	if (this.configs !== null) {
		for (var i = 0; i < this.configs.length; i++) {
			var c = this.configs[i];
			alts.add(c.alt);
		}
	}
	if (alts.length === 0) {
		return null;
	} else {
		return alts;
	}
};

// Two {@link DFAState} instances are equal if their ATN configuration sets
// are the same. This method is used to see if a state already exists.
//
// <p>Because the number of alternatives and number of ATN configurations are
// finite, there is a finite number of DFA states that can be processed.
// This is necessary to show that the algorithm terminates.</p>
//
// <p>Cannot test the DFA state numbers here because in
// {@link ParserATNSimulator//addDFAState} we need to know if any other state
// exists that has this exact set of ATN configurations. The
// {@link //stateNumber} is irrelevant.</p>
DFAState.prototype.equals = function(other) {
	// compare set of ATN configurations in this set with other
	return this === other ||
			(other instanceof DFAState &&
				this.configs.equals(other.configs));
};

DFAState.prototype.toString = function() {
	var s = "" + this.stateNumber + ":" + this.configs;
	if(this.isAcceptState) {
        s = s + "=>";
        if (this.predicates !== null)
            s = s + this.predicates;
        else
            s = s + this.prediction;
    }
	return s;
};

DFAState.prototype.hashCode = function() {
	var hash = new Hash();
	hash.update(this.configs);
    return hash.finish();
};

exports.DFAState = DFAState;
exports.PredPrediction = PredPrediction;


/***/ }),

/***/ "./node_modules/antlr4/dfa/index.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/dfa/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = __webpack_require__(/*! ./DFA */ "./node_modules/antlr4/dfa/DFA.js").DFA;
exports.DFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/dfa/DFASerializer.js").DFASerializer;
exports.LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/dfa/DFASerializer.js").LexerDFASerializer;
exports.PredPrediction = __webpack_require__(/*! ./DFAState */ "./node_modules/antlr4/dfa/DFAState.js").PredPrediction;


/***/ }),

/***/ "./node_modules/antlr4/error/DiagnosticErrorListener.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/error/DiagnosticErrorListener.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

//
// This implementation of {@link ANTLRErrorListener} can be used to identify
// certain potential correctness and performance problems in grammars. "Reports"
// are made by calling {@link Parser//notifyErrorListeners} with the appropriate
// message.
//
// <ul>
// <li><b>Ambiguities</b>: These are cases where more than one path through the
// grammar can match the input.</li>
// <li><b>Weak context sensitivity</b>: These are cases where full-context
// prediction resolved an SLL conflict to a unique alternative which equaled the
// minimum alternative of the SLL conflict.</li>
// <li><b>Strong (forced) context sensitivity</b>: These are cases where the
// full-context prediction resolved an SLL conflict to a unique alternative,
// <em>and</em> the minimum alternative of the SLL conflict was found to not be
// a truly viable alternative. Two-stage parsing cannot be used for inputs where
// this situation occurs.</li>
// </ul>

var BitSet = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js").BitSet;
var ErrorListener = __webpack_require__(/*! ./ErrorListener */ "./node_modules/antlr4/error/ErrorListener.js").ErrorListener;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;

function DiagnosticErrorListener(exactOnly) {
	ErrorListener.call(this);
	exactOnly = exactOnly || true;
	// whether all ambiguities or only exact ambiguities are reported.
	this.exactOnly = exactOnly;
	return this;
}

DiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);
DiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;

DiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,
		startIndex, stopIndex, exact, ambigAlts, configs) {
	if (this.exactOnly && !exact) {
		return;
	}
	var msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportAttemptingFullContext = function(
		recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	var msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.reportContextSensitivity = function(
		recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	var msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'";
	recognizer.notifyErrorListeners(msg);
};

DiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {
	var decision = dfa.decision;
	var ruleIndex = dfa.atnStartState.ruleIndex;

	var ruleNames = recognizer.ruleNames;
	if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
		return "" + decision;
	}
	var ruleName = ruleNames[ruleIndex] || null;
	if (ruleName === null || ruleName.length === 0) {
		return "" + decision;
	}
	return "" + decision + " (" + ruleName + ")";
};

//
// Computes the set of conflicting or ambiguous alternatives from a
// configuration set, if that information was not already provided by the
// parser.
//
// @param reportedAlts The set of conflicting or ambiguous alternatives, as
// reported by the parser.
// @param configs The conflicting or ambiguous configuration set.
// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
// returns the set of alternatives represented in {@code configs}.
//
DiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {
	if (reportedAlts !== null) {
		return reportedAlts;
	}
	var result = new BitSet();
	for (var i = 0; i < configs.items.length; i++) {
		result.add(configs.items[i].alt);
	}
	return "{" + result.values().join(", ") + "}";
};

exports.DiagnosticErrorListener = DiagnosticErrorListener;

/***/ }),

/***/ "./node_modules/antlr4/error/ErrorListener.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/error/ErrorListener.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// Provides an empty default implementation of {@link ANTLRErrorListener}. The
// default implementation of each method does nothing, but can be overridden as
// necessary.

function ErrorListener() {
	return this;
}

ErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
};

ErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
};

ErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
};

ErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
};

function ConsoleErrorListener() {
	ErrorListener.call(this);
	return this;
}

ConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);
ConsoleErrorListener.prototype.constructor = ConsoleErrorListener;

//
// Provides a default instance of {@link ConsoleErrorListener}.
//
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

//
// {@inheritDoc}
//
// <p>
// This implementation prints messages to {@link System//err} containing the
// values of {@code line}, {@code charPositionInLine}, and {@code msg} using
// the following format.</p>
//
// <pre>
// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
// </pre>
//
ConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    console.error("line " + line + ":" + column + " " + msg);
};

function ProxyErrorListener(delegates) {
	ErrorListener.call(this);
    if (delegates===null) {
        throw "delegates";
    }
    this.delegates = delegates;
	return this;
}

ProxyErrorListener.prototype = Object.create(ErrorListener.prototype);
ProxyErrorListener.prototype.constructor = ProxyErrorListener;

ProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {
    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });
};

ProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });
};

ProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
	this.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });
};

ProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
	this.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });
};

exports.ErrorListener = ErrorListener;
exports.ConsoleErrorListener = ConsoleErrorListener;
exports.ProxyErrorListener = ProxyErrorListener;



/***/ }),

/***/ "./node_modules/antlr4/error/ErrorStrategy.js":
/*!****************************************************!*\
  !*** ./node_modules/antlr4/error/ErrorStrategy.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

//
/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
//

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var Errors = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js");
var NoViableAltException = Errors.NoViableAltException;
var InputMismatchException = Errors.InputMismatchException;
var FailedPredicateException = Errors.FailedPredicateException;
var ParseCancellationException = Errors.ParseCancellationException;
var ATNState = __webpack_require__(/*! ./../atn/ATNState */ "./node_modules/antlr4/atn/ATNState.js").ATNState;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var IntervalSet = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").IntervalSet;

function ErrorStrategy() {

}

ErrorStrategy.prototype.reset = function(recognizer){
};

ErrorStrategy.prototype.recoverInline = function(recognizer){
};

ErrorStrategy.prototype.recover = function(recognizer, e){
};

ErrorStrategy.prototype.sync = function(recognizer){
};

ErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){
};

ErrorStrategy.prototype.reportError = function(recognizer){
};



// This is the default implementation of {@link ANTLRErrorStrategy} used for
// error reporting and recovery in ANTLR parsers.
//
function DefaultErrorStrategy() {
	ErrorStrategy.call(this);
    // Indicates whether the error strategy is currently "recovering from an
    // error". This is used to suppress reporting multiple error messages while
    // attempting to recover from a detected syntax error.
    //
    // @see //inErrorRecoveryMode
    //
    this.errorRecoveryMode = false;

    // The index into the input stream where the last error occurred.
    // This is used to prevent infinite loops where an error is found
    // but no token is consumed during recovery...another error is found,
    // ad nauseum. This is a failsafe mechanism to guarantee that at least
    // one token/tree node is consumed for two errors.
    //
    this.lastErrorIndex = -1;
    this.lastErrorStates = null;
    return this;
}

DefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);
DefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;

// <p>The default implementation simply calls {@link //endErrorCondition} to
// ensure that the handler is not in error recovery mode.</p>
DefaultErrorStrategy.prototype.reset = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// This method is called to enter error recovery mode when a recognition
// exception is reported.
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {
    this.errorRecoveryMode = true;
};

DefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {
    return this.errorRecoveryMode;
};

//
// This method is called to leave error recovery mode after recovering from
// a recognition exception.
//
// @param recognizer
//
DefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {
    this.errorRecoveryMode = false;
    this.lastErrorStates = null;
    this.lastErrorIndex = -1;
};

//
// {@inheritDoc}
//
// <p>The default implementation simply calls {@link //endErrorCondition}.</p>
//
DefaultErrorStrategy.prototype.reportMatch = function(recognizer) {
    this.endErrorCondition(recognizer);
};

//
// {@inheritDoc}
//
// <p>The default implementation returns immediately if the handler is already
// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
// and dispatches the reporting task based on the runtime type of {@code e}
// according to the following table.</p>
//
// <ul>
// <li>{@link NoViableAltException}: Dispatches the call to
// {@link //reportNoViableAlternative}</li>
// <li>{@link InputMismatchException}: Dispatches the call to
// {@link //reportInputMismatch}</li>
// <li>{@link FailedPredicateException}: Dispatches the call to
// {@link //reportFailedPredicate}</li>
// <li>All other types: calls {@link Parser//notifyErrorListeners} to report
// the exception</li>
// </ul>
//
DefaultErrorStrategy.prototype.reportError = function(recognizer, e) {
   // if we've already reported an error and have not matched a token
   // yet successfully, don't report any errors.
    if(this.inErrorRecoveryMode(recognizer)) {
        return; // don't report spurious errors
    }
    this.beginErrorCondition(recognizer);
    if ( e instanceof NoViableAltException ) {
        this.reportNoViableAlternative(recognizer, e);
    } else if ( e instanceof InputMismatchException ) {
        this.reportInputMismatch(recognizer, e);
    } else if ( e instanceof FailedPredicateException ) {
        this.reportFailedPredicate(recognizer, e);
    } else {
        console.log("unknown recognition error type: " + e.constructor.name);
        console.log(e.stack);
        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
    }
};
//
// {@inheritDoc}
//
// <p>The default implementation resynchronizes the parser by consuming tokens
// until we find one in the resynchronization set--loosely the set of tokens
// that can follow the current rule.</p>
//
DefaultErrorStrategy.prototype.recover = function(recognizer, e) {
    if (this.lastErrorIndex===recognizer.getInputStream().index &&
        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
		// uh oh, another error at same token index and previously-visited
		// state in ATN; must be a case where LT(1) is in the recovery
		// token set so nothing got consumed. Consume a single token
		// at least to prevent an infinite loop; this is a failsafe.
		recognizer.consume();
    }
    this.lastErrorIndex = recognizer._input.index;
    if (this.lastErrorStates === null) {
        this.lastErrorStates = [];
    }
    this.lastErrorStates.push(recognizer.state);
    var followSet = this.getErrorRecoverySet(recognizer);
    this.consumeUntil(recognizer, followSet);
};

// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
// that the current lookahead symbol is consistent with what were expecting
// at this point in the ATN. You can call this anytime but ANTLR only
// generates code to check before subrules/loops and each iteration.
//
// <p>Implements Jim Idle's magic sync mechanism in closures and optional
// subrules. E.g.,</p>
//
// <pre>
// a : sync ( stuff sync )* ;
// sync : {consume to what can follow sync} ;
// </pre>
//
// At the start of a sub rule upon error, {@link //sync} performs single
// token deletion, if possible. If it can't do that, it bails on the current
// rule and uses the default error recovery, which consumes until the
// resynchronization set of the current rule.
//
// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
// with an empty alternative), then the expected set includes what follows
// the subrule.</p>
//
// <p>During loop iteration, it consumes until it sees a token that can start a
// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
// stay in the loop as long as possible.</p>
//
// <p><strong>ORIGINS</strong></p>
//
// <p>Previous versions of ANTLR did a poor job of their recovery within loops.
// A single mismatch token or missing token would force the parser to bail
// out of the entire rules surrounding the loop. So, for rule</p>
//
// <pre>
// classDef : 'class' ID '{' member* '}'
// </pre>
//
// input with an extra token between members would force the parser to
// consume until it found the next class definition rather than the next
// member definition of the current class.
//
// <p>This functionality cost a little bit of effort because the parser has to
// compare token set at the start of the loop and at each iteration. If for
// some reason speed is suffering for you, you can turn off this
// functionality by simply overriding this method as a blank { }.</p>
//
DefaultErrorStrategy.prototype.sync = function(recognizer) {
    // If already recovering, don't try to sync
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    var s = recognizer._interp.atn.states[recognizer.state];
    var la = recognizer.getTokenStream().LA(1);
    // try cheaper subset first; might get lucky. seems to shave a wee bit off
    var nextTokens = recognizer.atn.nextTokens(s);
    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
        return;
    }
    switch (s.stateType) {
    case ATNState.BLOCK_START:
    case ATNState.STAR_BLOCK_START:
    case ATNState.PLUS_BLOCK_START:
    case ATNState.STAR_LOOP_ENTRY:
       // report error and recover if possible
        if( this.singleTokenDeletion(recognizer) !== null) {
            return;
        } else {
            throw new InputMismatchException(recognizer);
        }
        break;
    case ATNState.PLUS_LOOP_BACK:
    case ATNState.STAR_LOOP_BACK:
        this.reportUnwantedToken(recognizer);
        var expecting = new IntervalSet();
        expecting.addSet(recognizer.getExpectedTokens());
        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));
        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
        break;
    default:
        // do nothing if we can't identify the exact kind of ATN state
    }
};

// This is called by {@link //reportError} when the exception is a
// {@link NoViableAltException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {
    var tokens = recognizer.getTokenStream();
    var input;
    if(tokens !== null) {
        if (e.startToken.type===Token.EOF) {
            input = "<EOF>";
        } else {
            input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
        }
    } else {
        input = "<unknown input>";
    }
    var msg = "no viable alternative at input " + this.escapeWSAndQuote(input);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is an
// {@link InputMismatchException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {
    var msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
          " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

//
// This is called by {@link //reportError} when the exception is a
// {@link FailedPredicateException}.
//
// @see //reportError
//
// @param recognizer the parser instance
// @param e the recognition exception
//
DefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {
    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];
    var msg = "rule " + ruleName + " " + e.message;
    recognizer.notifyErrorListeners(msg, e.offendingToken, e);
};

// This method is called to report a syntax error which requires the removal
// of a token from the input stream. At the time this method is called, the
// erroneous symbol is current {@code LT(1)} symbol and has not yet been
// removed from the input stream. When this method returns,
// {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenDeletion} identifies
// single-token deletion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {
    if (this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var tokenName = this.getTokenErrorDisplay(t);
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "extraneous input " + tokenName + " expecting " +
        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);
    recognizer.notifyErrorListeners(msg, t, null);
};
// This method is called to report a syntax error which requires the
// insertion of a missing token into the input stream. At the time this
// method is called, the missing token has not yet been inserted. When this
// method returns, {@code recognizer} is in error recovery mode.
//
// <p>This method is called when {@link //singleTokenInsertion} identifies
// single-token insertion as a viable recovery strategy for a mismatched
// input error.</p>
//
// <p>The default implementation simply returns if the handler is already in
// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
// enter error recovery mode, followed by calling
// {@link Parser//notifyErrorListeners}.</p>
//
// @param recognizer the parser instance
//
DefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {
    if ( this.inErrorRecoveryMode(recognizer)) {
        return;
    }
    this.beginErrorCondition(recognizer);
    var t = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
          " at " + this.getTokenErrorDisplay(t);
    recognizer.notifyErrorListeners(msg, t, null);
};

// <p>The default implementation attempts to recover from the mismatched input
// by using single token insertion and deletion as described below. If the
// recovery attempt fails, this method throws an
// {@link InputMismatchException}.</p>
//
// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
//
// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
// right token, however, then assume {@code LA(1)} is some extra spurious
// token and delete it. Then consume and return the next token (which was
// the {@code LA(2)} token) as the successful result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenDeletion}.</p>
//
// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
//
// <p>If current token (at {@code LA(1)}) is consistent with what could come
// after the expected {@code LA(1)} token, then assume the token is missing
// and use the parser's {@link TokenFactory} to create it on the fly. The
// "insertion" is performed by returning the created token as the successful
// result of the match operation.</p>
//
// <p>This recovery strategy is implemented by {@link
// //singleTokenInsertion}.</p>
//
// <p><strong>EXAMPLE</strong></p>
//
// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
// the parser returns from the nested call to {@code expr}, it will have
// call chain:</p>
//
// <pre>
// stat &rarr; expr &rarr; atom
// </pre>
//
// and it will be trying to match the {@code ')'} at this point in the
// derivation:
//
// <pre>
// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
// ^
// </pre>
//
// The attempt to match {@code ')'} will fail when it sees {@code ';'} and
// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
// is in the set of tokens that can follow the {@code ')'} token reference
// in rule {@code atom}. It can assume that you forgot the {@code ')'}.
//
DefaultErrorStrategy.prototype.recoverInline = function(recognizer) {
    // SINGLE TOKEN DELETION
    var matchedSymbol = this.singleTokenDeletion(recognizer);
    if (matchedSymbol !== null) {
        // we have deleted the extra token.
        // now, move past ttype token as if all were ok
        recognizer.consume();
        return matchedSymbol;
    }
    // SINGLE TOKEN INSERTION
    if (this.singleTokenInsertion(recognizer)) {
        return this.getMissingSymbol(recognizer);
    }
    // even that didn't work; must throw the exception
    throw new InputMismatchException(recognizer);
};

//
// This method implements the single-token insertion inline error recovery
// strategy. It is called by {@link //recoverInline} if the single-token
// deletion strategy fails to recover from the mismatched input. If this
// method returns {@code true}, {@code recognizer} will be in error recovery
// mode.
//
// <p>This method determines whether or not single-token insertion is viable by
// checking if the {@code LA(1)} input symbol could be successfully matched
// if it were instead the {@code LA(2)} symbol. If this method returns
// {@code true}, the caller is responsible for creating and inserting a
// token with the correct type to produce this behavior.</p>
//
// @param recognizer the parser instance
// @return {@code true} if single-token insertion is a viable recovery
// strategy for the current mismatched input, otherwise {@code false}
//
DefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {
    var currentSymbolType = recognizer.getTokenStream().LA(1);
    // if current token is consistent with what could come after current
    // ATN state, then we know we're missing a token; error recovery
    // is free to conjure up and insert the missing token
    var atn = recognizer._interp.atn;
    var currentState = atn.states[recognizer.state];
    var next = currentState.transitions[0].target;
    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);
    if (expectingAtLL2.contains(currentSymbolType) ){
        this.reportMissingToken(recognizer);
        return true;
    } else {
        return false;
    }
};

// This method implements the single-token deletion inline error recovery
// strategy. It is called by {@link //recoverInline} to attempt to recover
// from mismatched input. If this method returns null, the parser and error
// handler state will not have changed. If this method returns non-null,
// {@code recognizer} will <em>not</em> be in error recovery mode since the
// returned token was a successful match.
//
// <p>If the single-token deletion is successful, this method calls
// {@link //reportUnwantedToken} to report the error, followed by
// {@link Parser//consume} to actually "delete" the extraneous token. Then,
// before returning {@link //reportMatch} is called to signal a successful
// match.</p>
//
// @param recognizer the parser instance
// @return the successfully matched {@link Token} instance if single-token
// deletion successfully recovers from the mismatched input, otherwise
// {@code null}
//
DefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {
    var nextTokenType = recognizer.getTokenStream().LA(2);
    var expecting = this.getExpectedTokens(recognizer);
    if (expecting.contains(nextTokenType)) {
        this.reportUnwantedToken(recognizer);
        // print("recoverFromMismatchedToken deleting " \
        // + str(recognizer.getTokenStream().LT(1)) \
        // + " since " + str(recognizer.getTokenStream().LT(2)) \
        // + " is what we want", file=sys.stderr)
        recognizer.consume(); // simply delete extra token
        // we want to return the token we're actually matching
        var matchedSymbol = recognizer.getCurrentToken();
        this.reportMatch(recognizer); // we know current token is correct
        return matchedSymbol;
    } else {
        return null;
    }
};

// Conjure up a missing token during error recovery.
//
// The recognizer attempts to recover from single missing
// symbols. But, actions might refer to that missing symbol.
// For example, x=ID {f($x);}. The action clearly assumes
// that there has been an identifier matched previously and that
// $x points at that token. If that token is missing, but
// the next token in the stream is what we want we assume that
// this token is missing and we keep going. Because we
// have to return some token to replace the missing token,
// we have to conjure one up. This method gives the user control
// over the tokens returned for missing tokens. Mostly,
// you will want to create something special for identifier
// tokens. For literals such as '{' and ',', the default
// action in the parser or tree parser works. It simply creates
// a CommonToken of the appropriate type. The text will be the token.
// If you change what tokens must be created by the lexer,
// override this method to create the appropriate tokens.
//
DefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {
    var currentSymbol = recognizer.getCurrentToken();
    var expecting = this.getExpectedTokens(recognizer);
    var expectedTokenType = expecting.first(); // get any element
    var tokenText;
    if (expectedTokenType===Token.EOF) {
        tokenText = "<missing EOF>";
    } else {
        tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
    }
    var current = currentSymbol;
    var lookback = recognizer.getTokenStream().LT(-1);
    if (current.type===Token.EOF && lookback !== null) {
        current = lookback;
    }
    return recognizer.getTokenFactory().create(current.source,
        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
        -1, -1, current.line, current.column);
};

DefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {
    return recognizer.getExpectedTokens();
};

// How should a token be displayed in an error message? The default
// is to display just the text, but during development you might
// want to have a lot of information spit out. Override in that case
// to use t.toString() (which, for CommonToken, dumps everything about
// the token). This is better than forcing you to override a method in
// your token objects because you don't have to go modify your lexer
// so that it creates a new Java type.
//
DefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {
    if (t === null) {
        return "<no token>";
    }
    var s = t.text;
    if (s === null) {
        if (t.type===Token.EOF) {
            s = "<EOF>";
        } else {
            s = "<" + t.type + ">";
        }
    }
    return this.escapeWSAndQuote(s);
};

DefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {
    s = s.replace(/\n/g,"\\n");
    s = s.replace(/\r/g,"\\r");
    s = s.replace(/\t/g,"\\t");
    return "'" + s + "'";
};

// Compute the error recovery set for the current rule. During
// rule invocation, the parser pushes the set of tokens that can
// follow that rule reference on the stack; this amounts to
// computing FIRST of what follows the rule reference in the
// enclosing rule. See LinearApproximator.FIRST().
// This local follow set only includes tokens
// from within the rule; i.e., the FIRST computation done by
// ANTLR stops at the end of a rule.
//
// EXAMPLE
//
// When you find a "no viable alt exception", the input is not
// consistent with any of the alternatives for rule r. The best
// thing to do is to consume tokens until you see something that
// can legally follow a call to r//or* any rule that called r.
// You don't want the exact set of viable next tokens because the
// input might just be missing a token--you might consume the
// rest of the input looking for one of the missing tokens.
//
// Consider grammar:
//
// a : '[' b ']'
// | '(' b ')'
// ;
// b : c '^' INT ;
// c : ID
// | INT
// ;
//
// At each rule invocation, the set of tokens that could follow
// that rule is pushed on a stack. Here are the various
// context-sensitive follow sets:
//
// FOLLOW(b1_in_a) = FIRST(']') = ']'
// FOLLOW(b2_in_a) = FIRST(')') = ')'
// FOLLOW(c_in_b) = FIRST('^') = '^'
//
// Upon erroneous input "[]", the call chain is
//
// a -> b -> c
//
// and, hence, the follow context stack is:
//
// depth follow set start of rule execution
// 0 <EOF> a (from main())
// 1 ']' b
// 2 '^' c
//
// Notice that ')' is not included, because b would have to have
// been called from a different context in rule a for ')' to be
// included.
//
// For error recovery, we cannot consider FOLLOW(c)
// (context-sensitive or otherwise). We need the combined set of
// all context-sensitive FOLLOW sets--the set of all tokens that
// could follow any reference in the call chain. We need to
// resync to one of those tokens. Note that FOLLOW(c)='^' and if
// we resync'd to that token, we'd consume until EOF. We need to
// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
// In this case, for input "[]", LA(1) is ']' and in the set, so we would
// not consume anything. After printing an error, rule c would
// return normally. Rule b would not find the required '^' though.
// At this point, it gets a mismatched token error and throws an
// exception (since LA(1) is not in the viable following token
// set). The rule exception handler tries to recover, but finds
// the same recovery set and doesn't consume anything. Rule b
// exits normally returning to rule a. Now it finds the ']' (and
// with the successful match exits errorRecovery mode).
//
// So, you can see that the parser walks up the call chain looking
// for the token that was a member of the recovery set.
//
// Errors are not generated in errorRecovery mode.
//
// ANTLR's error recovery mechanism is based upon original ideas:
//
// "Algorithms + Data Structures = Programs" by Niklaus Wirth
//
// and
//
// "A note on error recovery in recursive descent parsers":
// http://portal.acm.org/citation.cfm?id=947902.947905
//
// Later, Josef Grosch had some good ideas:
//
// "Efficient and Comfortable Error Recovery in Recursive Descent
// Parsers":
// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
//
// Like Grosch I implement context-sensitive FOLLOW sets that are combined
// at run-time upon error to avoid overhead during parsing.
//
DefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {
    var atn = recognizer._interp.atn;
    var ctx = recognizer._ctx;
    var recoverSet = new IntervalSet();
    while (ctx !== null && ctx.invokingState>=0) {
        // compute what follows who invoked us
        var invokingState = atn.states[ctx.invokingState];
        var rt = invokingState.transitions[0];
        var follow = atn.nextTokens(rt.followState);
        recoverSet.addSet(follow);
        ctx = ctx.parentCtx;
    }
    recoverSet.removeOne(Token.EPSILON);
    return recoverSet;
};

// Consume tokens until one matches the given token set.//
DefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {
    var ttype = recognizer.getTokenStream().LA(1);
    while( ttype !== Token.EOF && !set.contains(ttype)) {
        recognizer.consume();
        ttype = recognizer.getTokenStream().LA(1);
    }
};

//
// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
// by immediately canceling the parse operation with a
// {@link ParseCancellationException}. The implementation ensures that the
// {@link ParserRuleContext//exception} field is set for all parse tree nodes
// that were not completed prior to encountering the error.
//
// <p>
// This error strategy is useful in the following scenarios.</p>
//
// <ul>
// <li><strong>Two-stage parsing:</strong> This error strategy allows the first
// stage of two-stage parsing to immediately terminate if an error is
// encountered, and immediately fall back to the second stage. In addition to
// avoiding wasted work by attempting to recover from errors here, the empty
// implementation of {@link BailErrorStrategy//sync} improves the performance of
// the first stage.</li>
// <li><strong>Silent validation:</strong> When syntax errors are not being
// reported or logged, and the parse result is simply ignored if errors occur,
// the {@link BailErrorStrategy} avoids wasting work on recovering from errors
// when the result will be ignored either way.</li>
// </ul>
//
// <p>
// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
//
// @see Parser//setErrorHandler(ANTLRErrorStrategy)
//
function BailErrorStrategy() {
	DefaultErrorStrategy.call(this);
	return this;
}

BailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);
BailErrorStrategy.prototype.constructor = BailErrorStrategy;

// Instead of recovering from exception {@code e}, re-throw it wrapped
// in a {@link ParseCancellationException} so it is not caught by the
// rule function catches. Use {@link Exception//getCause()} to get the
// original {@link RecognitionException}.
//
BailErrorStrategy.prototype.recover = function(recognizer, e) {
    var context = recognizer._ctx;
    while (context !== null) {
        context.exception = e;
        context = context.parentCtx;
    }
    throw new ParseCancellationException(e);
};

// Make sure we don't attempt to recover inline; if the parser
// successfully recovers, it won't throw an exception.
//
BailErrorStrategy.prototype.recoverInline = function(recognizer) {
    this.recover(recognizer, new InputMismatchException(recognizer));
};

// Make sure we don't attempt to recover from problems in subrules.//
BailErrorStrategy.prototype.sync = function(recognizer) {
    // pass
};

exports.BailErrorStrategy = BailErrorStrategy;
exports.DefaultErrorStrategy = DefaultErrorStrategy;


/***/ }),

/***/ "./node_modules/antlr4/error/Errors.js":
/*!*********************************************!*\
  !*** ./node_modules/antlr4/error/Errors.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
//  3 kinds of errors: prediction errors, failed predicate errors, and
//  mismatched input errors. In each case, the parser knows where it is
//  in the input, where it is in the ATN, the rule invocation stack,
//  and what kind of problem occurred.

var PredicateTransition = __webpack_require__(/*! ./../atn/Transition */ "./node_modules/antlr4/atn/Transition.js").PredicateTransition;

function RecognitionException(params) {
	Error.call(this);
	if (!!Error.captureStackTrace) {
        Error.captureStackTrace(this, RecognitionException);
	} else {
		var stack = new Error().stack;
	}
	this.message = params.message;
    this.recognizer = params.recognizer;
    this.input = params.input;
    this.ctx = params.ctx;
    // The current {@link Token} when an error occurred. Since not all streams
    // support accessing symbols by index, we have to track the {@link Token}
    // instance itself.
    this.offendingToken = null;
    // Get the ATN state number the parser was in at the time the error
    // occurred. For {@link NoViableAltException} and
    // {@link LexerNoViableAltException} exceptions, this is the
    // {@link DecisionState} number. For others, it is the state whose outgoing
    // edge we couldn't match.
    this.offendingState = -1;
    if (this.recognizer!==null) {
        this.offendingState = this.recognizer.state;
    }
    return this;
}

RecognitionException.prototype = Object.create(Error.prototype);
RecognitionException.prototype.constructor = RecognitionException;

// <p>If the state number is not known, this method returns -1.</p>

//
// Gets the set of input symbols which could potentially follow the
// previously matched symbol at the time this exception was thrown.
//
// <p>If the set of expected tokens is not known and could not be computed,
// this method returns {@code null}.</p>
//
// @return The set of token types that could potentially follow the current
// state in the ATN, or {@code null} if the information is not available.
// /
RecognitionException.prototype.getExpectedTokens = function() {
    if (this.recognizer!==null) {
        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
    } else {
        return null;
    }
};

RecognitionException.prototype.toString = function() {
    return this.message;
};

function LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {
	RecognitionException.call(this, {message:"", recognizer:lexer, input:input, ctx:null});
    this.startIndex = startIndex;
    this.deadEndConfigs = deadEndConfigs;
    return this;
}

LexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);
LexerNoViableAltException.prototype.constructor = LexerNoViableAltException;

LexerNoViableAltException.prototype.toString = function() {
    var symbol = "";
    if (this.startIndex >= 0 && this.startIndex < this.input.size) {
        symbol = this.input.getText((this.startIndex,this.startIndex));
    }
    return "LexerNoViableAltException" + symbol;
};

// Indicates that the parser could not decide which of two or more paths
// to take based upon the remaining input. It tracks the starting token
// of the offending input and also knows where the parser was
// in the various paths when the error. Reported by reportNoViableAlternative()
//
function NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
	ctx = ctx || recognizer._ctx;
	offendingToken = offendingToken || recognizer.getCurrentToken();
	startToken = startToken || recognizer.getCurrentToken();
	input = input || recognizer.getInputStream();
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:input, ctx:ctx});
    // Which configurations did we try at input.index() that couldn't match
	// input.LT(1)?//
    this.deadEndConfigs = deadEndConfigs;
    // The token object at the start index; the input stream might
    // not be buffering tokens so get a reference to it. (At the
    // time the error occurred, of course the stream needs to keep a
    // buffer all of the tokens but later we might not have access to those.)
    this.startToken = startToken;
    this.offendingToken = offendingToken;
}

NoViableAltException.prototype = Object.create(RecognitionException.prototype);
NoViableAltException.prototype.constructor = NoViableAltException;

// This signifies any kind of mismatched input exceptions such as
// when the current input does not match the expected token.
//
function InputMismatchException(recognizer) {
	RecognitionException.call(this, {message:"", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});
    this.offendingToken = recognizer.getCurrentToken();
}

InputMismatchException.prototype = Object.create(RecognitionException.prototype);
InputMismatchException.prototype.constructor = InputMismatchException;

// A semantic predicate failed during validation. Validation of predicates
// occurs when normally parsing the alternative just like matching a token.
// Disambiguating predicate evaluation occurs when we test a predicate during
// prediction.

function FailedPredicateException(recognizer, predicate, message) {
	RecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,
                         input:recognizer.getInputStream(), ctx:recognizer._ctx});
    var s = recognizer._interp.atn.states[recognizer.state];
    var trans = s.transitions[0];
    if (trans instanceof PredicateTransition) {
        this.ruleIndex = trans.ruleIndex;
        this.predicateIndex = trans.predIndex;
    } else {
        this.ruleIndex = 0;
        this.predicateIndex = 0;
    }
    this.predicate = predicate;
    this.offendingToken = recognizer.getCurrentToken();
    return this;
}

FailedPredicateException.prototype = Object.create(RecognitionException.prototype);
FailedPredicateException.prototype.constructor = FailedPredicateException;

FailedPredicateException.prototype.formatMessage = function(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
};

function ParseCancellationException() {
	Error.call(this);
	Error.captureStackTrace(this, ParseCancellationException);
	return this;
}

ParseCancellationException.prototype = Object.create(Error.prototype);
ParseCancellationException.prototype.constructor = ParseCancellationException;

exports.RecognitionException = RecognitionException;
exports.NoViableAltException = NoViableAltException;
exports.LexerNoViableAltException = LexerNoViableAltException;
exports.InputMismatchException = InputMismatchException;
exports.FailedPredicateException = FailedPredicateException;
exports.ParseCancellationException = ParseCancellationException;


/***/ }),

/***/ "./node_modules/antlr4/error/index.js":
/*!********************************************!*\
  !*** ./node_modules/antlr4/error/index.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.RecognitionException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").RecognitionException;
exports.NoViableAltException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").NoViableAltException;
exports.LexerNoViableAltException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").LexerNoViableAltException;
exports.InputMismatchException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").InputMismatchException;
exports.FailedPredicateException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/error/Errors.js").FailedPredicateException;
exports.DiagnosticErrorListener = __webpack_require__(/*! ./DiagnosticErrorListener */ "./node_modules/antlr4/error/DiagnosticErrorListener.js").DiagnosticErrorListener;
exports.BailErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ "./node_modules/antlr4/error/ErrorStrategy.js").BailErrorStrategy;
exports.ErrorListener = __webpack_require__(/*! ./ErrorListener */ "./node_modules/antlr4/error/ErrorListener.js").ErrorListener;


/***/ }),

/***/ "./node_modules/antlr4/index.js":
/*!**************************************!*\
  !*** ./node_modules/antlr4/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = __webpack_require__(/*! ./atn/index */ "./node_modules/antlr4/atn/index.js");
exports.codepointat = __webpack_require__(/*! ./polyfills/codepointat */ "./node_modules/antlr4/polyfills/codepointat.js");
exports.dfa = __webpack_require__(/*! ./dfa/index */ "./node_modules/antlr4/dfa/index.js");
exports.fromcodepoint = __webpack_require__(/*! ./polyfills/fromcodepoint */ "./node_modules/antlr4/polyfills/fromcodepoint.js");
exports.tree = __webpack_require__(/*! ./tree/index */ "./node_modules/antlr4/tree/index.js");
exports.error = __webpack_require__(/*! ./error/index */ "./node_modules/antlr4/error/index.js");
exports.Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").Token;
exports.CharStreams = __webpack_require__(/*! ./CharStreams */ "./node_modules/antlr4/CharStreams.js").CharStreams;
exports.CommonToken = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/Token.js").CommonToken;
exports.InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/InputStream.js").InputStream;
exports.FileStream = __webpack_require__(/*! ./FileStream */ "./node_modules/antlr4/FileStream.js").FileStream;
exports.CommonTokenStream = __webpack_require__(/*! ./CommonTokenStream */ "./node_modules/antlr4/CommonTokenStream.js").CommonTokenStream;
exports.Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/Lexer.js").Lexer;
exports.Parser = __webpack_require__(/*! ./Parser */ "./node_modules/antlr4/Parser.js").Parser;
var pc = __webpack_require__(/*! ./PredictionContext */ "./node_modules/antlr4/PredictionContext.js");
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = __webpack_require__(/*! ./ParserRuleContext */ "./node_modules/antlr4/ParserRuleContext.js").ParserRuleContext;
exports.Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
exports.Utils = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/Utils.js");


/***/ }),

/***/ "./node_modules/antlr4/polyfills/codepointat.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/polyfills/codepointat.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}


/***/ }),

/***/ "./node_modules/antlr4/polyfills/fromcodepoint.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/polyfills/fromcodepoint.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}


/***/ }),

/***/ "./node_modules/antlr4/tree/Tree.js":
/*!******************************************!*\
  !*** ./node_modules/antlr4/tree/Tree.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
///

// The basic notion of a tree has a parent, a payload, and a list of children.
//  It is the most abstract interface for all the trees used by ANTLR.
///

var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var Interval = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/IntervalSet.js").Interval;
var INVALID_INTERVAL = new Interval(-1, -2);
var Utils = __webpack_require__(/*! ../Utils.js */ "./node_modules/antlr4/Utils.js");


function Tree() {
	return this;
}

function SyntaxTree() {
	Tree.call(this);
	return this;
}

SyntaxTree.prototype = Object.create(Tree.prototype);
SyntaxTree.prototype.constructor = SyntaxTree;

function ParseTree() {
	SyntaxTree.call(this);
	return this;
}

ParseTree.prototype = Object.create(SyntaxTree.prototype);
ParseTree.prototype.constructor = ParseTree;

function RuleNode() {
	ParseTree.call(this);
	return this;
}

RuleNode.prototype = Object.create(ParseTree.prototype);
RuleNode.prototype.constructor = RuleNode;

function TerminalNode() {
	ParseTree.call(this);
	return this;
}

TerminalNode.prototype = Object.create(ParseTree.prototype);
TerminalNode.prototype.constructor = TerminalNode;

function ErrorNode() {
	TerminalNode.call(this);
	return this;
}

ErrorNode.prototype = Object.create(TerminalNode.prototype);
ErrorNode.prototype.constructor = ErrorNode;

function ParseTreeVisitor() {
	return this;
}

ParseTreeVisitor.prototype.visit = function(ctx) {
 	if (Array.isArray(ctx)) {
		return ctx.map(function(child) {
            return child.accept(this);
        }, this);
	} else {
		return ctx.accept(this);
	}
};

ParseTreeVisitor.prototype.visitChildren = function(ctx) {
	if (ctx.children) {
		return this.visit(ctx.children);
	} else {
		return null;
	}
}

ParseTreeVisitor.prototype.visitTerminal = function(node) {
};

ParseTreeVisitor.prototype.visitErrorNode = function(node) {
};


function ParseTreeListener() {
	return this;
}

ParseTreeListener.prototype.visitTerminal = function(node) {
};

ParseTreeListener.prototype.visitErrorNode = function(node) {
};

ParseTreeListener.prototype.enterEveryRule = function(node) {
};

ParseTreeListener.prototype.exitEveryRule = function(node) {
};

function TerminalNodeImpl(symbol) {
	TerminalNode.call(this);
	this.parentCtx = null;
	this.symbol = symbol;
	return this;
}

TerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);
TerminalNodeImpl.prototype.constructor = TerminalNodeImpl;

TerminalNodeImpl.prototype.getChild = function(i) {
	return null;
};

TerminalNodeImpl.prototype.getSymbol = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getParent = function() {
	return this.parentCtx;
};

TerminalNodeImpl.prototype.getPayload = function() {
	return this.symbol;
};

TerminalNodeImpl.prototype.getSourceInterval = function() {
	if (this.symbol === null) {
		return INVALID_INTERVAL;
	}
	var tokenIndex = this.symbol.tokenIndex;
	return new Interval(tokenIndex, tokenIndex);
};

TerminalNodeImpl.prototype.getChildCount = function() {
	return 0;
};

TerminalNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitTerminal(this);
};

TerminalNodeImpl.prototype.getText = function() {
	return this.symbol.text;
};

TerminalNodeImpl.prototype.toString = function() {
	if (this.symbol.type === Token.EOF) {
		return "<EOF>";
	} else {
		return this.symbol.text;
	}
};

// Represents a token that was consumed during resynchronization
// rather than during a valid match operation. For example,
// we will create this kind of a node during single token insertion
// and deletion as well as during "consume until error recovery set"
// upon no viable alternative exceptions.

function ErrorNodeImpl(token) {
	TerminalNodeImpl.call(this, token);
	return this;
}

ErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);
ErrorNodeImpl.prototype.constructor = ErrorNodeImpl;

ErrorNodeImpl.prototype.isErrorNode = function() {
	return true;
};

ErrorNodeImpl.prototype.accept = function(visitor) {
	return visitor.visitErrorNode(this);
};

function ParseTreeWalker() {
	return this;
}

ParseTreeWalker.prototype.walk = function(listener, t) {
	var errorNode = t instanceof ErrorNode ||
			(t.isErrorNode !== undefined && t.isErrorNode());
	if (errorNode) {
		listener.visitErrorNode(t);
	} else if (t instanceof TerminalNode) {
		listener.visitTerminal(t);
	} else {
		this.enterRule(listener, t);
		for (var i = 0; i < t.getChildCount(); i++) {
			var child = t.getChild(i);
			this.walk(listener, child);
		}
		this.exitRule(listener, t);
	}
};
//
// The discovery of a rule node, involves sending two events: the generic
// {@link ParseTreeListener//enterEveryRule} and a
// {@link RuleContext}-specific event. First we trigger the generic and then
// the rule specific. We to them in reverse order upon finishing the node.
//
ParseTreeWalker.prototype.enterRule = function(listener, r) {
	var ctx = r.getRuleContext();
	listener.enterEveryRule(ctx);
	ctx.enterRule(listener);
};

ParseTreeWalker.prototype.exitRule = function(listener, r) {
	var ctx = r.getRuleContext();
	ctx.exitRule(listener);
	listener.exitEveryRule(ctx);
};

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

exports.RuleNode = RuleNode;
exports.ErrorNode = ErrorNode;
exports.TerminalNode = TerminalNode;
exports.ErrorNodeImpl = ErrorNodeImpl;
exports.TerminalNodeImpl = TerminalNodeImpl;
exports.ParseTreeListener = ParseTreeListener;
exports.ParseTreeVisitor = ParseTreeVisitor;
exports.ParseTreeWalker = ParseTreeWalker;
exports.INVALID_INTERVAL = INVALID_INTERVAL;


/***/ }),

/***/ "./node_modules/antlr4/tree/Trees.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/tree/Trees.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/Utils.js");
var Token = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/Token.js").Token;
var RuleNode = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/tree/Tree.js").RuleNode;
var ErrorNode = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/tree/Tree.js").ErrorNode;
var TerminalNode = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/tree/Tree.js").TerminalNode;
var ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ "./node_modules/antlr4/ParserRuleContext.js").ParserRuleContext;
var RuleContext = __webpack_require__(/*! ./../RuleContext */ "./node_modules/antlr4/RuleContext.js").RuleContext;
var INVALID_ALT_NUMBER = __webpack_require__(/*! ./../atn/ATN */ "./node_modules/antlr4/atn/ATN.js").INVALID_ALT_NUMBER;


/** A set of utility routines useful for all kinds of ANTLR trees. */
function Trees() {
}

// Print out a whole tree in LISP form. {@link //getNodeText} is used on the
//  node payloads to get the text for the nodes.  Detect
//  parse trees and extract data appropriately.
Trees.toStringTree = function(tree, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
       ruleNames = recog.ruleNames;
    }
    var s = Trees.getNodeText(tree, ruleNames);
    s = Utils.escapeWhitespace(s, false);
    var c = tree.getChildCount();
    if(c===0) {
        return s;
    }
    var res = "(" + s + ' ';
    if(c>0) {
        s = Trees.toStringTree(tree.getChild(0), ruleNames);
        res = res.concat(s);
    }
    for(var i=1;i<c;i++) {
        s = Trees.toStringTree(tree.getChild(i), ruleNames);
        res = res.concat(' ' + s);
    }
    res = res.concat(")");
    return res;
};

Trees.getNodeText = function(t, ruleNames, recog) {
	ruleNames = ruleNames || null;
	recog = recog || null;
    if(recog!==null) {
        ruleNames = recog.ruleNames;
    }
    if(ruleNames!==null) {
       if (t instanceof RuleContext) {
           var altNumber = t.getAltNumber();
           if ( altNumber!=INVALID_ALT_NUMBER ) {
               return ruleNames[t.ruleIndex]+":"+altNumber;
           }
           return ruleNames[t.ruleIndex];
       } else if ( t instanceof ErrorNode) {
           return t.toString();
       } else if(t instanceof TerminalNode) {
           if(t.symbol!==null) {
               return t.symbol.text;
           }
       }
    }
    // no recog for rule names
    var payload = t.getPayload();
    if (payload instanceof Token ) {
       return payload.text;
    }
    return t.getPayload().toString();
};


// Return ordered list of all children of this node
Trees.getChildren = function(t) {
	var list = [];
	for(var i=0;i<t.getChildCount();i++) {
		list.push(t.getChild(i));
	}
	return list;
};

// Return a list of all ancestors of this node.  The first node of
//  list is the root and the last is the parent of this node.
//
Trees.getAncestors = function(t) {
    var ancestors = [];
    t = t.getParent();
    while(t!==null) {
        ancestors = [t].concat(ancestors);
        t = t.getParent();
    }
    return ancestors;
};

Trees.findAllTokenNodes = function(t, ttype) {
    return Trees.findAllNodes(t, ttype, true);
};

Trees.findAllRuleNodes = function(t, ruleIndex) {
	return Trees.findAllNodes(t, ruleIndex, false);
};

Trees.findAllNodes = function(t, index, findTokens) {
	var nodes = [];
	Trees._findAllNodes(t, index, findTokens, nodes);
	return nodes;
};

Trees._findAllNodes = function(t, index, findTokens, nodes) {
	// check this node (the root) first
	if(findTokens && (t instanceof TerminalNode)) {
		if(t.symbol.type===index) {
			nodes.push(t);
		}
	} else if(!findTokens && (t instanceof ParserRuleContext)) {
		if(t.ruleIndex===index) {
			nodes.push(t);
		}
	}
	// check children
	for(var i=0;i<t.getChildCount();i++) {
		Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
	}
};

Trees.descendants = function(t) {
	var nodes = [t];
    for(var i=0;i<t.getChildCount();i++) {
        nodes = nodes.concat(Trees.descendants(t.getChild(i)));
    }
    return nodes;
};


exports.Trees = Trees;

/***/ }),

/***/ "./node_modules/antlr4/tree/index.js":
/*!*******************************************!*\
  !*** ./node_modules/antlr4/tree/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

var Tree = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/tree/Tree.js");
exports.Trees = __webpack_require__(/*! ./Trees */ "./node_modules/antlr4/tree/Trees.js").Trees;
exports.RuleNode = Tree.RuleNode;
exports.ParseTreeListener = Tree.ParseTreeListener;
exports.ParseTreeVisitor = Tree.ParseTreeVisitor;
exports.ParseTreeWalker = Tree.ParseTreeWalker;


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.5.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( _i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px";
				tr.style.height = "1px";
				trChild.style.height = "9px";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = (
					dataPriv.get( cur, "events" ) || Object.create( null )
				)[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script
			if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			if ( typeof props.top === "number" ) {
				props.top += "px";
			}
			if ( typeof props.left === "number" ) {
				props.left += "px";
			}
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/compiler/astNode.ts":
/*!*********************************!*\
  !*** ./src/compiler/astNode.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.NegationNode = exports.TernaryOperatorNode = exports.DivisionNode = exports.SubtractionNode = exports.MultiplicationNode = exports.AdditionNode = exports.FunctionNode = exports.DerivativeNode = exports.ConstantNode = exports.VarIdentifierNode = exports.MacroExpressionNode = exports.SumExpressionNode = exports.ExpressionNode = exports.BoolConstantNode = exports.BoolOrNode = exports.BoolAndNode = exports.BoolNENode = exports.BoolENode = exports.BoolGENode = exports.BoolGNode = exports.BoolLENode = exports.BoolLNode = exports.BoolNegationNode = exports.BoolExpressionNode = exports.LoopStatementNode = exports.Bounds = exports.SetterNode = exports.ConstantStatementNode = exports.InitialConditionNode = exports.StateNode = exports.TransitionNode = exports.MacroStatementNode = exports.EquationNode = exports.StatementNode = exports.SystemDefinition = exports.ASTNode = exports.TextPosition = exports.NodeType = void 0;
//TODO
exports.NodeType = {
    _Equation: 2,
    _MacroDefinition: 3,
    _Constant: 4,
    _InitialCondition: 5,
    _VarIdentifier: 6,
    _Loop: 7,
    _Condition: 8,
    _Function: 9,
    _ConstantStatement: 10,
    _Setter: 11,
    _Derivative: 12,
    _Addition: 13,
    _Subtraction: 14,
    _Multiplication: 15,
    _Division: 16,
    _Negation: 17,
    _Summation: 18,
    _Less: 19,
    _LessEqual: 20,
    _Greater: 21,
    _GreaterEqual: 22,
    _Equal: 23,
    _NotEqual: 24,
    _And: 25,
    _Or: 26,
    _Not: 27,
    _State: 28,
    _Macro: 29,
    _Transition: 30,
    _BoolConstant: 31,
    _Ternary: 32
};
class TextPosition {
    constructor(line, column, start, stop) {
        this.line = line;
        this.column = column;
        this.start = start;
        this.stop = stop;
    }
    static invalid() {
        return new TextPosition(-1, -1, -1, -1);
    }
}
exports.TextPosition = TextPosition;
class ASTNode {
    constructor(type) {
        this.type = type;
        this.textPos = TextPosition.invalid();
    }
    setTextPos(textPos) {
        this.textPos = textPos;
        return this;
    }
}
exports.ASTNode = ASTNode;
class SystemDefinition {
    constructor(statements) {
        this.statements = statements;
    }
}
exports.SystemDefinition = SystemDefinition;
class StatementNode extends ASTNode {
    constructor(type) {
        super(type);
    }
}
exports.StatementNode = StatementNode;
class EquationNode extends StatementNode {
    constructor(label, left, right) {
        super(exports.NodeType._Equation);
        this.label = label;
        this.left = left;
        this.right = right;
    }
}
exports.EquationNode = EquationNode;
class MacroStatementNode extends StatementNode {
    constructor(id, args, expression) {
        super(exports.NodeType._MacroDefinition);
        this.id = id;
        this.args = args;
        this.expression = expression;
    }
}
exports.MacroStatementNode = MacroStatementNode;
class TransitionNode extends ASTNode {
    constructor(prevStates, condition) {
        super(exports.NodeType._Transition);
        this.prevStates = prevStates;
        this.condition = condition;
    }
}
exports.TransitionNode = TransitionNode;
class StateNode extends StatementNode {
    constructor(id, isTerminal, stateTransitions, statements) {
        super(exports.NodeType._State);
        this.id = id;
        this.isTerminal = isTerminal;
        this.stateTransitions = stateTransitions;
        this.statements = statements;
    }
}
exports.StateNode = StateNode;
class InitialConditionNode extends StatementNode {
    constructor(id, expression) {
        super(exports.NodeType._InitialCondition);
        this.id = id;
        this.expression = expression;
    }
}
exports.InitialConditionNode = InitialConditionNode;
class ConstantStatementNode extends StatementNode {
    constructor(id, expression) {
        super(exports.NodeType._ConstantStatement);
        this.id = id;
        this.expression = expression;
    }
}
exports.ConstantStatementNode = ConstantStatementNode;
class SetterNode extends ASTNode {
    constructor(id, expression) {
        super(exports.NodeType._Setter);
        this.id = id;
        this.expression = expression;
    }
}
exports.SetterNode = SetterNode;
class Bounds {
    constructor(l, r) {
        this.l = l;
        this.r = r;
    }
}
exports.Bounds = Bounds;
class LoopStatementNode extends StatementNode {
    constructor(iterator, bounds, statements) {
        super(exports.NodeType._Loop);
        this.iterator = iterator;
        this.bounds = bounds;
        this.statements = statements;
    }
    ;
}
exports.LoopStatementNode = LoopStatementNode;
class BoolExpressionNode extends ASTNode {
    constructor(type) {
        super(type);
    }
}
exports.BoolExpressionNode = BoolExpressionNode;
class BoolNegationNode extends BoolExpressionNode {
    constructor(inner) {
        super(exports.NodeType._Negation);
        this.inner = inner;
    }
    clone() {
        return new BoolNegationNode(this.inner.clone());
    }
}
exports.BoolNegationNode = BoolNegationNode;
class BoolLNode extends BoolExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._Less);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new BoolLNode(this.left.clone(), this.right.clone());
    }
}
exports.BoolLNode = BoolLNode;
class BoolLENode extends BoolExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._LessEqual);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new BoolLENode(this.left.clone(), this.right.clone());
    }
}
exports.BoolLENode = BoolLENode;
class BoolGNode extends BoolExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._Greater);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new BoolGNode(this.left.clone(), this.right.clone());
    }
}
exports.BoolGNode = BoolGNode;
class BoolGENode extends BoolExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._GreaterEqual);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new BoolGENode(this.left.clone(), this.right.clone());
    }
}
exports.BoolGENode = BoolGENode;
class BoolENode extends BoolExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._Equal);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new BoolENode(this.left.clone(), this.right.clone());
    }
}
exports.BoolENode = BoolENode;
class BoolNENode extends BoolExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._NotEqual);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new BoolNENode(this.left.clone(), this.right.clone());
    }
}
exports.BoolNENode = BoolNENode;
class BoolAndNode extends BoolExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._And);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new BoolAndNode(this.left.clone(), this.right.clone());
    }
}
exports.BoolAndNode = BoolAndNode;
class BoolOrNode extends BoolExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._Or);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new BoolOrNode(this.left.clone(), this.right.clone());
    }
}
exports.BoolOrNode = BoolOrNode;
class BoolConstantNode extends BoolExpressionNode {
    constructor(value) {
        super(exports.NodeType._BoolConstant);
        this.value = value;
    }
    clone() {
        return new BoolConstantNode(this.value);
    }
}
exports.BoolConstantNode = BoolConstantNode;
class ExpressionNode extends ASTNode {
    constructor(type) {
        super(type);
    }
}
exports.ExpressionNode = ExpressionNode;
class SumExpressionNode extends ExpressionNode {
    constructor(iterator, bounds, expression) {
        super(exports.NodeType._Summation);
        this.iterator = iterator;
        this.bounds = bounds;
        this.expression = expression;
    }
    clone() {
        return new SumExpressionNode(this.iterator, new Bounds(this.bounds.l, this.bounds.r), this.expression.clone());
    }
}
exports.SumExpressionNode = SumExpressionNode;
class MacroExpressionNode extends ExpressionNode {
    constructor(id, args) {
        super(exports.NodeType._Macro);
        this.id = id;
        this.args = args;
    }
    clone() {
        return new MacroExpressionNode(this.id, this.args.map(function (item) { return item.clone(); }));
    }
}
exports.MacroExpressionNode = MacroExpressionNode;
class VarIdentifierNode extends ExpressionNode {
    constructor(id, indicies) {
        super(exports.NodeType._VarIdentifier);
        this.id = id;
        this.indicies = indicies;
    }
    clone() {
        return new VarIdentifierNode(this.id, this.indicies.map(function (item) { return item.clone(); }));
    }
}
exports.VarIdentifierNode = VarIdentifierNode;
class ConstantNode extends ExpressionNode {
    constructor(value) {
        super(exports.NodeType._Constant);
        this.value = value;
    }
    clone() {
        return new ConstantNode(this.value);
    }
}
exports.ConstantNode = ConstantNode;
class DerivativeNode extends ExpressionNode {
    constructor(id) {
        super(exports.NodeType._Derivative);
        this.id = id;
    }
    clone() {
        return new DerivativeNode(this.id.clone());
    }
}
exports.DerivativeNode = DerivativeNode;
class FunctionNode extends ExpressionNode {
    constructor(name, args) {
        super(exports.NodeType._Function);
        this.name = name;
        this.args = args;
    }
    clone() {
        return new FunctionNode(this.name, this.args.map(function (item) { return item.clone(); }));
    }
}
exports.FunctionNode = FunctionNode;
class AdditionNode extends ExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._Addition);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new AdditionNode(this.left.clone(), this.right.clone());
    }
}
exports.AdditionNode = AdditionNode;
class MultiplicationNode extends ExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._Multiplication);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new MultiplicationNode(this.left.clone(), this.right.clone());
    }
}
exports.MultiplicationNode = MultiplicationNode;
class SubtractionNode extends ExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._Subtraction);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new SubtractionNode(this.left.clone(), this.right.clone());
    }
}
exports.SubtractionNode = SubtractionNode;
class DivisionNode extends ExpressionNode {
    constructor(left, right) {
        super(exports.NodeType._Division);
        this.left = left;
        this.right = right;
    }
    clone() {
        return new DivisionNode(this.left.clone(), this.right.clone());
    }
}
exports.DivisionNode = DivisionNode;
class TernaryOperatorNode extends ExpressionNode {
    constructor(cond, tr, fls) {
        super(exports.NodeType._Ternary);
        this.condition = cond;
        this.true = tr;
        this.false = fls;
    }
    clone() {
        return new TernaryOperatorNode(this.condition.clone(), this.true.clone(), this.false.clone());
    }
}
exports.TernaryOperatorNode = TernaryOperatorNode;
class NegationNode extends ExpressionNode {
    constructor(inner) {
        super(exports.NodeType._Negation);
        this.inner = inner;
    }
    clone() {
        return new NegationNode(this.inner.clone());
    }
}
exports.NegationNode = NegationNode;
/*class ConditionalStatementNode extends StatementNode{
    condition:BoolExpressionNode;
    if:ConditionalBodyNode;
    else:ConditionalBodyNode|null;
    constructor(){
        super(NodeType._ConditionBody);
    }
}
class ConditionalBodyNode extends ASTNode{
    equations:EquationNode;
    setters:SetterNode;
}*/


/***/ }),

/***/ "./src/compiler/compiler.ts":
/*!**********************************!*\
  !*** ./src/compiler/compiler.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DAECompiler = void 0;
const astNode_1 = __webpack_require__(/*! ./astNode */ "./src/compiler/astNode.ts");
const visitor_1 = __importDefault(__webpack_require__(/*! ./visitor */ "./src/compiler/visitor.ts"));
const index_1 = __importDefault(__webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js"));
const odeGrammarLexer_js_1 = __importDefault(__webpack_require__(/*! ../grammar/antlrOutput/odeGrammarLexer.js */ "./src/grammar/antlrOutput/odeGrammarLexer.js"));
const odeGrammarParser_js_1 = __importDefault(__webpack_require__(/*! ../grammar/antlrOutput/odeGrammarParser.js */ "./src/grammar/antlrOutput/odeGrammarParser.js"));
const errorListener_1 = __importDefault(__webpack_require__(/*! ./errorListener */ "./src/compiler/errorListener.ts"));
const error_1 = __importDefault(__webpack_require__(/*! ./error */ "./src/compiler/error.ts"));
const customEDAESystem_1 = __webpack_require__(/*! ../dae/customEDAESystem */ "./src/dae/customEDAESystem.ts");
const customIDAESystem_1 = __webpack_require__(/*! ../dae/customIDAESystem */ "./src/dae/customIDAESystem.ts");
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const expressionCompiler_1 = __webpack_require__(/*! ./expressionCompiler */ "./src/compiler/expressionCompiler.ts");
const compilerContext_1 = __webpack_require__(/*! ./compilerContext */ "./src/compiler/compilerContext.ts");
const compilerError_1 = __webpack_require__(/*! ./compilerError */ "./src/compiler/compilerError.ts");
class VariableEntry {
    constructor(name, isAlgebraic, initialValue = 0) {
        this.name = name;
        this.initialValue = initialValue;
        this.isAlgebraic = isAlgebraic;
    }
}
class EquationEntry {
    constructor(expression, isAlgebraic, texPos) {
        this.expression = expression;
        this.isAlgebraic = isAlgebraic;
        this.texPox = texPos;
    }
}
class DAECompiler {
    constructor() {
        this.epsilon = 0.001;
        this.errors = [];
        this.equations = {};
        this.context = null;
        this.macros = {};
        this.variables = {};
        this.constants = {};
    }
    compileExplicit(text) {
        this.isExplicit = true;
        var chars = new index_1.default.InputStream(text);
        var lexer = new odeGrammarLexer_js_1.default.odeGrammarLexer(chars);
        lexer.removeErrorListeners();
        var listener = new errorListener_1.default(this.errors);
        lexer.addErrorListener(listener);
        //@ts-ignore
        lexer.strictMode = false;
        var tokens = new index_1.default.CommonTokenStream(lexer);
        var parser = new odeGrammarParser_js_1.default.odeGrammarParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(listener);
        var visitor = new visitor_1.default();
        parser.buildParseTrees = true;
        var tree = parser.dae();
        //@ts-ignore
        //console.log(tree.toStringTree(parser.ruleNames));
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let daeSystemDef = visitor.startDAE(tree, listener);
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        daeSystemDef.statements.forEach(function (item) {
            this.compileStatement(item);
        }, this);
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let x = [];
        let z = [];
        let x0 = [];
        Object.entries(this.variables).forEach(function ([key, variable]) {
            if (variable.isAlgebraic)
                z.push(key);
            else {
                x.push(key);
                x0.push(variable.initialValue);
            }
        });
        //prepare variable indicies
        let algContext = { indicies: {}, errors: this.errors };
        let difContext = { indicies: {}, errors: this.errors };
        x.forEach(function (item, index) {
            algContext.indicies[item] = index;
            difContext.indicies[item] = index;
        });
        z.forEach(function (item, index) {
            difContext.indicies[item] = index + x.length;
        });
        algContext.indicies["t"] = x.length;
        difContext.indicies["t"] = x.length + z.length;
        let f = [];
        let g = [];
        let self = this;
        Object.entries(this.variables).forEach(function ([key, variable]) {
            if (!self.equations.hasOwnProperty(key)) {
                self.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Missing equation for variable "${key}"`));
                return;
            }
            let equation = self.equations[key];
            if (variable.isAlgebraic != equation.isAlgebraic) {
                self.errors.push(new error_1.default(equation.texPox, `Non compatible types of variable and equation "${key}"`));
                return;
            }
            if (variable.isAlgebraic) {
                g.push(expressionCompiler_1.compileExpression(equation.expression, algContext).simplify());
            }
            else {
                f.push(expressionCompiler_1.compileExpression(equation.expression, difContext).simplify());
            }
        });
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let dfdx = [];
        let dfdz = [];
        let dgdx = [];
        f.forEach(function (item) {
            let dxRow = [];
            x.forEach(function (_x) {
                dxRow.push(item.differentiate(_x, this.epsilon).simplify());
            }, this);
            dfdx.push(dxRow);
            let dzRow = [];
            z.forEach(function (_z) {
                dzRow.push(item.differentiate(_z, this.epsilon).simplify());
            }, this);
            dfdz.push(dzRow);
        }, this);
        g.forEach(function (item) {
            let dxRow = [];
            x.forEach(function (_x) {
                dxRow.push(item.differentiate(_x, this.epsilon).simplify());
            }, this);
            dgdx.push(dxRow);
        }, this);
        return { system: new customEDAESystem_1.CustomEDAESystem(f, g, dfdx, dfdz, dgdx), x0: new vector_1.vector(x0), x: x, z: z };
    }
    compileImplicit(text) {
        this.isExplicit = false;
        var chars = new index_1.default.InputStream(text);
        var lexer = new odeGrammarLexer_js_1.default.odeGrammarLexer(chars);
        lexer.removeErrorListeners();
        var listener = new errorListener_1.default(this.errors);
        lexer.addErrorListener(listener);
        //@ts-ignore
        lexer.strictMode = false;
        var tokens = new index_1.default.CommonTokenStream(lexer);
        var parser = new odeGrammarParser_js_1.default.odeGrammarParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(listener);
        var visitor = new visitor_1.default();
        parser.buildParseTrees = true;
        var tree = parser.dae();
        //@ts-ignore
        //console.log(tree.toStringTree(parser.ruleNames));
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let daeSystemDef = visitor.startDAE(tree, listener);
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        daeSystemDef.statements.forEach(function (item) {
            this.compileStatement(item);
        }, this);
        let x = [];
        let z = [];
        let x0 = [];
        let z0 = [];
        Object.entries(this.variables).forEach(function ([key, variable]) {
            if (variable.isAlgebraic) {
                z.push(key);
                z0.push(variable.initialValue);
            }
            else {
                x.push(key);
                x0.push(variable.initialValue);
            }
        });
        //prepare variable indicies
        //x,z,t
        let algContext = { indicies: {}, errors: this.errors };
        //x,dx,z,t
        let difContext = { indicies: {}, errors: this.errors };
        x.forEach(function (item, index) {
            algContext.indicies[item] = index;
            difContext.indicies[item] = index;
            difContext.indicies[item + "'"] = index + x.length;
        });
        z.forEach(function (item, index) {
            algContext.indicies[item] = index + x.length;
            difContext.indicies[item] = index + 2 * x.length;
        });
        algContext.indicies["t"] = x.length + z.length;
        difContext.indicies["t"] = 2 * x.length + z.length;
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let algEquations = [];
        let difEquations = [];
        Object.entries(this.equations).forEach(function ([key, value]) {
            if (value.isAlgebraic)
                algEquations.push(key);
            else
                difEquations.push(key);
        });
        if (difEquations.length != x.length) {
            this.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Number of dif. equations: ${difEquations.length}, dif. variables: ${x.length}`));
        }
        if (algEquations.length != z.length) {
            this.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Number of alg. equations: ${algEquations.length}, alg. variables: ${z.length}`));
        }
        let f = [];
        let g = [];
        let self = this;
        algEquations.forEach(function (label) {
            let equation = self.equations[label];
            g.push(expressionCompiler_1.compileExpression(equation.expression, algContext).simplify());
        }, this);
        difEquations.forEach(function (label) {
            let equation = self.equations[label];
            f.push(expressionCompiler_1.compileExpression(equation.expression, difContext).simplify());
        }, this);
        if (algContext.errors.length > 0 || difContext.errors.length > 0) {
            throw new compilerError_1.CompilerError(algContext.errors.concat(difContext.errors));
        }
        let dfdx = [];
        let dfddx = [];
        let dfdz = [];
        let dgdx = [];
        let dgdz = [];
        f.forEach(function (item) {
            let dxRow = [];
            let ddxRow = [];
            x.forEach(function (_x) {
                dxRow.push(item.differentiate(_x, this.epsilon).simplify());
                ddxRow.push(item.differentiate(_x + "'", this.epsilon).simplify());
            }, this);
            dfdx.push(dxRow);
            dfddx.push(ddxRow);
            let dzRow = [];
            z.forEach(function (_z) {
                dzRow.push(item.differentiate(_z, this.epsilon).simplify());
            }, this);
            dfdz.push(dzRow);
        }, this);
        g.forEach(function (item) {
            let dxRow = [];
            x.forEach(function (_x) {
                dxRow.push(item.differentiate(_x, this.epsilon).simplify());
            }, this);
            dgdx.push(dxRow);
            let dzRow = [];
            z.forEach(function (_z) {
                dzRow.push(item.differentiate(_z, this.epsilon).simplify());
            }, this);
            dgdz.push(dzRow);
        }, this);
        return { system: new customIDAESystem_1.CustomIDAESystem(f, g, dfdx, dfddx, dfdz, dgdx, dgdz), x0: new vector_1.vector(x0), x: x, z0: new vector_1.vector(z0), z: z };
    }
    getSymbolName(node) {
        let result = node.id;
        let self = this;
        node.indicies.forEach(function (item, index) {
            let indexValue = (expressionCompiler_1.compileExpression(self.expandExpression(item.clone()), { indicies: {}, errors: self.errors })).eval({});
            if (Number.isInteger(indexValue)) {
                result += `[${indexValue}]`;
                return;
            }
            else {
                self.errors.push(new error_1.default(node.textPos, `Expression for ${index} index value of variable "${node.id}" is not constant`));
            }
        });
        return result;
    }
    expandBoolExpression(node) {
        switch (node.type) {
            case astNode_1.NodeType._And: {
                let and = node;
                and.left = this.expandBoolExpression(and.left);
                and.right = this.expandBoolExpression(and.right);
                return and;
            }
            case astNode_1.NodeType._Or: {
                let or = node;
                or.left = this.expandBoolExpression(or.left);
                or.right = this.expandBoolExpression(or.right);
                return or;
            }
            case astNode_1.NodeType._Not: {
                let not = node;
                not.inner = this.expandExpression(not.inner);
                return not;
            }
            case astNode_1.NodeType._Greater: {
                let g = node;
                g.left = this.expandExpression(g.left);
                g.right = this.expandExpression(g.right);
                return g;
            }
            case astNode_1.NodeType._GreaterEqual: {
                let ge = node;
                ge.left = this.expandExpression(ge.left);
                ge.right = this.expandExpression(ge.right);
                return ge;
            }
            case astNode_1.NodeType._Less: {
                let l = node;
                l.left = this.expandExpression(l.left);
                l.right = this.expandExpression(l.right);
                return l;
            }
            case astNode_1.NodeType._LessEqual: {
                let le = node;
                le.left = this.expandExpression(le.left);
                le.right = this.expandExpression(le.right);
                return le;
            }
            case astNode_1.NodeType._Equal: {
                let e = node;
                e.left = this.expandExpression(e.left);
                e.right = this.expandExpression(e.right);
                return e;
            }
            case astNode_1.NodeType._NotEqual: {
                let ne = node;
                ne.left = this.expandExpression(ne.left);
                ne.right = this.expandExpression(ne.right);
                return ne;
            }
            case astNode_1.NodeType._BoolConstant: {
                return node;
            }
            default:
                this.errors.push(new error_1.default(node.textPos, "Unexpected boolean expression type at expandBoolExpression()"));
                return new astNode_1.BoolConstantNode(false);
        }
    }
    expandExpression(node) {
        switch (node.type) {
            case astNode_1.NodeType._Addition: {
                let add = node;
                add.left = this.expandExpression(add.left);
                add.right = this.expandExpression(add.right);
                return add;
            }
            case astNode_1.NodeType._Subtraction: {
                let sub = node;
                sub.left = this.expandExpression(sub.left);
                sub.right = this.expandExpression(sub.right);
                return sub;
            }
            case astNode_1.NodeType._Multiplication: {
                let mult = node;
                mult.left = this.expandExpression(mult.left);
                mult.right = this.expandExpression(mult.right);
                return mult;
            }
            case astNode_1.NodeType._Division: {
                let div = node;
                div.left = this.expandExpression(div.left);
                div.right = this.expandExpression(div.right);
                return div;
            }
            case astNode_1.NodeType._Negation: {
                let neg = node;
                neg.inner = this.expandExpression(neg.inner);
                return neg;
            }
            case astNode_1.NodeType._Derivative: {
                let der = node;
                let id = this.expandExpression(der.id);
                if (id instanceof astNode_1.VarIdentifierNode && id.id != "t") {
                    if (this.variables.hasOwnProperty(id.id)) {
                        this.variables[id.id].isAlgebraic = false;
                    }
                    else {
                        this.variables[id.id] = new VariableEntry(id.id, false);
                    }
                    der.id = id;
                    return der;
                }
                this.errors.push(new error_1.default(node.textPos, `Incorrect symbol in derivative`));
                return new astNode_1.ConstantNode(0);
            }
            case astNode_1.NodeType._Function: {
                let fun = node;
                for (let i = 0; i < fun.args.length; i++) {
                    fun.args[i] = this.expandExpression(fun.args[i]);
                }
                return fun;
            }
            case astNode_1.NodeType._VarIdentifier: {
                let _var = node;
                if (_var.indicies.length == 0) {
                    let _context = this.context;
                    while (_context != null) {
                        if (_context instanceof compilerContext_1.LoopContext) {
                            if (_context.iterator == _var.id) {
                                return new astNode_1.ConstantNode(_context.index);
                            }
                        }
                        else if (_context instanceof compilerContext_1.MacroContext) {
                            if (_context.args.hasOwnProperty(_var.id)) {
                                return this.expandExpression(_context.args[_var.id].clone());
                            }
                        }
                        _context = _context.previous;
                    }
                }
                _var.id = this.getSymbolName(_var);
                _var.indicies = [];
                if (this.constants.hasOwnProperty(_var.id)) {
                    return new astNode_1.ConstantNode(this.constants[_var.id]);
                }
                if (_var.id != "t") {
                    if (!this.variables.hasOwnProperty(_var.id)) {
                        this.variables[_var.id] = new VariableEntry(_var.id, true);
                    }
                }
                return _var;
            }
            case astNode_1.NodeType._Constant: {
                return node;
            }
            case astNode_1.NodeType._Summation: {
                let summation = node;
                if (summation.bounds.l > summation.bounds.r) {
                    this.errors.push(new error_1.default(node.textPos, `Left bound of summation is bigger then right bound`));
                    return new astNode_1.ConstantNode(0);
                }
                let sum = [];
                let _context = new compilerContext_1.LoopContext(this.context, summation.iterator);
                this.context = _context;
                for (let i = summation.bounds.l; i <= summation.bounds.r; i++) {
                    _context.index = i;
                    sum.push(this.expandExpression(summation.expression.clone()));
                }
                //return this.expandExpression(summation.expression);
                this.context = this.context.previous;
                let result = sum[0];
                if (sum.length == 1)
                    return result;
                for (let i = 1; i < sum.length; i++) {
                    result = new astNode_1.AdditionNode(result, sum[i]);
                }
                return result;
            }
            case astNode_1.NodeType._Macro: {
                let macro = node;
                let macroName = this.getSymbolName(macro.id);
                let macroDef = this.macros[macroName];
                if (macroDef == undefined) {
                    this.errors.push(new error_1.default(node.textPos, `Undefined macro "${macroName}"`));
                    return new astNode_1.ConstantNode(0);
                }
                if (macroDef.args.length != macro.args.length) {
                    this.errors.push(new error_1.default(node.textPos, `Invalid number of arguments in macro "${macroName}"`));
                    return new astNode_1.ConstantNode(0);
                }
                let args = {};
                macro.args.forEach(function (item, index) {
                    args[macroDef.args[index]] = item.clone();
                });
                this.context = new compilerContext_1.MacroContext(this.context, args);
                let result = this.expandExpression(macroDef.expression.clone());
                this.context = this.context.previous;
                return result;
            }
            case astNode_1.NodeType._Ternary: {
                let ter = node;
                ter.condition = this.expandBoolExpression(ter.condition);
                ter.true = this.expandExpression(ter.true);
                ter.false = this.expandExpression(ter.false);
                return ter;
            }
            default:
                this.errors.push(new error_1.default(node.textPos, "Unexpected expression type at validateExpression()"));
                return new astNode_1.ConstantNode(0);
        }
    }
    compileConstant(node) {
        let constant = this.getSymbolName(node.id);
        if (constant == "t") {
            this.errors.push(new error_1.default(node.textPos, 'Invalid use of time variable'));
        }
        else if (this.variables.hasOwnProperty(constant)) {
            this.errors.push(new error_1.default(node.textPos, `Redefenition of variable "${constant}"`));
        }
        else if (this.constants.hasOwnProperty(constant)) {
            this.errors.push(new error_1.default(node.textPos, `Redefenition of constant "${constant}"`));
        }
        else {
            try {
                this.constants[constant] = (expressionCompiler_1.compileExpression(this.expandExpression(node.expression.clone()), { indicies: {}, errors: this.errors })).eval({});
            }
            catch (error) {
                this.errors.push(new error_1.default(node.textPos, error));
            }
        }
    }
    compileInitialCondition(node) {
        let variable = this.getSymbolName(node.id);
        let value = 0;
        if (variable == "t") {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of time variable`));
            return;
        }
        if (this.constants.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of constant "${variable}"`));
            return;
        }
        try {
            value = (expressionCompiler_1.compileExpression(this.expandExpression(node.expression.clone()), { indicies: {}, errors: this.errors })).eval({});
        }
        catch (error) {
            this.errors.push(new error_1.default(node.textPos, `Can't evaluate initial condition for variable "${variable}"`));
            this.errors.push(new error_1.default(node.textPos, error));
            return;
        }
        if (this.variables.hasOwnProperty(variable)) {
            this.variables[variable].initialValue = value;
        }
        else {
            this.variables[variable] = new VariableEntry(variable, true, value);
        }
    }
    compileAlgEquation(node) {
        let variable = this.getSymbolName(node.left);
        if (this.equations.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Multiple equations for variable "${variable}"`));
            return;
        }
        if (variable == "t") {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of time variable`));
            return;
        }
        if (this.constants.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of constant "${variable}"`));
            return;
        }
        if (!this.variables.hasOwnProperty(variable)) {
            this.variables[variable] = new VariableEntry(variable, true);
        }
        let equation = this.expandExpression(node.right.clone());
        //right side shouldn't have any derivatives
        if (expressionCompiler_1.hasDerivative(equation)) {
            this.errors.push(new error_1.default(node.textPos, `Right hand side expression for variable "${variable}" contains derivatives`));
            return;
        }
        this.equations[variable] = new EquationEntry(equation, true, node.textPos);
    }
    compileDifEquation(node) {
        let variable = this.getSymbolName(node.left.id);
        if (this.equations.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Multiple equations for variable "${variable}"`));
            return;
        }
        if (variable == "t") {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of constant "${variable}"`));
            return;
        }
        if (this.constants.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Redefenition of constant "${variable}"`));
            return;
        }
        if (this.variables.hasOwnProperty(variable)) {
            this.variables[variable].isAlgebraic = false;
        }
        else {
            this.variables[variable] = new VariableEntry(variable, false);
        }
        let equation = this.expandExpression(node.right.clone());
        if (expressionCompiler_1.hasDerivative(equation)) {
            this.errors.push(new error_1.default(node.textPos, `Right hand side expression for variable "${variable}" contains derivatives`));
            return;
        }
        this.equations[variable] = new EquationEntry(equation, false, node.textPos);
    }
    compileExplicitEquation(node) {
        if (node.left instanceof astNode_1.VarIdentifierNode) {
            this.compileAlgEquation(node);
        }
        else if (node.left instanceof astNode_1.DerivativeNode) {
            this.compileDifEquation(node);
        }
        else {
            this.errors.push(new error_1.default(node.textPos, `Equation should be in explicit form`));
        }
    }
    compileImplicitEquation(node) {
        let label = (node.label != null ? this.getSymbolName(node.label) : (Object.keys(this.equations).length + 1));
        let equation = new astNode_1.SubtractionNode(node.left, node.right);
        equation = this.expandExpression(equation.clone()); //TODO add variables to variablesTable and remove validate
        this.equations[label] = new EquationEntry(equation, !expressionCompiler_1.hasDerivative(equation), node.textPos);
    }
    compileLoop(node) {
        let _context = new compilerContext_1.LoopContext(this.context, node.iterator);
        this.context = _context;
        let statements = node.statements;
        let self = this;
        node.bounds.forEach(function (bounds) {
            if (bounds.l > bounds.r) {
                self.errors.push(new error_1.default(node.textPos, `Left bound value "${bounds.l}" is higher then right bound value "${bounds.r}"`));
                return;
            }
            for (let i = bounds.l; i <= bounds.r; i++) {
                _context.index = i;
                statements.forEach(function (statement) {
                    self.compileStatement(statement);
                });
            }
        });
        this.context = this.context.previous;
    }
    compileMacro(node) {
        let macroName = this.getSymbolName(node.id);
        if (this.macros.hasOwnProperty(macroName)) {
            this.errors.push(new error_1.default(node.textPos, `Redefenition of macro "${macroName}"`));
            return;
        }
        this.macros[macroName] = node;
    }
    compileStatement(node) {
        switch (node.type) {
            case astNode_1.NodeType._ConstantStatement: {
                this.compileConstant(node);
                break;
            }
            case astNode_1.NodeType._InitialCondition: {
                this.compileInitialCondition(node);
                break;
            }
            case astNode_1.NodeType._Equation: {
                if (this.isExplicit)
                    this.compileExplicitEquation(node);
                else
                    this.compileImplicitEquation(node);
                break;
            }
            case astNode_1.NodeType._Loop: {
                this.compileLoop(node);
                break;
            }
            case astNode_1.NodeType._MacroDefinition: {
                this.compileMacro(node);
                break;
            }
            default:
                this.errors.push(new error_1.default(node.textPos, `Unexpected statement type at compileStatement()`));
        }
    }
}
exports.DAECompiler = DAECompiler;


/***/ }),

/***/ "./src/compiler/compilerContext.ts":
/*!*****************************************!*\
  !*** ./src/compiler/compilerContext.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.MacroContext = exports.LoopContext = exports.CompilerContext = void 0;
class CompilerContext {
    constructor(previous) {
        this.previous = previous;
    }
}
exports.CompilerContext = CompilerContext;
class LoopContext extends CompilerContext {
    constructor(previous, iterator) {
        super(previous);
        this.iterator = iterator;
    }
}
exports.LoopContext = LoopContext;
class MacroContext extends CompilerContext {
    constructor(previous, args) {
        super(previous);
        this.args = args;
    }
}
exports.MacroContext = MacroContext;


/***/ }),

/***/ "./src/compiler/compilerError.ts":
/*!***************************************!*\
  !*** ./src/compiler/compilerError.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CompilerError = void 0;
class CompilerError extends Error {
    constructor(messages) {
        super();
        this.messages = messages;
    }
}
exports.CompilerError = CompilerError;


/***/ }),

/***/ "./src/compiler/error.ts":
/*!*******************************!*\
  !*** ./src/compiler/error.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class ErrorMessage {
    constructor(textPos, message) {
        this.textPos = textPos;
        this.message = message;
    }
    print() {
        if (this.textPos.line != -1)
            return `${this.message} at line:${this.textPos.line}, position:${this.textPos.column}`;
        return this.message;
    }
}
exports.default = ErrorMessage;


/***/ }),

/***/ "./src/compiler/errorListener.ts":
/*!***************************************!*\
  !*** ./src/compiler/errorListener.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = __importDefault(__webpack_require__(/*! antlr4/error/ */ "./node_modules/antlr4/error/index.js"));
const error_2 = __importDefault(__webpack_require__(/*! ./error */ "./src/compiler/error.ts"));
const astNode_1 = __webpack_require__(/*! ./astNode */ "./src/compiler/astNode.ts");
class ErrorListener extends error_1.default.ErrorListener {
    constructor(errors) {
        super();
        this.errors = errors;
    }
    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
        this.errors.push(new error_2.default(new astNode_1.TextPosition(line, column, offendingSymbol.start, offendingSymbol.stop), msg));
    }
    add(textPos, msg) {
        this.errors.push(new error_2.default(textPos, msg));
    }
}
exports.default = ErrorListener;


/***/ }),

/***/ "./src/compiler/expression.ts":
/*!************************************!*\
  !*** ./src/compiler/expression.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.BoolConstant = exports.BoolNot = exports.LEqual = exports.Less = exports.GEqual = exports.Greater = exports.NotEqual = exports.Equal = exports.Or = exports.And = exports.BoolExpression = exports.TernaryOperator = exports.Variable = exports.Function = exports.Division = exports.Subtraction = exports.Addition = exports.Multiplication = exports.Negation = exports.Constant = exports.Expression = exports.NodeType = void 0;
const functions_1 = __webpack_require__(/*! ./functions */ "./src/compiler/functions.ts");
exports.NodeType = {
    _Constant: 0,
    _Function: 1,
    _Variable: 2,
    _Ternary: 3,
    _Division: 4,
    _Multiplication: 5,
    _Negation: 6,
    _Subtraction: 7,
    _Addition: 8
};
class Expression {
    constructor(type) {
        this.type = type;
    }
}
exports.Expression = Expression;
class Constant extends Expression {
    constructor(value) {
        super(exports.NodeType._Constant);
        this.value = value;
    }
    clone() {
        return new Constant(this.value);
    }
    differentiate(variable, epsilon) {
        return new Constant(0.0);
    }
    eval(variableMap) {
        return this.value;
    }
    execute(variableValues) {
        return this.value;
    }
    simplify() {
        return this.clone();
    }
    print() {
        return this.value.toString();
    }
}
exports.Constant = Constant;
class Negation extends Expression {
    constructor(inner) {
        super(exports.NodeType._Negation);
        this.inner = inner;
    }
    clone() {
        return new Negation(this.inner.clone());
    }
    differentiate(variable, epsilon) {
        return new Negation(this.inner.differentiate(variable, epsilon));
    }
    eval(variableMap) {
        return -this.inner.eval(variableMap);
    }
    execute(variableValues) {
        return -this.inner.execute(variableValues);
    }
    simplify() {
        let node = this.inner.simplify();
        if (node instanceof Constant)
            return new Constant(-node.value);
        if (node instanceof Negation) {
            return node.inner;
        }
        return new Negation(node);
    }
    print() {
        let arg = this.inner.print();
        return "-" + (this.inner.type >= this.type ? "(" + arg + ")" : arg);
    }
}
exports.Negation = Negation;
class BinaryOp extends Expression {
    constructor(type, left, right) {
        super(type);
        this.left = left;
        this.right = right;
    }
}
class Multiplication extends BinaryOp {
    constructor(left, right) {
        super(exports.NodeType._Multiplication, left, right);
    }
    clone() {
        return new Multiplication(this.left.clone(), this.right.clone());
    }
    differentiate(variable, epsilon) {
        return new Addition(new Multiplication(this.left.differentiate(variable, epsilon), this.right.clone()), new Multiplication(this.left.clone(), this.right.differentiate(variable, epsilon)));
    }
    eval(variableMap) {
        return this.left.eval(variableMap) * this.right.eval(variableMap);
    }
    execute(variableValues) {
        return this.left.execute(variableValues) * this.right.execute(variableValues);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant) {
            if (r instanceof Constant) {
                return new Constant(l.value * r.value);
            }
            if (Math.abs(l.value) == 0.0)
                return l;
            if (l.value == 1)
                return r;
            if (l.value == -1)
                return new Negation(r);
        }
        else if (r instanceof Constant) {
            if (Math.abs(r.value) == 0.0)
                return r;
            if (r.value == 1)
                return l;
            if (r.value == -1)
                return new Negation(l);
        }
        return new Multiplication(l, r);
    }
    print() {
        let l = this.left.print();
        let r = this.right.print();
        return (this.left.type > this.type ? "(" + l + ")" : l) + "*" + (this.right.type > this.type ? "(" + r + ")" : r);
    }
}
exports.Multiplication = Multiplication;
class Addition extends BinaryOp {
    constructor(left, right) {
        super(exports.NodeType._Addition, left, right);
    }
    clone() {
        return new Addition(this.left.clone(), this.right.clone());
    }
    differentiate(variable, epsilon) {
        return new Addition(this.left.differentiate(variable, epsilon), this.right.differentiate(variable, epsilon));
    }
    eval(variableMap) {
        return this.left.eval(variableMap) + this.right.eval(variableMap);
    }
    execute(variableValues) {
        return this.left.execute(variableValues) + this.right.execute(variableValues);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant) {
            if (r instanceof Constant) {
                return new Constant(l.value + r.value);
            }
            if (Math.abs(l.value) == 0)
                return r;
        }
        else if (r instanceof Constant) {
            if (Math.abs(r.value) == 0.0)
                return l;
        }
        return new Addition(l, r);
    }
    print() {
        let l = this.left.print();
        let r = this.right.print();
        return (this.left.type > this.type ? "(" + l + ")" : l) + "+" + (this.right.type > this.type ? "(" + r + ")" : r);
    }
}
exports.Addition = Addition;
class Subtraction extends BinaryOp {
    constructor(left, right) {
        super(exports.NodeType._Subtraction, left, right);
    }
    clone() {
        return new Subtraction(this.left.clone(), this.right.clone());
    }
    differentiate(variable, epsilon) {
        return new Subtraction(this.left.differentiate(variable, epsilon), this.right.differentiate(variable, epsilon));
    }
    eval(variableMap) {
        return this.left.eval(variableMap) - this.right.eval(variableMap);
    }
    execute(variableValues) {
        return this.left.execute(variableValues) - this.right.execute(variableValues);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant) {
            if (r instanceof Constant) {
                return new Constant(l.value - r.value);
            }
            if (Math.abs(l.value) == 0)
                return new Negation(r);
        }
        else if (r instanceof Constant) {
            if (Math.abs(r.value) == 0)
                return l;
        }
        return new Subtraction(l, r);
    }
    print() {
        let l = this.left.print();
        let r = this.right.print();
        return (this.left.type > this.type ? "(" + l + ")" : l) + "-" + (this.right.type >= this.type ? "(" + r + ")" : r);
    }
}
exports.Subtraction = Subtraction;
class Division extends BinaryOp {
    constructor(left, right) {
        super(exports.NodeType._Division, left, right);
    }
    clone() {
        return new Division(this.left.clone(), this.right.clone());
    }
    differentiate(variable, epsilon) {
        return new Subtraction(new Division(this.left.differentiate(variable, epsilon), this.right.clone()), new Multiplication(this.right.differentiate(variable, epsilon), new Division(this.left.clone(), new Function("pow", [
            this.right.clone(), new Constant(2)
        ]))));
    }
    eval(variableMap) {
        return this.left.eval(variableMap) / this.right.eval(variableMap);
    }
    execute(variableValues) {
        return this.left.execute(variableValues) / this.right.execute(variableValues);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant) {
            if (Math.abs(l.value) == 0.0)
                return l;
            if (r instanceof Constant) {
                return new Constant(l.value / r.value);
            }
        }
        else if (r instanceof Constant) {
            if (r.value == 1)
                return l;
            if (r.value == -1)
                return new Negation(l);
        }
        return new Division(l, r);
    }
    print() {
        let l = this.left.print();
        let r = this.right.print();
        return (this.left.type >= this.type ? "(" + l + ")" : l) + "/" + (this.right.type >= this.type ? "(" + r + ")" : r);
    }
}
exports.Division = Division;
class Function extends Expression {
    constructor(functionName, args) {
        super(exports.NodeType._Function);
        this.functionName = functionName;
        this.function = functions_1.functionDictionary[functionName];
        this.args = args;
        if (this.function === undefined)
            throw `Unknown function \"${functionName}`;
        if (this.function.argCount != args.length)
            throw `Incorrect number of arguments in function \"${functionName}: ${args.length}, ${this.function.argCount} expected`;
    }
    clone() {
        return new Function(this.functionName, this.args.map(function (item) {
            return item.clone();
        }));
    }
    differentiate(variable, epsilon) {
        if (this.args.length == 0)
            return new Constant(0.0);
        if (this.args.length == 1) {
            return new Multiplication(this.args[0].differentiate(variable, epsilon), this.getDerivative(0, epsilon));
        }
        let root = new Addition(null, null);
        let current = root;
        for (let i = 0; i < this.args.length - 1; i++) {
            current.left = new Multiplication(this.args[i].differentiate(variable, epsilon), this.getDerivative(i, epsilon));
            if (i < this.args.length - 2) {
                current.right = new Addition(null, null);
                current = current.right;
            }
        }
        current.right = new Multiplication(this.args[this.args.length - 1].differentiate(variable, epsilon), this.getDerivative(this.args.length - 1, epsilon));
        return root;
    }
    eval(variableMap) {
        let args = this.args.map((item) => {
            return item.eval(variableMap);
        });
        return this.function.exec(args);
    }
    execute(variableValues) {
        let args = this.args.map((item) => {
            return item.execute(variableValues);
        });
        return this.function.exec(args);
    }
    getDerivative(index, epsilon) {
        if (this.function.derivatives === null) { //use backward difference{
            let argumentsBackward = this.args.slice();
            argumentsBackward[index] = new Subtraction(argumentsBackward[index], new Constant(epsilon));
            return new Division(new Subtraction(new Function(this.functionName, this.args), new Function(this.functionName, argumentsBackward)), new Constant(epsilon));
        }
        return this.function.derivatives[index](this.args);
    }
    simplify() {
        let constantArgs = true;
        let args = this.args.map((item) => {
            let _item = item.simplify();
            constantArgs = constantArgs && (item instanceof Constant);
            return _item;
        });
        if (constantArgs) {
            let constArgs = args.map((item) => { return item.value; });
            return new Constant(this.function.exec(constArgs));
        }
        this.args = args;
        return this;
    }
    print() {
        let args = this.args.map((item) => item.print());
        let result = this.function.name + "(";
        this.args.forEach((item, index) => {
            result += (index > 0 ? ", " : "") + item.print();
        });
        return result + ")";
    }
}
exports.Function = Function;
class Variable extends Expression {
    constructor(index, name) {
        super(exports.NodeType._Variable);
        this.index = index;
        this.name = name;
    }
    clone() {
        return new Variable(this.index, this.name);
    }
    differentiate(variable, epsilon) {
        if (variable == this.name)
            return new Constant(1.0);
        return new Constant(0.0);
    }
    eval(variableMap) {
        return variableMap[this.name];
    }
    execute(variableValues) {
        return variableValues[this.index];
    }
    simplify() {
        return this.clone();
    }
    print() {
        return this.name;
    }
}
exports.Variable = Variable;
class TernaryOperator extends Expression {
    constructor(condition, t, f) {
        super(exports.NodeType._Ternary);
        this.condition = condition;
        this.t = t;
        this.f = f;
    }
    clone() {
        return new TernaryOperator(this.condition.clone(), this.t.clone(), this.f.clone());
    }
    differentiate(variable, epsilon) {
        return new TernaryOperator(this.condition.clone(), this.t.differentiate(variable, epsilon), this.f.differentiate(variable, epsilon));
    }
    eval(variableMap) {
        if (this.condition.eval(variableMap)) {
            return this.t.eval(variableMap);
        }
        return this.f.eval(variableMap);
    }
    execute(variableValues) {
        if (this.condition.execute(variableValues)) {
            return this.t.execute(variableValues);
        }
        return this.f.execute(variableValues);
    }
    simplify() {
        let condition = this.condition.simplify();
        if (condition instanceof BoolConstant) {
            let constant = condition;
            if (constant.value)
                return this.t.simplify();
            return this.f.simplify();
        }
        return new TernaryOperator(condition, this.t.simplify(), this.f.simplify());
    }
    print() {
        return `{${this.condition.print()}?${this.t.print()}:${this.f.print()}}`;
    }
}
exports.TernaryOperator = TernaryOperator;
class BoolExpression {
}
exports.BoolExpression = BoolExpression;
class BoolBinaryOp extends BoolExpression {
    constructor(left, right) {
        super();
        this.left = left;
        this.right = right;
    }
}
class BoolBinaryExpOp extends BoolExpression {
    constructor(left, right) {
        super();
        this.left = left;
        this.right = right;
    }
}
class And extends BoolBinaryOp {
    clone() {
        return new And(this.left.clone(), this.right.clone());
    }
    eval(variableMap) {
        return this.left.eval(variableMap) && this.right.eval(variableMap);
    }
    execute(variableMap) {
        return this.left.execute(variableMap) && this.right.execute(variableMap);
    }
    simplify() {
        let l = this.left.simplify();
        if (l instanceof BoolConstant) {
            if (l.value == false)
                return l;
            return this.right.simplify();
        }
        let r = this.right.simplify();
        if (r instanceof BoolConstant) {
            if (r.value == false) {
                return r;
            }
            return l;
        }
        return new And(l, r);
    }
    convertToExpression(epsilon) {
        return new Function("min", [this.left.convertToExpression(epsilon), this.right.convertToExpression(epsilon)]);
    }
    print() {
        return `(${this.left.print()}) and (${this.right.print()})`;
    }
}
exports.And = And;
class Or extends BoolBinaryOp {
    clone() {
        return new Or(this.left.clone(), this.right.clone());
    }
    eval(variableMap) {
        return this.left.eval(variableMap) || this.right.eval(variableMap);
    }
    execute(variableMap) {
        return this.left.execute(variableMap) || this.right.execute(variableMap);
    }
    simplify() {
        let l = this.left.simplify();
        if (l instanceof BoolConstant) {
            if (l.value == true)
                return l;
            return this.right.simplify();
        }
        let r = this.right.simplify();
        if (r instanceof BoolConstant) {
            if (r.value == true) {
                return r;
            }
            return l;
        }
        return new Or(l, r);
    }
    convertToExpression(epsilon) {
        return new Function("max", [this.left.convertToExpression(epsilon), this.right.convertToExpression(epsilon)]);
    }
    print() {
        return `(${this.left.print()}) or (${this.right.print()})`;
    }
}
exports.Or = Or;
class Equal extends BoolBinaryExpOp {
    clone() {
        return new Equal(this.left, this.right);
    }
    eval(variableMap) {
        return this.left.eval(variableMap) == this.right.eval(variableMap);
    }
    execute(variableMap) {
        return this.left.execute(variableMap) == this.right.execute(variableMap);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant && r instanceof Constant) {
            return new BoolConstant(l.value == r.value);
        }
        return new Equal(l, r);
    }
    convertToExpression(epsilon) {
        return new Subtraction(new Constant(epsilon * epsilon), new Function("pow", [new Subtraction(this.left.clone(), this.right.clone()), new Constant(2)]));
    }
    print() {
        return `${this.left.print()} = ${this.right.print()}`;
    }
}
exports.Equal = Equal;
class NotEqual extends BoolBinaryExpOp {
    clone() {
        return new NotEqual(this.left, this.right);
    }
    eval(variableMap) {
        return this.left.eval(variableMap) != this.right.eval(variableMap);
    }
    execute(variableMap) {
        return this.left.execute(variableMap) != this.right.execute(variableMap);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant && r instanceof Constant) {
            return new BoolConstant(l.value != r.value);
        }
        return new NotEqual(l, r);
    }
    convertToExpression(epsilon) {
        return new Addition(new Constant(-epsilon * epsilon), new Function("pow", [new Subtraction(this.left.clone(), this.right.clone()), new Constant(2)]));
    }
    print() {
        return `${this.left.print()} != ${this.right.print()}`;
    }
}
exports.NotEqual = NotEqual;
class Greater extends BoolBinaryExpOp {
    clone() {
        return new Greater(this.left, this.right);
    }
    eval(variableMap) {
        return this.left.eval(variableMap) > this.right.eval(variableMap);
    }
    execute(variableMap) {
        return this.left.execute(variableMap) > this.right.execute(variableMap);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant && r instanceof Constant) {
            return new BoolConstant(l.value > r.value);
        }
        return new Greater(l, r);
    }
    convertToExpression(epsilon) {
        return new Subtraction(this.left.clone(), this.right.clone());
    }
    print() {
        return `${this.left.print()}>${this.right.print()}`;
    }
}
exports.Greater = Greater;
class GEqual extends BoolBinaryExpOp {
    clone() {
        return new GEqual(this.left, this.right);
    }
    eval(variableMap) {
        return this.left.eval(variableMap) >= this.right.eval(variableMap);
    }
    execute(variableMap) {
        return this.left.execute(variableMap) >= this.right.execute(variableMap);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant && r instanceof Constant) {
            return new BoolConstant(l.value >= r.value);
        }
        return new GEqual(l, r);
    }
    convertToExpression(epsilon) {
        return new Addition(new Subtraction(this.left.clone(), this.right.clone()), new Constant(epsilon));
    }
    print() {
        return `${this.left.print()} >= ${this.right.print()}`;
    }
}
exports.GEqual = GEqual;
class Less extends BoolBinaryExpOp {
    clone() {
        return new Less(this.left, this.right);
    }
    eval(variableMap) {
        return this.left.eval(variableMap) < this.right.eval(variableMap);
    }
    execute(variableMap) {
        return this.left.execute(variableMap) < this.right.execute(variableMap);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant && r instanceof Constant) {
            return new BoolConstant(l.value < r.value);
        }
        return new Less(l, r);
    }
    convertToExpression(epsilon) {
        return new Subtraction(this.right.clone(), this.left.clone());
    }
    print() {
        return `${this.left.print()} < ${this.right.print()}`;
    }
}
exports.Less = Less;
class LEqual extends BoolBinaryExpOp {
    clone() {
        return new LEqual(this.left, this.right);
    }
    eval(variableMap) {
        return this.left.eval(variableMap) <= this.right.eval(variableMap);
    }
    execute(variableMap) {
        return this.left.execute(variableMap) <= this.right.execute(variableMap);
    }
    simplify() {
        let l = this.left.simplify();
        let r = this.right.simplify();
        if (l instanceof Constant && r instanceof Constant) {
            return new BoolConstant(l.value <= r.value);
        }
        return new LEqual(l, r);
    }
    convertToExpression(epsilon) {
        return new Addition(new Subtraction(this.right.clone(), this.left.clone()), new Constant(epsilon));
    }
    print() {
        return `${this.left.print()} <= ${this.right.print()}`;
    }
}
exports.LEqual = LEqual;
class BoolNot extends BoolExpression {
    constructor(inner) {
        super();
        this.inner = inner;
    }
    clone() {
        return new BoolNot(this.inner.clone());
    }
    execute(variableValues) {
        return !this.inner.execute(variableValues);
    }
    eval(variableMap) {
        return !this.inner.eval(variableMap);
    }
    simplify() {
        let i = this.inner.simplify();
        if (i instanceof BoolConstant) {
            return new BoolConstant(!i.value);
        }
        return new BoolNot(i);
    }
    convertToExpression(epsilon) {
        return new Constant(-this.inner.convertToExpression(epsilon));
    }
    print() {
        return `!(${this.inner.print()})`;
    }
}
exports.BoolNot = BoolNot;
class BoolConstant extends BoolExpression {
    constructor(value) {
        super();
        this.value = value;
    }
    clone() {
        return new BoolConstant(this.value);
    }
    eval(variableMap) {
        return this.value;
    }
    execute(variableValues) {
        return this.value;
    }
    simplify() {
        return this.clone();
    }
    convertToExpression() {
        return new Constant(this.value ? 1 : -1);
    }
    print() {
        return this.value ? "true" : "false";
    }
}
exports.BoolConstant = BoolConstant;


/***/ }),

/***/ "./src/compiler/expressionCompiler.ts":
/*!********************************************!*\
  !*** ./src/compiler/expressionCompiler.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileExpression = exports.compileBoolExpression = exports.hasDerivative = exports.ExpCompilerContext = void 0;
const error_1 = __importDefault(__webpack_require__(/*! ./error */ "./src/compiler/error.ts"));
const astNode_1 = __webpack_require__(/*! ./astNode */ "./src/compiler/astNode.ts");
const expression_1 = __webpack_require__(/*! ./expression */ "./src/compiler/expression.ts");
class ExpCompilerContext {
}
exports.ExpCompilerContext = ExpCompilerContext;
function hasDerivative(node) {
    switch (node.type) {
        case astNode_1.NodeType._Addition: {
            let add = node;
            return hasDerivative(add.left) || hasDerivative(add.right);
        }
        case astNode_1.NodeType._Subtraction: {
            let sub = node;
            return hasDerivative(sub.left) || hasDerivative(sub.right);
        }
        case astNode_1.NodeType._Multiplication: {
            let mul = node;
            return hasDerivative(mul.left) || hasDerivative(mul.right);
        }
        case astNode_1.NodeType._Division: {
            let div = node;
            return hasDerivative(div.left) || hasDerivative(div.right);
        }
        case astNode_1.NodeType._Negation: {
            let neg = node;
            return hasDerivative(neg.inner);
        }
        case astNode_1.NodeType._Function: {
            let fun = node;
            let result = false;
            fun.args.forEach(function (arg) {
                result = result || hasDerivative(arg);
            });
            return result;
        }
        case astNode_1.NodeType._Ternary: {
            let ter = node;
            return hasDerivative(ter.condition) || hasDerivative(ter.true) || hasDerivative(ter.false);
        }
        case astNode_1.NodeType._Constant: {
            return false;
        }
        case astNode_1.NodeType._Derivative: {
            return true;
        }
        case astNode_1.NodeType._VarIdentifier: {
            return false;
        }
        case astNode_1.NodeType._And: {
            let and = node;
            return hasDerivative(and.left) || hasDerivative(and.right);
        }
        case astNode_1.NodeType._Or: {
            let or = node;
            return hasDerivative(or.left) || hasDerivative(or.right);
        }
        case astNode_1.NodeType._Not: {
            let not = node;
            return hasDerivative(not.inner);
        }
        case astNode_1.NodeType._Greater: {
            let g = node;
            return hasDerivative(g.left) || hasDerivative(g.right);
        }
        case astNode_1.NodeType._GreaterEqual: {
            let ge = node;
            return hasDerivative(ge.left) || hasDerivative(ge.right);
        }
        case astNode_1.NodeType._Less: {
            let l = node;
            return hasDerivative(l.left) || hasDerivative(l.right);
        }
        case astNode_1.NodeType._LessEqual: {
            let le = node;
            return hasDerivative(le.left) || hasDerivative(le.right);
        }
        case astNode_1.NodeType._Equal: {
            let e = node;
            return hasDerivative(e.left) || hasDerivative(e.right);
        }
        case astNode_1.NodeType._NotEqual: {
            let ne = node;
            return hasDerivative(ne.left) || hasDerivative(ne.right);
        }
        case astNode_1.NodeType._BoolConstant: {
            return false;
        }
        default:
            throw new Error("Unexpected node type in hasDerivative()");
    }
}
exports.hasDerivative = hasDerivative;
function compileBoolExpression(item, context) {
    switch (item.type) {
        case astNode_1.NodeType._And: {
            let and = item;
            return new expression_1.And(compileBoolExpression(and.left, context), compileBoolExpression(and.right, context));
        }
        case astNode_1.NodeType._Or: {
            let or = item;
            return new expression_1.Or(compileBoolExpression(or.left, context), compileBoolExpression(or.right, context));
        }
        case astNode_1.NodeType._Not: {
            let not = item;
            return new expression_1.BoolNot(compileBoolExpression(not.inner, context));
        }
        case astNode_1.NodeType._Greater: {
            let g = item;
            return new expression_1.Greater(compileExpression(g.left, context), compileExpression(g.right, context));
        }
        case astNode_1.NodeType._GreaterEqual: {
            let ge = item;
            return new expression_1.GEqual(compileExpression(ge.left, context), compileExpression(ge.right, context));
        }
        case astNode_1.NodeType._Less: {
            let l = item;
            return new expression_1.Less(compileExpression(l.left, context), compileExpression(l.right, context));
        }
        case astNode_1.NodeType._LessEqual: {
            let le = item;
            return new expression_1.LEqual(compileExpression(le.left, context), compileExpression(le.right, context));
        }
        case astNode_1.NodeType._Equal: {
            let e = item;
            return new expression_1.Equal(compileExpression(e.left, context), compileExpression(e.right, context));
        }
        case astNode_1.NodeType._NotEqual: {
            let ne = item;
            return new expression_1.NotEqual(compileExpression(ne.left, context), compileExpression(ne.right, context));
        }
        case astNode_1.NodeType._BoolConstant: {
            let bc = item;
            return new expression_1.BoolConstant(bc.value);
        }
        default:
            context.errors.push(new error_1.default(item.textPos, "Unexpected boolean expression type at compileExpression()"));
            return new expression_1.BoolConstant(false);
    }
}
exports.compileBoolExpression = compileBoolExpression;
function compileExpression(item, context) {
    switch (item.type) {
        case astNode_1.NodeType._Addition: {
            let add = item;
            return new expression_1.Addition(compileExpression(add.left, context), compileExpression(add.right, context));
        }
        case astNode_1.NodeType._Subtraction: {
            let sub = item;
            return new expression_1.Subtraction(compileExpression(sub.left, context), compileExpression(sub.right, context));
        }
        case astNode_1.NodeType._Multiplication: {
            let mul = item;
            return new expression_1.Multiplication(compileExpression(mul.left, context), compileExpression(mul.right, context));
        }
        case astNode_1.NodeType._Division: {
            let div = item;
            return new expression_1.Division(compileExpression(div.left, context), compileExpression(div.right, context));
        }
        case astNode_1.NodeType._Negation: {
            let neg = item;
            return new expression_1.Negation(compileExpression(neg.inner, context));
        }
        case astNode_1.NodeType._Function: {
            let fun = item;
            try {
                return new expression_1.Function(fun.name, fun.args.map(function (arg) {
                    return compileExpression(arg, context);
                }));
            }
            catch (exception) {
                context.errors.push(new error_1.default(item.textPos, exception));
                return new expression_1.Constant(0);
            }
        }
        case astNode_1.NodeType._Constant: {
            let con = item;
            return new expression_1.Constant(con.value);
        }
        case astNode_1.NodeType._Ternary: {
            let ter = item;
            return new expression_1.TernaryOperator(compileBoolExpression(ter.condition, context), compileExpression(ter.true, context), compileExpression(ter.false, context));
        }
        case astNode_1.NodeType._VarIdentifier: {
            let _var = item;
            if (_var.indicies.length > 0) {
                window.alert("Var identifier compiler assert!");
                return new expression_1.Constant(0);
            }
            if (context.indicies.hasOwnProperty(_var.id)) {
                return new expression_1.Variable(context.indicies[_var.id], _var.id);
            }
            context.errors.push(new error_1.default(item.textPos, `Unknown variable "${_var.id}" at compileExpression()`));
            return new expression_1.Constant(0);
        }
        case astNode_1.NodeType._Derivative: {
            let _der = item;
            let id = _der.id.id + "'";
            if (_der.id.indicies.length > 0) {
                window.alert("Var identifier compiler assert!");
                return new expression_1.Constant(0);
            }
            if (context.indicies.hasOwnProperty(id)) {
                return new expression_1.Variable(context.indicies[id], id);
            }
            context.errors.push(new error_1.default(item.textPos, `Unknown variable "${id}" at compileExpression()`));
            return new expression_1.Constant(0);
        }
        default:
            context.errors.push(new error_1.default(item.textPos, "Unexpected expression type at compileExpression()"));
            return new expression_1.Constant(0);
    }
}
exports.compileExpression = compileExpression;


/***/ }),

/***/ "./src/compiler/functions.ts":
/*!***********************************!*\
  !*** ./src/compiler/functions.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.functionDictionary = exports.FunctionDef = void 0;
const expression_1 = __webpack_require__(/*! ./expression */ "./src/compiler/expression.ts");
class FunctionDef {
    constructor(name, argCount, derivatives) {
        this.name = name;
        this.argCount = argCount;
        this.derivatives = derivatives;
    }
    getDerivative(index, args) {
        return this.derivatives[index](args);
    }
}
exports.FunctionDef = FunctionDef;
class sin extends FunctionDef {
    constructor() {
        super("sin", 1, [sin.der]);
    }
    exec(args) {
        return Math.sin(args[0]);
    }
    static der(args) {
        return new expression_1.Function("cos", args);
    }
}
class cos extends FunctionDef {
    constructor() {
        super("cos", 1, [cos.der]);
    }
    exec(args) {
        return Math.cos(args[0]);
    }
    static der(args) {
        return new expression_1.Negation(new expression_1.Function("cos", args));
    }
}
class sinc extends FunctionDef {
    constructor() {
        super("sinc", 1, [sinc.der]);
    }
    exec(args) {
        if (args[0] < 0.0001)
            return 1.0 - args[0] * args[0] / 6.0 * (1. - args[0] * args[0] / 20); //truncated maclaurin series 
        return Math.sin(args[0]) / args[0];
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Subtraction(new expression_1.Function("cos", args), new expression_1.Function("sinc", args)), args[0]);
    }
}
;
class tan extends FunctionDef {
    constructor() {
        super("tan", 1, [tan.der]);
    }
    exec(args) {
        return Math.tan(args[0]);
    }
    static der(args) {
        return new expression_1.Function("pow", [
            new expression_1.Function("cos", args),
            new expression_1.Constant(2)
        ]);
    }
}
;
class cot extends FunctionDef {
    constructor() {
        super("cot", 1, [cot.der]);
    }
    exec(args) {
        return Math.cos(args[0]) / Math.sin(args[0]);
    }
    static der(args) {
        return new expression_1.Negation(new expression_1.Function("pow", [
            new expression_1.Function("sin", args),
            new expression_1.Constant(2)
        ]));
    }
}
;
class asin extends FunctionDef {
    constructor() {
        super("asin", 1, [asin.der]);
    }
    exec(args) {
        return Math.asin(args[0]);
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(1.0), new expression_1.Function("sqrt", [
            new expression_1.Subtraction(new expression_1.Constant(1), new expression_1.Multiplication(args[0], args[0]))
        ]));
    }
}
;
class acos extends FunctionDef {
    constructor() {
        super("acos", 1, [acos.der]);
    }
    exec(args) {
        return Math.acos(args[0]);
    }
    static der(args) {
        return new expression_1.Negation(new expression_1.Division(new expression_1.Constant(1.0), new expression_1.Function("sqrt", [
            new expression_1.Subtraction(new expression_1.Constant(1), new expression_1.Multiplication(args[0], args[0]))
        ])));
    }
}
;
class atan extends FunctionDef {
    constructor() {
        super("atan", 1, [atan.der]);
    }
    exec(args) {
        return Math.atan(args[0]);
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(1.0), new expression_1.Addition(new expression_1.Constant(1), new expression_1.Multiplication(args[0], args[0])));
    }
}
;
class acot extends FunctionDef {
    constructor() {
        super("acot", 1, [acot.der]);
    }
    exec(args) {
        return Math.PI / 2 - Math.atan(args[0]);
    }
    static der(args) {
        return new expression_1.Negation(new expression_1.Division(new expression_1.Constant(1.0), new expression_1.Addition(new expression_1.Constant(1), new expression_1.Multiplication(args[0], args[0]))));
    }
}
;
class sinh extends FunctionDef {
    constructor() {
        super("sinh", 1, [sinh.der]);
    }
    exec(args) {
        return Math.sinh(args[0]);
    }
    static der(args) {
        return new expression_1.Function("cosh", args);
    }
}
;
class cosh extends FunctionDef {
    constructor() {
        super("cosh", 1, [cosh.der]);
    }
    exec(args) {
        return Math.cosh(args[0]);
    }
    static der(args) {
        return new expression_1.Function("sinh", args);
    }
}
;
class tanh extends FunctionDef {
    constructor() {
        super("tanh", 1, [tanh.der]);
    }
    exec(args) {
        return Math.tanh(args[0]);
    }
    static der(args) {
        return new expression_1.Function("pow", [
            new expression_1.Function("cosh", args),
            new expression_1.Constant(-2)
        ]);
    }
}
;
class coth extends FunctionDef {
    constructor() {
        super("coth", 1, [coth.der]);
    }
    exec(args) {
        return 1.0 / Math.tanh(args[0]);
    }
    static der(args) {
        return new expression_1.Negation(new expression_1.Function("pow", [
            new expression_1.Function("sinh", args),
            new expression_1.Constant(-2)
        ]));
    }
}
;
class asinh extends FunctionDef {
    constructor() {
        super("asinh", 1, [asinh.der]);
    }
    exec(args) {
        return Math.asinh(args[0]);
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(1), new expression_1.Function("sqrt", [new expression_1.Addition(new expression_1.Multiplication(args[0], args[0]), new expression_1.Constant(1))]));
    }
}
;
class acosh extends FunctionDef {
    constructor() {
        super("acosh", 1, [acosh.der]);
    }
    exec(args) {
        return Math.acosh(args[0]);
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(1), new expression_1.Function("sqrt", [new expression_1.Subtraction(new expression_1.Multiplication(args[0], args[0]), new expression_1.Constant(1))]));
    }
}
;
class atanh extends FunctionDef {
    constructor() {
        super("atanh", 1, [atanh.der]);
    }
    exec(args) {
        return Math.atanh(args[0]);
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(1), new expression_1.Subtraction(new expression_1.Constant(1), new expression_1.Multiplication(args[0], args[0])));
    }
}
;
class acoth extends FunctionDef {
    constructor() {
        super("acoth", 1, [acoth.der]);
    }
    exec(args) {
        return 0.5 * Math.log((1 + args[0]) / (args[0] - 1));
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(1), new expression_1.Subtraction(new expression_1.Constant(1), new expression_1.Multiplication(args[0], args[0])));
    }
}
;
class erf extends FunctionDef {
    constructor() {
        super("erf", 1, [erf.der]);
    }
    static call(x) {
        var sign = Math.sign(x);
        x = Math.abs(x);
        var a1 = 0.254829592;
        var a2 = -0.284496736;
        var a3 = 1.421413741;
        var a4 = -1.453152027;
        var a5 = 1.061405429;
        var p = 0.3275911;
        var t = 1.0 / (1.0 + p * x);
        var y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);
        return sign * y;
    }
    exec(args) {
        return erf.call(args[0]);
    }
    static der(args) {
        return new expression_1.Multiplication(new expression_1.Constant(2.0 / Math.sqrt(Math.PI)), new expression_1.Function("exp", [new expression_1.Negation(new expression_1.Multiplication(args[0], args[0]))]));
    }
}
;
class exp extends FunctionDef {
    constructor() {
        super("exp", 1, [exp.der]);
    }
    exec(args) {
        return Math.exp(args[0]);
    }
    static der(args) {
        return new expression_1.Function("exp", args);
    }
}
;
class pow extends FunctionDef {
    constructor() {
        super("pow", 2, [pow.derX, pow.derY]);
    }
    exec(args) {
        return Math.pow(args[0], args[1]);
    }
    static derX(args) {
        return new expression_1.Multiplication(args[1], new expression_1.Function("pow", [
            args[0], new expression_1.Subtraction(args[1], new expression_1.Constant(1))
        ]));
    }
    static derY(args) {
        return new expression_1.Multiplication(new expression_1.Function("ln", [args[0]]), new expression_1.Function("pow", args));
    }
}
;
class ln extends FunctionDef {
    constructor() {
        super("ln", 1, [ln.der]);
    }
    exec(args) {
        return Math.log(args[0]);
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(1.0), args[0]);
    }
}
;
class log extends FunctionDef {
    constructor() {
        super("log", 2, [log.derX, log.derY]);
    }
    exec(args) {
        return Math.log(args[1]) / Math.log(args[0]);
    }
    static derX(args) {
        return new expression_1.Division(new expression_1.Function("ln", [args[1]]), new expression_1.Multiplication(new expression_1.Function("pow", [
            new expression_1.Function("ln", [args[0]]),
            new expression_1.Constant(2)
        ]), args[0]));
    }
    static derY(args) {
        return new expression_1.Division(new expression_1.Constant(1), new expression_1.Multiplication(args[1], new expression_1.Function("ln", [args[0]])));
    }
}
;
class lg extends FunctionDef {
    constructor() {
        super("lg", 1, [lg.der]);
    }
    exec(args) {
        return Math.log10(args[0]);
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(1.0 / Math.log(10)), args[0]);
    }
}
;
class sqrt extends FunctionDef {
    constructor() {
        super("sqrt", 1, [sqrt.der]);
    }
    exec(args) {
        return Math.sqrt(args[0]);
    }
    static der(args) {
        return new expression_1.Division(new expression_1.Constant(0.5), new expression_1.Function("sqrt", args));
    }
}
;
class abs extends FunctionDef {
    constructor() {
        super("abs", 1, [abs.der]);
    }
    exec(args) {
        return Math.abs(args[0]);
    }
    static der(args) {
        return new expression_1.Function("step", args);
    }
}
;
class min extends FunctionDef {
    constructor() {
        super("min", 2, null);
    }
    exec(args) {
        return Math.min(args[0], args[1]);
    }
}
;
class max extends FunctionDef {
    constructor() {
        super("max", 2, null);
    }
    exec(args) {
        return Math.max(args[0], args[1]);
    }
}
;
class sign extends FunctionDef {
    constructor() {
        super("sign", 1, null);
    }
    exec(args) {
        return Math.sign(args[0]);
    }
}
;
class step extends FunctionDef {
    constructor() {
        super("step", 1, null);
    }
    static call(x) {
        return x < 0 ? 0 : 1;
    }
    exec(args) {
        return step.call(args[0]);
    }
}
;
class frac extends FunctionDef {
    constructor() {
        super("frac", 1, null);
    }
    static call(x) {
        return (x - Math.floor(x));
    }
    exec(args) {
        return frac.call(args[0]);
    }
}
class smoothstep extends FunctionDef {
    constructor() {
        super("smoothstep", 1, null);
    }
    static call(x) {
        x = Math.max(Math.min(1, x), 0);
        return x * x * (3 - 2 * x);
    }
    exec(args) {
        return smoothstep.call(args[0]);
    }
}
;
class e extends FunctionDef {
    constructor() {
        super("e", 0, []);
    }
    exec(args) {
        return Math.E;
    }
}
;
class pi extends FunctionDef {
    constructor() {
        super("pi", 0, []);
    }
    exec(args) {
        return Math.PI;
    }
}
;
exports.functionDictionary = {
    sin: new sin(),
    cos: new cos(),
    tan: new tan(),
    cot: new cot(),
    asin: new asin(),
    acos: new acos(),
    atan: new atan(),
    acot: new acot(),
    sinh: new sinh(),
    cosh: new cosh(),
    tanh: new tanh(),
    coth: new coth(),
    asinh: new asinh(),
    acosh: new acosh(),
    atanh: new atanh(),
    acoth: new acoth(),
    erf: new erf(),
    exp: new exp(),
    pow: new pow(),
    ln: new ln(),
    log: new log(),
    lg: new lg(),
    sqrt: new sqrt(),
    abs: new abs(),
    min: new min(),
    max: new max(),
    sign: new sign(),
    step: new step(),
    frac: new frac(),
    smoothstep: new smoothstep(),
    e: new e(),
    pi: new pi(),
    sinc: new sinc()
};


/***/ }),

/***/ "./src/compiler/hybridCompiler.ts":
/*!****************************************!*\
  !*** ./src/compiler/hybridCompiler.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HybridSystemCompiler = void 0;
const edaeHybridSystem_1 = __webpack_require__(/*! ../dae/edaeHybridSystem */ "./src/dae/edaeHybridSystem.ts");
const astNode_1 = __webpack_require__(/*! ./astNode */ "./src/compiler/astNode.ts");
const idaeHybridSystem_1 = __webpack_require__(/*! ../dae/idaeHybridSystem */ "./src/dae/idaeHybridSystem.ts");
const error_1 = __importDefault(__webpack_require__(/*! ./error */ "./src/compiler/error.ts"));
const errorListener_1 = __importDefault(__webpack_require__(/*! ./errorListener */ "./src/compiler/errorListener.ts"));
const visitor_1 = __importDefault(__webpack_require__(/*! ./visitor */ "./src/compiler/visitor.ts"));
const index_1 = __importDefault(__webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js"));
const odeGrammarLexer_js_1 = __importDefault(__webpack_require__(/*! ../grammar/antlrOutput/odeGrammarLexer.js */ "./src/grammar/antlrOutput/odeGrammarLexer.js"));
const odeGrammarParser_js_1 = __importDefault(__webpack_require__(/*! ../grammar/antlrOutput/odeGrammarParser.js */ "./src/grammar/antlrOutput/odeGrammarParser.js"));
const compilerContext_1 = __webpack_require__(/*! ./compilerContext */ "./src/compiler/compilerContext.ts");
const expressionCompiler_1 = __webpack_require__(/*! ./expressionCompiler */ "./src/compiler/expressionCompiler.ts");
const customEDAEHybridState_1 = __webpack_require__(/*! ../dae/customEDAEHybridState */ "./src/dae/customEDAEHybridState.ts");
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const customHybridStateLink_1 = __webpack_require__(/*! ../dae/customHybridStateLink */ "./src/dae/customHybridStateLink.ts");
const customIDAEHybridState_1 = __webpack_require__(/*! ../dae/customIDAEHybridState */ "./src/dae/customIDAEHybridState.ts");
const compilerError_1 = __webpack_require__(/*! ./compilerError */ "./src/compiler/compilerError.ts");
class VariableEntry {
    constructor(name, isAlgebraic, initialValue = 0) {
        this.name = name;
        this.initialValue = initialValue;
        this.isAlgebraic = isAlgebraic;
    }
}
class EquationEntry {
    constructor(expression, isAlgebraic) {
        this.expression = expression;
        this.isAlgebraic = isAlgebraic;
    }
}
class Transition {
    constructor(incidentStates, condition) {
        this.incidentStates = incidentStates;
        this.condition = condition;
    }
}
class State {
    constructor() {
        this.equations = {};
        this.setters = {};
        this.transitions = [];
        this.isTerminal = false;
    }
}
class HybridSystemCompiler {
    constructor() {
        this.constants = {};
        this.states = { initial: new State() };
        this.variables = {};
        this.context = null;
        this.errors = [];
        this.currentState = "initial";
        this.epsilon = 1e-3;
        this.boolExpEpsilon = 1e-8;
    }
    compileExplicit(text) {
        this.isExplicit = true;
        var chars = new index_1.default.InputStream(text);
        var lexer = new odeGrammarLexer_js_1.default.odeGrammarLexer(chars);
        lexer.removeErrorListeners();
        var listener = new errorListener_1.default(this.errors);
        lexer.addErrorListener(listener);
        //@ts-ignore
        lexer.strictMode = false;
        var tokens = new index_1.default.CommonTokenStream(lexer);
        var parser = new odeGrammarParser_js_1.default.odeGrammarParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(listener);
        var visitor = new visitor_1.default();
        parser.buildParseTrees = true;
        var tree = parser.hybrid();
        //@ts-ignore
        //console.log(tree.toStringTree(parser.ruleNames));
        //check for parser/lexer errors
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let daeSystemDef = visitor.startHybrid(tree, listener);
        //for debug purposes
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let self = this;
        daeSystemDef.statements.forEach(function (item) {
            self.compileStatement(item);
        });
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        //set variable indicies
        let x = [];
        let z = [];
        let x0 = [];
        Object.entries(this.variables).forEach(function ([key, variable]) {
            if (variable.isAlgebraic) {
                z.push(key);
            }
            else {
                x.push(key);
                x0.push(variable.initialValue);
            }
        });
        //prepare variable indicies
        let algContext = { indicies: {}, errors: this.errors };
        let difContext = { indicies: {}, errors: this.errors };
        x.forEach(function (item, index) {
            algContext.indicies[item] = index;
            difContext.indicies[item] = index;
        });
        z.forEach(function (item, index) {
            difContext.indicies[item] = index + x.length;
        });
        algContext.indicies["t"] = x.length;
        difContext.indicies["t"] = x.length + z.length;
        //compile initial state
        let states = [];
        {
            let initialState = this.states["initial"];
            let f = [];
            let g = [];
            Object.entries(this.variables).forEach(function ([key, variable]) {
                if (!initialState.equations.hasOwnProperty(key)) {
                    self.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Missing equation for variable "${key}" in initial state`));
                    return;
                }
                let equation = initialState.equations[key];
                if (variable.isAlgebraic != equation.isAlgebraic) {
                    self.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Non compatible types of variable and equation "${key}" in initial state`));
                    return;
                }
                if (variable.isAlgebraic) {
                    g.push(expressionCompiler_1.compileExpression(equation.expression, algContext).simplify());
                }
                else {
                    f.push(expressionCompiler_1.compileExpression(equation.expression, difContext).simplify());
                }
            });
            let dfdx = [];
            let dfdz = [];
            let dgdx = [];
            let dgdt = [];
            f.forEach(function (item) {
                let dxRow = [];
                x.forEach(function (_x) {
                    dxRow.push(item.differentiate(_x, self.epsilon).simplify());
                });
                dfdx.push(dxRow);
                let dzRow = [];
                z.forEach(function (_z) {
                    dzRow.push(item.differentiate(_z, self.epsilon).simplify());
                });
                dfdz.push(dzRow);
            });
            g.forEach(function (item) {
                let dxRow = [];
                x.forEach(function (_x) {
                    dxRow.push(item.differentiate(_x, self.epsilon).simplify());
                });
                dgdx.push(dxRow);
                dgdt.push(item.differentiate("t", self.epsilon));
            });
            states.push(new customEDAEHybridState_1.CustomEDAEHybridState("initial", [], false).init(f, g, dfdx, dfdz, dgdx, dgdt));
        }
        //compile states
        let stateIndicies = { initial: 0 };
        Object.entries(this.states).forEach(function ([key, state]) {
            //skip initial state
            if (key == "initial")
                return;
            let f = [];
            let g = [];
            //check equations
            Object.entries(self.variables).forEach(function ([key, variable]) {
                if (!state.equations.hasOwnProperty(key)) {
                    //copy equations from initial state
                    if (variable.isAlgebraic) {
                        g.push(states[0]._g[g.length]);
                    }
                    else {
                        f.push(states[0]._f[f.length]);
                    }
                    return;
                }
                let equation = state.equations[key];
                if (variable.isAlgebraic != equation.isAlgebraic) {
                    self.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Non compatible types of variable and equation "${key}" in state "${key}"`));
                    return;
                }
                if (variable.isAlgebraic) {
                    g.push(expressionCompiler_1.compileExpression(equation.expression, algContext).simplify());
                }
                else {
                    f.push(expressionCompiler_1.compileExpression(equation.expression, difContext).simplify());
                }
            });
            //compile derivatives
            let dfdx = [];
            let dfdz = [];
            let dgdx = [];
            let dgdt = [];
            f.forEach(function (item) {
                let dxRow = [];
                x.forEach(function (_x) {
                    dxRow.push(item.differentiate(_x, self.epsilon).simplify());
                });
                dfdx.push(dxRow);
                let dzRow = [];
                z.forEach(function (_z) {
                    dzRow.push(item.differentiate(_z, self.epsilon).simplify());
                });
                dfdz.push(dzRow);
            });
            g.forEach(function (item) {
                let dxRow = [];
                x.forEach(function (_x) {
                    dxRow.push(item.differentiate(_x, self.epsilon).simplify());
                });
                dgdx.push(dxRow);
                dgdt.push(item.differentiate("t", self.epsilon));
            });
            stateIndicies[key] = states.length;
            states.push(new customEDAEHybridState_1.CustomEDAEHybridState(key, [], false).init(f, g, dfdx, dfdz, dgdx, dgdt));
        });
        //compile transitions
        Object.entries(this.states).forEach(function ([key, state]) {
            if (key == "initial")
                return;
            //compile setters
            let setters = [];
            Object.entries(state.setters).forEach(function ([key, setter]) {
                if (self.variables[key].isAlgebraic) {
                    return;
                }
                let variableIndex = algContext.indicies[key];
                setters.push({ index: variableIndex, expression: expressionCompiler_1.compileExpression(setter, difContext).simplify() });
            });
            let newStateIndex = stateIndicies[key];
            state.transitions.forEach(function (transition) {
                let p = expressionCompiler_1.compileBoolExpression(transition.condition, difContext).simplify().convertToExpression(self.boolExpEpsilon);
                let dpdt = p.differentiate("t", self.epsilon).simplify();
                let dpdx = [];
                let dpdz = [];
                Object.entries(self.variables).forEach(function ([key, variable]) {
                    if (variable.isAlgebraic) {
                        dpdz.push(p.differentiate(key, self.epsilon).simplify());
                    }
                    else {
                        dpdx.push(p.differentiate(key, self.epsilon).simplify());
                    }
                });
                transition.incidentStates.forEach(function (incidentState) {
                    if (!self.states.hasOwnProperty(incidentState)) {
                        self.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Unknown incident state "${incidentState}" in transition rule for state "${key}"`));
                        return;
                    }
                    states[stateIndicies[incidentState]].pushLink(new customHybridStateLink_1.CustomHybridStateLink(newStateIndex, setters, p, dpdx, dpdz, dpdt));
                });
            });
        });
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        return { system: new edaeHybridSystem_1.EDAEHybridSystem(states), x0: new vector_1.vector(x0), x: x, z: z };
        //return {system:,x0:,x:,z:};
    }
    compileImplicit(text) {
        this.isExplicit = false;
        var chars = new index_1.default.InputStream(text);
        var lexer = new odeGrammarLexer_js_1.default.odeGrammarLexer(chars);
        lexer.removeErrorListeners();
        var listener = new errorListener_1.default(this.errors);
        lexer.addErrorListener(listener);
        //@ts-ignore
        lexer.strictMode = false;
        var tokens = new index_1.default.CommonTokenStream(lexer);
        var parser = new odeGrammarParser_js_1.default.odeGrammarParser(tokens);
        parser.removeErrorListeners();
        parser.addErrorListener(listener);
        var visitor = new visitor_1.default();
        parser.buildParseTrees = true;
        var tree = parser.hybrid();
        //@ts-ignore
        //console.log(tree.toStringTree(parser.ruleNames));
        //check for parser/lexer errors
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let daeSystemDef = visitor.startHybrid(tree, listener);
        //for debug purposes
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        let self = this;
        daeSystemDef.statements.forEach(function (item) {
            self.compileStatement(item);
        });
        let x = [];
        let z = [];
        let x0 = [];
        let z0 = [];
        Object.entries(this.variables).forEach(function ([key, variable]) {
            if (variable.isAlgebraic) {
                z.push(key);
                z0.push(variable.initialValue);
            }
            else {
                x.push(key);
                x0.push(variable.initialValue);
            }
        });
        //prepare variable indicies
        //x,z,t
        let algContext = { indicies: {}, errors: this.errors };
        //x,dx,z,t
        let difContext = { indicies: {}, errors: this.errors };
        x.forEach(function (item, index) {
            algContext.indicies[item] = index;
            difContext.indicies[item] = index;
            difContext.indicies[item + "'"] = index + x.length;
        });
        z.forEach(function (item, index) {
            algContext.indicies[item] = index + x.length;
            difContext.indicies[item] = index + 2 * x.length;
        });
        algContext.indicies["t"] = x.length + z.length;
        difContext.indicies["t"] = 2 * x.length + z.length;
        let initialState = this.states["initial"];
        let equationIndicies = {};
        //compile initial state
        let states = [];
        {
            let f = [];
            let g = [];
            Object.entries(initialState.equations).forEach(function ([key, equation]) {
                if (equation.isAlgebraic) {
                    equationIndicies[key] = g.length;
                    g.push(expressionCompiler_1.compileExpression(equation.expression, algContext).simplify());
                }
                else {
                    equationIndicies[key] = f.length;
                    f.push(expressionCompiler_1.compileExpression(equation.expression, difContext).simplify());
                }
            });
            if (f.length != x.length) {
                this.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Number of dif. equations: ${f.length}, dif. variables: ${x.length} in state "initial"`));
            }
            if (g.length != z.length) {
                this.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Number of alg. equations: ${g.length}, alg. variables: ${z.length} in state "initial"`));
            }
            //check for equations number;
            let dfdx = [];
            let dfddx = [];
            let dfdz = [];
            let dgdx = [];
            let dgdz = [];
            let dgdt = [];
            f.forEach(function (item) {
                let dxRow = [];
                let ddxRow = [];
                x.forEach(function (_x) {
                    dxRow.push(item.differentiate(_x, self.epsilon).simplify());
                    ddxRow.push(item.differentiate(_x + "'", self.epsilon).simplify());
                });
                dfdx.push(dxRow);
                dfddx.push(ddxRow);
                let dzRow = [];
                z.forEach(function (_z) {
                    dzRow.push(item.differentiate(_z, self.epsilon).simplify());
                });
                dfdz.push(dzRow);
            });
            g.forEach(function (item) {
                let dxRow = [];
                x.forEach(function (_x) {
                    dxRow.push(item.differentiate(_x, self.epsilon).simplify());
                });
                dgdx.push(dxRow);
                let dzRow = [];
                z.forEach(function (_z) {
                    dzRow.push(item.differentiate(_z, self.epsilon).simplify());
                });
                dgdz.push(dzRow);
                dgdt.push(item.differentiate("t", self.epsilon));
            });
            states.push(new customIDAEHybridState_1.CustomIDAEHybridState("initial", [], false).init(f, g, dfdx, dfddx, dfdz, dgdx, dgdz, dgdt));
        }
        //compile states
        let stateIndicies = { initial: 0 };
        Object.entries(this.states).forEach(function ([key, state]) {
            //skip initial state
            if (key == "initial")
                return;
            let f = [];
            let g = [];
            //check equations
            Object.entries(initialState.equations).forEach(function ([equationKey, equation]) {
                if (!state.equations.hasOwnProperty(equationKey)) {
                    //copy equations from initial state
                    if (equation.isAlgebraic) {
                        g.push(states[0]._g[equationIndicies[equationKey]]);
                    }
                    else {
                        f.push(states[0]._f[equationIndicies[equationKey]]);
                    }
                    return;
                }
                let stateEquation = state.equations[equationKey];
                if (stateEquation.isAlgebraic) {
                    g.push(expressionCompiler_1.compileExpression(equation.expression, algContext).simplify());
                }
                else {
                    f.push(expressionCompiler_1.compileExpression(equation.expression, difContext).simplify());
                }
            });
            Object.keys(state.equations).forEach(function (equationKey) {
                if (!initialState.equations.hasOwnProperty(equationKey)) {
                    self.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `State "${key}" contains excess equation "${equationKey}"`));
                }
            });
            if (Object.keys(state.equations).length != states[0]._f.length + states[0]._g.length)
                this.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `State ${f.length}, dif. variables: ${x.length}`));
            if (f.length != x.length) {
                this.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Number of dif. equations: ${f.length}, dif. variables: ${x.length} in state "${key}"`));
            }
            if (g.length != z.length) {
                this.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Number of alg. equations: ${g.length}, alg. variables: ${z.length} in state "${key}"`));
            }
            let dfdx = [];
            let dfddx = [];
            let dfdz = [];
            let dgdx = [];
            let dgdz = [];
            let dgdt = [];
            f.forEach(function (item) {
                let dxRow = [];
                let ddxRow = [];
                x.forEach(function (_x) {
                    dxRow.push(item.differentiate(_x, self.epsilon).simplify());
                    ddxRow.push(item.differentiate(_x + "'", self.epsilon).simplify());
                });
                dfdx.push(dxRow);
                dfddx.push(ddxRow);
                let dzRow = [];
                z.forEach(function (_z) {
                    dzRow.push(item.differentiate(_z, self.epsilon).simplify());
                });
                dfdz.push(dzRow);
            });
            g.forEach(function (item) {
                let dxRow = [];
                x.forEach(function (_x) {
                    dxRow.push(item.differentiate(_x, self.epsilon).simplify());
                });
                dgdx.push(dxRow);
                let dzRow = [];
                z.forEach(function (_z) {
                    dzRow.push(item.differentiate(_z, self.epsilon).simplify());
                });
                dgdz.push(dzRow);
                dgdt.push(item.differentiate("t", self.epsilon));
            });
            stateIndicies[key] = states.length;
            states.push(new customIDAEHybridState_1.CustomIDAEHybridState("initial", [], false).init(f, g, dfdx, dfddx, dfdz, dgdx, dgdz, dgdt));
        });
        //compile transitions
        Object.entries(this.states).forEach(function ([key, state]) {
            if (key == "initial")
                return;
            //compile setters
            let setters = [];
            Object.entries(state.setters).forEach(function ([key, setter]) {
                if (self.variables[key].isAlgebraic) {
                    return;
                }
                let variableIndex = algContext.indicies[key];
                setters.push({ index: variableIndex, expression: expressionCompiler_1.compileExpression(setter, difContext).simplify() });
            });
            let newStateIndex = stateIndicies[key];
            state.transitions.forEach(function (transition) {
                let p = expressionCompiler_1.compileBoolExpression(transition.condition, difContext).simplify().convertToExpression(self.boolExpEpsilon);
                let dpdt = p.differentiate("t", self.epsilon).simplify();
                let dpdx = [];
                let dpdz = [];
                Object.entries(self.variables).forEach(function ([key, variable]) {
                    if (variable.isAlgebraic) {
                        dpdz.push(p.differentiate(key, self.epsilon).simplify());
                    }
                    else {
                        dpdx.push(p.differentiate(key, self.epsilon).simplify());
                    }
                });
                transition.incidentStates.forEach(function (incidentState) {
                    if (!self.states.hasOwnProperty(incidentState)) {
                        self.errors.push(new error_1.default(astNode_1.TextPosition.invalid(), `Unknown incident state "${incidentState}" in transition rule for state "${key}"`));
                        return;
                    }
                    states[stateIndicies[incidentState]].pushLink(new customHybridStateLink_1.CustomHybridStateLink(newStateIndex, setters, p, dpdx, dpdz, dpdt));
                });
            });
        });
        if (this.errors.length > 0) {
            throw new compilerError_1.CompilerError(this.errors);
        }
        return { system: new idaeHybridSystem_1.IDAEHybridSystem(states), x0: new vector_1.vector(x0), z0: new vector_1.vector(z0), x: x, z: z };
    }
    expandBoolExpression(node) {
        switch (node.type) {
            case astNode_1.NodeType._And: {
                let and = node;
                and.left = this.expandBoolExpression(and.left);
                and.right = this.expandBoolExpression(and.right);
                return and;
            }
            case astNode_1.NodeType._Or: {
                let or = node;
                or.left = this.expandBoolExpression(or.left);
                or.right = this.expandBoolExpression(or.right);
                return or;
            }
            case astNode_1.NodeType._Not: {
                let not = node;
                not.inner = this.expandExpression(not.inner);
                return not;
            }
            case astNode_1.NodeType._Greater: {
                let g = node;
                g.left = this.expandExpression(g.left);
                g.right = this.expandExpression(g.right);
                return g;
            }
            case astNode_1.NodeType._GreaterEqual: {
                let ge = node;
                ge.left = this.expandExpression(ge.left);
                ge.right = this.expandExpression(ge.right);
                return ge;
            }
            case astNode_1.NodeType._Less: {
                let l = node;
                l.left = this.expandExpression(l.left);
                l.right = this.expandExpression(l.right);
                return l;
            }
            case astNode_1.NodeType._LessEqual: {
                let le = node;
                le.left = this.expandExpression(le.left);
                le.right = this.expandExpression(le.right);
                return le;
            }
            case astNode_1.NodeType._Equal: {
                let e = node;
                e.left = this.expandExpression(e.left);
                e.right = this.expandExpression(e.right);
                return e;
            }
            case astNode_1.NodeType._NotEqual: {
                let ne = node;
                ne.left = this.expandExpression(ne.left);
                ne.right = this.expandExpression(ne.right);
                return ne;
            }
            case astNode_1.NodeType._BoolConstant: {
                return node;
            }
            default:
                this.errors.push(new error_1.default(node.textPos, "Unexpected boolean expression type at expandBoolExpression()"));
                return new astNode_1.BoolConstantNode(false);
        }
    }
    expandExpression(node) {
        //throw new Error("Not implemented");
        switch (node.type) {
            case astNode_1.NodeType._Addition: {
                let add = node;
                add.left = this.expandExpression(add.left);
                add.right = this.expandExpression(add.right);
                return add;
            }
            case astNode_1.NodeType._Subtraction: {
                let sub = node;
                sub.left = this.expandExpression(sub.left);
                sub.right = this.expandExpression(sub.right);
                return sub;
            }
            case astNode_1.NodeType._Multiplication: {
                let mult = node;
                mult.left = this.expandExpression(mult.left);
                mult.right = this.expandExpression(mult.right);
                return mult;
            }
            case astNode_1.NodeType._Division: {
                let div = node;
                div.left = this.expandExpression(div.left);
                div.right = this.expandExpression(div.right);
                return div;
            }
            case astNode_1.NodeType._Negation: {
                let neg = node;
                neg.inner = this.expandExpression(neg.inner);
                return neg;
            }
            case astNode_1.NodeType._Derivative: {
                let der = node;
                let id = this.expandExpression(der.id);
                if (id instanceof astNode_1.VarIdentifierNode && id.id != "t") {
                    if (this.variables.hasOwnProperty(id.id)) {
                        this.variables[id.id].isAlgebraic = false;
                    }
                    else {
                        this.variables[id.id] = new VariableEntry(id.id, false);
                    }
                    der.id = id;
                    return der;
                }
                this.errors.push(new error_1.default(node.textPos, `Incorrect symbol in derivative`));
                return new astNode_1.ConstantNode(0);
            }
            case astNode_1.NodeType._Function: {
                let fun = node;
                for (let i = 0; i < fun.args.length; i++) {
                    fun.args[i] = this.expandExpression(fun.args[i]);
                }
                return fun;
            }
            case astNode_1.NodeType._VarIdentifier: {
                let _var = node;
                if (_var.indicies.length == 0) {
                    let _context = this.context;
                    while (_context != null) {
                        if (_context instanceof compilerContext_1.LoopContext) {
                            if (_context.iterator == _var.id) {
                                return new astNode_1.ConstantNode(_context.index);
                            }
                        }
                        else if (_context instanceof compilerContext_1.MacroContext) {
                            if (_context.args.hasOwnProperty(_var.id)) {
                                return this.expandExpression(_context.args[_var.id].clone());
                            }
                        }
                        _context = _context.previous;
                    }
                }
                _var.id = this.getSymbolString(_var);
                _var.indicies = [];
                if (this.constants.hasOwnProperty(_var.id)) {
                    return new astNode_1.ConstantNode(this.constants[_var.id]);
                }
                if (_var.id != "t") {
                    if (!this.variables.hasOwnProperty(_var.id)) {
                        this.variables[_var.id] = new VariableEntry(_var.id, true);
                    }
                }
                return _var;
            }
            case astNode_1.NodeType._Constant: {
                return node;
            }
            case astNode_1.NodeType._Summation: {
                let summation = node;
                if (summation.bounds.l > summation.bounds.r) {
                    this.errors.push(new error_1.default(node.textPos, `Left bound of summation is bigger then right bound`));
                    return new astNode_1.ConstantNode(0);
                }
                let sum = [];
                let _context = new compilerContext_1.LoopContext(this.context, summation.iterator);
                this.context = _context;
                for (let i = summation.bounds.l; i <= summation.bounds.r; i++) {
                    _context.index = i;
                    sum.push(this.expandExpression(summation.expression.clone()));
                }
                //return this.expandExpression(summation.expression);
                this.context = this.context.previous;
                let result = sum[0];
                if (sum.length == 1)
                    return result;
                for (let i = 1; i < sum.length; i++) {
                    result = new astNode_1.AdditionNode(result, sum[i]);
                }
                return result;
            }
            case astNode_1.NodeType._Macro: {
                let macro = node;
                let macroName = this.getSymbolString(macro.id);
                let macroDef = this.macros[macroName];
                if (macroDef == undefined) {
                    this.errors.push(new error_1.default(node.textPos, `Undefined macro "${macroName}"`));
                    return new astNode_1.ConstantNode(0);
                }
                if (macroDef.args.length != macro.args.length) {
                    this.errors.push(new error_1.default(node.textPos, `Invalid number of arguments in macro "${macroName}"`));
                    return new astNode_1.ConstantNode(0);
                }
                let args = {};
                macro.args.forEach(function (item, index) {
                    args[macroDef.args[index]] = item.clone();
                });
                this.context = new compilerContext_1.MacroContext(this.context, args);
                let result = this.expandExpression(macroDef.expression.clone());
                this.context = this.context.previous;
                return result;
            }
            case astNode_1.NodeType._Ternary: {
                let ter = node;
                ter.condition = this.expandBoolExpression(ter.condition);
                ter.true = this.expandExpression(ter.true);
                ter.false = this.expandExpression(ter.false);
                return ter;
            }
            default:
                this.errors.push(new error_1.default(node.textPos, "Unexpected expression type at validateExpression()"));
                return new astNode_1.ConstantNode(0);
        }
    }
    getSymbolString(symbol) {
        let result = symbol.id;
        let self = this;
        symbol.indicies.forEach(function (item, index) {
            let indexValue = (expressionCompiler_1.compileExpression(self.expandExpression(item.clone()), { indicies: {}, errors: self.errors })).eval({});
            if (Number.isInteger(indexValue)) {
                result += `[${self.context.index}]`;
                return;
            }
            else {
                self.errors.push(new error_1.default(symbol.textPos, `Expression for ${index} index value of symbol "${symbol.id}" is not constant`));
            }
        });
        return result;
    }
    compileLoop(node) {
        let _context = new compilerContext_1.LoopContext(this.context, node.iterator);
        this.context = _context;
        let statements = node.statements;
        let self = this;
        node.bounds.forEach(function (bounds) {
            if (bounds.l > bounds.r) {
                self.errors.push(new error_1.default(node.textPos, `Left bound value "${bounds.l}" is higher then right bound value "${bounds.r}"`));
                return;
            }
            for (let i = bounds.l; i < bounds.r; i++) {
                _context.index = i;
                statements.forEach(function (statement) {
                    self.compileStatement(statement);
                });
            }
        });
        this.context = this.context.previous;
    }
    ;
    compileInitialCondition(node) {
        let variable = this.getSymbolString(node.id);
        if (this.currentState != "initial") {
            this.errors.push(new error_1.default(node.textPos, `Definition of initial condition for variable "${variable}" not in the global scope`));
            return;
        }
        if (variable == "t") {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of time variable`));
            return;
        }
        if (this.constants.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of constant "${variable}"`));
            return;
        }
        let value = 0;
        try {
            value = (expressionCompiler_1.compileExpression(this.expandExpression(node.expression.clone()), { indicies: {}, errors: this.errors })).eval({});
        }
        catch (error) {
            this.errors.push(new error_1.default(node.textPos, `Can't evaluate initial condition for variable "${variable}"`));
            this.errors.push(new error_1.default(node.textPos, error));
            return;
        }
        if (this.variables.hasOwnProperty(variable)) {
            this.variables[variable].initialValue = value;
        }
        else {
            this.variables[variable] = new VariableEntry(variable, true, value);
        }
    }
    compileMacroDefinition(node) {
        if (this.currentState != "initial") {
            this.errors.push(new error_1.default(node.textPos, `Definition of macro "${node.id}" not in the global scope`));
            return;
        }
        let macroName = this.getSymbolString(node.id);
        if (this.macros.hasOwnProperty(macroName)) {
            this.errors.push(new error_1.default(node.textPos, `Redefenition of macro "${macroName}"`));
            return;
        }
        this.macros[macroName] = node;
    }
    compileConstantStatement(node) {
        let constant = this.getSymbolString(node.id);
        if (this.currentState != "initial") {
            this.errors.push(new error_1.default(node.textPos, `Definition of constant "${constant}" not in the global scope`));
            return;
        }
        if (constant == "t") {
            this.errors.push(new error_1.default(node.textPos, 'Invalid use of time variable'));
        }
        else if (this.variables.hasOwnProperty(constant)) {
            this.errors.push(new error_1.default(node.textPos, `Redefenition of variable "${constant}"`));
        }
        else if (this.constants.hasOwnProperty(constant)) {
            this.errors.push(new error_1.default(node.textPos, `Redefenition of constant "${constant}"`));
        }
        else {
            try {
                this.constants[constant] = (expressionCompiler_1.compileExpression(this.expandExpression(node.expression.clone()), { indicies: {}, errors: this.errors })).eval({});
            }
            catch (error) {
                this.errors.push(new error_1.default(node.textPos, error));
            }
        }
    }
    compileAlgEquation(node) {
        //throw new Error("Not implemented");
        let currentState = this.states[this.currentState];
        let variable = this.getSymbolString(node.left);
        if (currentState.equations.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Multiple equations for variable "${variable}" in state "${this.currentState}"`));
            return;
        }
        if (variable == "t") {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of time variable in state "${this.currentState}"`));
            return;
        }
        if (this.constants.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of constant "${variable}" in state "${this.currentState}"`));
            return;
        }
        if (!this.variables.hasOwnProperty(variable)) {
            this.variables[variable] = new VariableEntry(variable, true);
        }
        let equation = this.expandExpression(node.right.clone());
        if (expressionCompiler_1.hasDerivative(equation)) {
            this.errors.push(new error_1.default(node.textPos, `Right hand side expression for variable "${variable}" in state "${this.currentState}" contains derivatives`));
            return;
        }
        currentState.equations[variable] = new EquationEntry(equation, true);
    }
    compileDifEquation(node) {
        //throw new Error("Not implemented");
        let currentState = this.states[this.currentState];
        let variable = this.getSymbolString(node.left.id);
        if (currentState.equations.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Multiple equations for variable "${variable}" in state "${this.currentState}"`));
            return;
        }
        if (variable == "t") {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of time variable in state "${this.currentState}"`));
            return;
        }
        if (this.constants.hasOwnProperty(variable)) {
            this.errors.push(new error_1.default(node.textPos, `Invalid use of constant "${variable}" in state "${this.currentState}"`));
            return;
        }
        if (this.variables.hasOwnProperty(variable)) {
            this.variables[variable].isAlgebraic = false;
        }
        else {
            this.variables[variable] = new VariableEntry(variable, false);
        }
        let equation = this.expandExpression(node.right.clone());
        if (expressionCompiler_1.hasDerivative(equation)) {
            this.errors.push(new error_1.default(node.textPos, `Right hand side expression for variable "${variable}" in state "${this.currentState}" contains derivatives`));
            return;
        }
        currentState.equations[variable] = new EquationEntry(equation, false);
    }
    compileExplicitEquation(node) {
        //throw new Error("Not implemented");
        if (node.left instanceof astNode_1.VarIdentifierNode) {
            this.compileAlgEquation(node);
        }
        else if (node.left instanceof astNode_1.DerivativeNode) {
            this.compileDifEquation(node);
        }
        else {
            this.errors.push(new error_1.default(node.textPos, "Equation should be in explicit form"));
        }
    }
    compileImplicitEquation(node) {
        //throw new Error("Not implemented");
        let currentState = this.states[this.currentState];
        let label = (node.label != null ? this.getSymbolString(node.label) : (Object.keys(currentState.equations).length + 1));
        if (currentState.equations.hasOwnProperty(label)) {
            this.errors.push(new error_1.default(node.textPos, `Redeclaration of equation "${label}"`));
        }
        else {
            let equation = new astNode_1.SubtractionNode(node.left, node.right);
            equation = this.expandExpression(equation.clone()); //TODO add variables to variablesTable and remove validate
            currentState.equations[label] = new EquationEntry(equation, !expressionCompiler_1.hasDerivative(equation));
        }
    }
    compileState(node) {
        if (this.currentState != "initial") {
            this.errors.push(new error_1.default(node.textPos, `Invalid state definition`));
            return;
        }
        if (this.states.hasOwnProperty(node.id)) {
            this.errors.push(new error_1.default(node.textPos, `Redeclaration of state "${node.id}"`));
            return;
        }
        this.currentState = node.id;
        let state = new State();
        state.isTerminal = node.isTerminal;
        let self = this;
        this.states[node.id] = state;
        node.statements.forEach(function (item) {
            self.compileStatement(item);
        });
        node.stateTransitions.forEach(function (item) {
            state.transitions.push(new Transition(item.prevStates, self.expandBoolExpression(item.condition)));
        });
        this.currentState = "initial";
    }
    compileSetter(node) {
        if (this.currentState == "initial") {
            this.errors.push(new error_1.default(node.textPos, `Setter definition shouldn't exist in initial state.`));
            return;
        }
        let setters = this.states[this.currentState].setters;
        let id = this.getSymbolString(node.id);
        if (setters.hasOwnProperty(id)) {
            this.errors.push(new error_1.default(node.textPos, `Setter redefenition for variable "${id} in state "${this.currentState}""`));
        }
        setters[id] = this.expandExpression(node.expression.clone());
    }
    compileStatement(statement) {
        switch (statement.type) {
            case astNode_1.NodeType._InitialCondition: {
                this.compileInitialCondition(statement);
                break;
            }
            case astNode_1.NodeType._MacroDefinition: {
                this.compileMacroDefinition(statement);
                break;
            }
            case astNode_1.NodeType._ConstantStatement: {
                this.compileConstantStatement(statement);
                break;
            }
            case astNode_1.NodeType._Equation: {
                if (this.isExplicit)
                    this.compileExplicitEquation(statement);
                else
                    this.compileImplicitEquation(statement);
                break;
            }
            case astNode_1.NodeType._State: {
                this.compileState(statement);
                break;
            }
            case astNode_1.NodeType._Setter: {
                this.compileSetter(statement);
                break;
            }
            case astNode_1.NodeType._Loop: {
                this.compileLoop(statement);
                break;
            }
            default:
                this.errors.push(new error_1.default(statement.textPos, `Unexpected statement type at compileStatement()`));
        }
    }
}
exports.HybridSystemCompiler = HybridSystemCompiler;


/***/ }),

/***/ "./src/compiler/visitor.ts":
/*!*********************************!*\
  !*** ./src/compiler/visitor.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const odeGrammarVisitor_js_1 = __importDefault(__webpack_require__(/*! ../grammar/antlrOutput/odeGrammarVisitor.js */ "./src/grammar/antlrOutput/odeGrammarVisitor.js"));
const odeGrammarParser_js_1 = __importDefault(__webpack_require__(/*! ../grammar/antlrOutput/odeGrammarParser.js */ "./src/grammar/antlrOutput/odeGrammarParser.js"));
const astNode_1 = __webpack_require__(/*! ./astNode */ "./src/compiler/astNode.ts");
class Visitor extends odeGrammarVisitor_js_1.default.odeGrammarVisitor {
    constructor() {
        super();
        this.statements = [];
    }
    startDAE(ctx, errorListener) {
        this.errorListener = errorListener;
        this.visitDae(ctx);
        return new astNode_1.SystemDefinition(this.statements);
    }
    startHybrid(ctx, errorListener) {
        this.errorListener = errorListener;
        this.visitHybrid(ctx);
        return new astNode_1.SystemDefinition(this.statements);
    }
    startExpression(ctx, errorListener) {
        this.errorListener = errorListener;
        return this.visitExpression(ctx);
    }
    visitMacroStatement(ctx) {
        let args = [];
        if (ctx.macroArguments + undefined) {
            let macroArgs = ctx.macroArguments();
            if (macroArgs != undefined) {
                macroArgs.ID().forEach(function (item) {
                    args.push(item.getText());
                });
            }
        }
        return new astNode_1.MacroStatementNode(this.visitVarIdentifier(ctx.id), args, this.visitExpression(ctx.exp))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    /* visitDaeStatement(ctx:any):StatementNode{
         return (this as unknown as ParseTreeVisitor).visit(ctx) as StatementNode;
     }*/
    visitDaeStatement(ctx) {
        return this.visit(ctx.children[0]);
    }
    visitDae(ctx) {
        ctx.daeStatement().forEach(function (item) {
            this.statements.push(this.visit(item));
        }, this);
    }
    visitStateStatement(ctx) {
        return this.visit(ctx.children[0]);
    }
    visitBoolExpression(ctx) {
        return this.visit(ctx);
    }
    visitExpression(ctx) {
        return this.visit(ctx);
    }
    visitHybridStatement(ctx) {
        return this.visit(ctx.children[0]);
    }
    visitLoopStatement(ctx) {
        return this.visit(ctx.children[0]);
    }
    visitHybrid(ctx) {
        ctx.hybridStatement().forEach(function (item) {
            this.statements.push(this.visitHybridStatement(item));
        }, this);
    }
    visitIndex(ctx) {
        return this.visitExpression(ctx.exp);
    }
    visitVarIdentifier(ctx) {
        let id = ctx.id.text;
        let indicies;
        indicies = ctx.index != undefined ? ctx.index().map(function (item) {
            return this.visitIndex(item);
        }, this) : [];
        return new astNode_1.VarIdentifierNode(id, indicies)
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitEBoolBinaryOperator(ctx) {
        let op = null;
        switch (ctx.op.type) {
            case odeGrammarParser_js_1.default.odeGrammarParser.L:
                op = new astNode_1.BoolLNode(this.visitExpression(ctx.leftexp), this.visitExpression(ctx.rightexp));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.LE:
                op = new astNode_1.BoolLENode(this.visitExpression(ctx.leftexp), this.visitExpression(ctx.rightexp));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.G:
                op = new astNode_1.BoolGNode(this.visitExpression(ctx.leftexp), this.visitExpression(ctx.rightexp));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.GE:
                op = new astNode_1.BoolGENode(this.visitExpression(ctx.leftexp), this.visitExpression(ctx.rightexp));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.E:
                op = new astNode_1.BoolENode(this.visitExpression(ctx.leftexp), this.visitExpression(ctx.rightexp));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.NE:
                op = new astNode_1.BoolNENode(this.visitExpression(ctx.leftexp), this.visitExpression(ctx.rightexp));
                break;
            default:
                this.errorListener.add(new astNode_1.TextPosition(ctx.op.line, ctx.op.column, ctx.start.start, ctx.stop.stop), "Unknown binary operator");
                return null;
        }
        return op.setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitBBoolBinaryOperator(ctx) {
        let op = null;
        switch (ctx.op.type) {
            case odeGrammarParser_js_1.default.odeGrammarParser.AND:
                op = new astNode_1.BoolAndNode(this.visitBoolExpression(ctx.left), this.visitBoolExpression(ctx.right));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.OR:
                op = new astNode_1.BoolOrNode(this.visitBoolExpression(ctx.left), this.visitBoolExpression(ctx.right));
                break;
            default:
                this.errorListener.add(new astNode_1.TextPosition(ctx.op.line, ctx.op.column, ctx.start.start, ctx.stop.stop), "Unknown binary operator");
                return null;
        }
        return op.setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitBracketBoolExpression(ctx) {
        return this.visitBoolExpression(ctx.boolExpression());
    }
    visitBoolUnaryOperator(ctx) {
        return new astNode_1.BoolNegationNode(this.visitBoolExpression(ctx.boolExpression()))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitBracketExpression(ctx) {
        return this.visitExpression(ctx.expression());
    }
    visitStateTransition(ctx) {
        let prevStates = [];
        ctx.ID().forEach(function (item) {
            prevStates.push(item.getText());
        });
        return new astNode_1.TransitionNode(prevStates, this.visitBoolExpression(ctx.condition))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitStateDef(ctx) {
        let statements = [];
        let self = this;
        if (ctx.stateStatement != undefined)
            ctx.stateStatement().forEach(function (item) {
                statements.push(self.visitStateStatement(item));
            });
        let transitions = [];
        ctx.stateTransition().forEach(function (item) {
            transitions.push(self.visitStateTransition(item));
        });
        return new astNode_1.StateNode(ctx.name.text, ctx.terminal != undefined, transitions, statements)
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitSetter(ctx) {
        return new astNode_1.SetterNode(this.visitVarIdentifier(ctx.variable), this.visitExpression(ctx.exp))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitEquation(ctx) {
        return new astNode_1.EquationNode(ctx.label == undefined ? null : this.visitVarIdentifier(ctx.label), this.visitExpression(ctx.left), this.visitExpression(ctx.right))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitInitialCondition(ctx) {
        return new astNode_1.InitialConditionNode(this.visitVarIdentifier(ctx.variable), this.visitExpression(ctx.exp))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitNumber(ctx) {
        return new astNode_1.ConstantNode(parseFloat(ctx.getText()))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitConstantStatement(ctx) {
        return new astNode_1.ConstantStatementNode(this.visitVarIdentifier(ctx.constant), this.visitExpression(ctx.exp))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitLoopBounds(ctx) {
        return new astNode_1.Bounds(parseInt(ctx.lbound.text), parseInt(ctx.rbound.text));
    }
    visitLoop(ctx) {
        let bounds = [];
        let statements = [];
        ctx.loopBounds().forEach(function (item) {
            bounds.push(this.visitLoopBounds(item));
        }, this);
        if (ctx.loopBody().loopStatement != undefined)
            ctx.loopBody().loopStatement().forEach(function (item) {
                statements.push(this.visitLoopStatement(item));
            }, this);
        return new astNode_1.LoopStatementNode(ctx.iterator.text, bounds, statements)
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitMacroExpression(ctx) {
        let args;
        args = ctx.expression != undefined ? ctx.expression().map(function (item) {
            return this.visitExpression(item);
        }, this) : [];
        return new astNode_1.MacroExpressionNode(this.visitVarIdentifier(ctx.id), args)
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitConstantExpression(ctx) {
        return this.visitNumber(ctx.value);
    }
    visitSummationExpression(ctx) {
        return new astNode_1.SumExpressionNode(ctx.iterator.text, this.visitLoopBounds(ctx.bounds), this.visitExpression(ctx.summationExp))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitTernaryOperatorExpression(ctx) {
        return new astNode_1.TernaryOperatorNode(this.visitBoolExpression(ctx.condition), this.visitExpression(ctx.first), this.visitExpression(ctx.second))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitBoolConstant(ctx) {
        return new astNode_1.BoolConstantNode(ctx.value.text == "true")
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    /*visitDerivativeExpression(ctx:any){
        return new DerivativeNode(this.visitVarIdentifier(ctx.id));
    }*/
    visitVariableExpression(ctx) {
        let ident = this.visitVarIdentifier(ctx.id);
        if (ctx.der != undefined)
            return new astNode_1.DerivativeNode(ident)
                .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
        return this.visitVarIdentifier(ctx.id);
    }
    visitUnaryOperatorExpression(ctx) {
        switch (ctx.op.type) {
            case odeGrammarParser_js_1.default.odeGrammarParser.PLUS:
                return this.visitExpression(ctx.expression());
            case odeGrammarParser_js_1.default.odeGrammarParser.MINUS:
                return new astNode_1.NegationNode(this.visitExpression(ctx.expression()))
                    .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
            default:
                this.errorListener.add(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop), "Unknown unary operator");
                return null;
        }
    }
    visitBinaryOperatorExpression(ctx) {
        let op;
        switch (ctx.op.type) {
            case odeGrammarParser_js_1.default.odeGrammarParser.DIVISION:
                op = new astNode_1.DivisionNode(this.visitExpression(ctx.left), this.visitExpression(ctx.right));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.ASTERISK:
                op = new astNode_1.MultiplicationNode(this.visitExpression(ctx.left), this.visitExpression(ctx.right));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.PLUS:
                op = new astNode_1.AdditionNode(this.visitExpression(ctx.left), this.visitExpression(ctx.right));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.MINUS:
                op = new astNode_1.SubtractionNode(this.visitExpression(ctx.left), this.visitExpression(ctx.right));
                break;
            case odeGrammarParser_js_1.default.odeGrammarParser.CARET:
                op = new astNode_1.FunctionNode("pow", [this.visitExpression(ctx.left), this.visitExpression(ctx.right)]);
                break;
            default:
                this.errorListener.add(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop), "Unknown binary operator");
                return null;
        }
        return op
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitFunctionDerivative(ctx) {
        return new astNode_1.DerivativeNode(this.visitVarIdentifier(ctx.id))
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitFunctionExpression(ctx) {
        var args = this.visitFunctionArguments(ctx.functionArguments());
        return new astNode_1.FunctionNode(ctx.func.text, args)
            .setTextPos(new astNode_1.TextPosition(ctx.start.line, ctx.start.column, ctx.start.start, ctx.stop.stop));
    }
    visitFunctionArguments(ctx) {
        var args = [];
        if (ctx.expression != undefined)
            ctx.expression().forEach(function (item) {
                args.push(this.visit(item));
            }, this);
        return args;
    }
}
exports.default = Visitor;


/***/ }),

/***/ "./src/curveSimplification/douglasPeuckerNSimplification.ts":
/*!******************************************************************!*\
  !*** ./src/curveSimplification/douglasPeuckerNSimplification.ts ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DouglasPeuckerNSimplification = void 0;
const daeVector_1 = __webpack_require__(/*! ../dae/daeVector */ "./src/dae/daeVector.ts");
class PriorityQueue {
    constructor() {
        this.items = [];
    }
    insert(item, priority) {
        for (let i = 0; i < this.items.length; i++) {
            if (this.items[i].priority < priority) {
                this.items.splice(i, 0, { value: item, priority: priority });
                return;
            }
        }
        this.items.push({ value: item, priority: priority });
    }
    dequeueu() {
        return this.items.shift().value;
        //return this.items[0].value;
    }
    length() {
        return this.items.length;
    }
}
class Edge {
    constructor(start, end, point) {
        this.start = start;
        this.end = end;
        this.point = point;
    }
}
class DouglasPeuckerNSimplification {
    constructor(maxPoints) {
        this.maxPoints = maxPoints;
    }
    process(start, end, points, queue) {
        let maxDist = 0;
        let index = start;
        for (let i = start + 1; i < end; i++) {
            let distance = daeVector_1.DAEVector.distanceLinePoint(points[start], points[end], points[i]);
            if (distance > maxDist) {
                maxDist = distance;
                index = i;
            }
        }
        if (index != start)
            queue.insert(new Edge(start, end, index), maxDist);
    }
    simplify(points) {
        if (points.length <= this.maxPoints) {
            return points.slice();
        }
        let queue = new PriorityQueue();
        let choosenPoints = [];
        choosenPoints.push(0);
        choosenPoints.push(points.length - 1);
        let start = 0;
        let end = points.length - 1;
        this.process(start, end, points, queue);
        while (choosenPoints.length < this.maxPoints && queue.length() > 0) {
            let edge = queue.dequeueu();
            choosenPoints.push(edge.point);
            start = edge.start;
            end = edge.point;
            this.process(start, end, points, queue);
            start = edge.point;
            end = edge.end;
            this.process(start, end, points, queue);
        }
        choosenPoints.sort((a, b) => a - b);
        let result = choosenPoints.map(function (index) {
            return points[index];
        });
        return result;
    }
}
exports.DouglasPeuckerNSimplification = DouglasPeuckerNSimplification;


/***/ }),

/***/ "./src/curveSimplification/douglasPeuckerSimplification.ts":
/*!*****************************************************************!*\
  !*** ./src/curveSimplification/douglasPeuckerSimplification.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DouglasPeuckerSimplification = void 0;
const daeVector_1 = __webpack_require__(/*! ../dae/daeVector */ "./src/dae/daeVector.ts");
class DouglasPeuckerSimplification {
    constructor(epsilon) {
        this.epsilon = epsilon;
    }
    simplify(points) {
        return this.run(points, 0, points.length - 1);
    }
    run(points, start, end) {
        let maxDist = 0.0;
        let index = start + 1;
        let first = points[start];
        let last = points[end];
        for (let i = start + 1; i < end; i++) {
            let dist = daeVector_1.DAEVector.distanceLinePoint(first, last, points[i]);
            if (dist >= maxDist) {
                index = i;
                maxDist = dist;
            }
        }
        if (maxDist > this.epsilon) {
            let res1 = this.run(points, start, index);
            let res2 = this.run(points, index, end);
            res1.pop();
            return res1.concat(res2);
        }
        else {
            return [first, last];
        }
    }
}
exports.DouglasPeuckerSimplification = DouglasPeuckerSimplification;


/***/ }),

/***/ "./src/curveSimplification/langSimplification.ts":
/*!*******************************************************!*\
  !*** ./src/curveSimplification/langSimplification.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.LangSimplification = void 0;
const daeVector_1 = __webpack_require__(/*! ../dae/daeVector */ "./src/dae/daeVector.ts");
class LangSimplification {
    constructor(tolerance, lookahead) {
        this.tolerance = tolerance;
        this.lookahead = lookahead;
    }
    simplify(points) {
        let result = [];
        result.push(points[0]);
        let current = 0;
        while (current < points.length - 1) {
            let end = Math.min(current + this.lookahead, points.length - 1);
            let _end = end;
            for (let i = current + 1; i < _end; i++) {
                if (daeVector_1.DAEVector.distanceLinePoint(points[current], points[_end], points[i]) > this.tolerance) {
                    i = current;
                    _end -= 1;
                    continue;
                }
                result.push(points[_end]);
                current = _end;
                break;
            }
            if (current + 1 < _end) {
                result.push(points[end]);
                current = end;
            }
        }
        return result;
    }
}
exports.LangSimplification = LangSimplification;


/***/ }),

/***/ "./src/curveSimplification/nthPointSimplification.ts":
/*!***********************************************************!*\
  !*** ./src/curveSimplification/nthPointSimplification.ts ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.NthPointSimplification = void 0;
class NthPointSimplification {
    constructor(maxPoints) {
        this.maxPoints = maxPoints;
    }
    simplify(points) {
        if (points.length <= this.maxPoints)
            return points.slice();
        let result = [];
        result.push(points[0]);
        let delta = (points.length - 1) / (this.maxPoints - 1);
        for (let i = delta, j = 2; i < points.length && j < this.maxPoints; i += delta, j++) {
            result.push(points[Math.round(i)]);
        }
        result.push(points[points.length - 1]);
        return result;
    }
}
exports.NthPointSimplification = NthPointSimplification;


/***/ }),

/***/ "./src/curveSimplification/opheimSimplification.ts":
/*!*********************************************************!*\
  !*** ./src/curveSimplification/opheimSimplification.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.OpheimSimplification = void 0;
const daeVector_1 = __webpack_require__(/*! ../dae/daeVector */ "./src/dae/daeVector.ts");
class OpheimSimplification {
    constructor(minTolerance, maxTolerance) {
        this.minTolerance = minTolerance;
        this.maxTolerance = maxTolerance;
    }
    simplify(points) {
        let result = [];
        result.push(points[0]);
        let current = 0;
        while (true) {
            let i = current + 1;
            if (daeVector_1.DAEVector.distance(points[current], points[i]) < this.minTolerance) {
                for (let j = i + 1; j <= points.length - 1; j++) {
                    if (daeVector_1.DAEVector.distance(points[current], points[j]) < this.maxTolerance) {
                        i = j - 1;
                    }
                }
                if (i >= points.length - 1)
                    break;
            }
            let j = i + 1;
            for (; j < points.length - 1; j++) {
                let perpDist = daeVector_1.DAEVector.distanceLinePoint(points[current], points[i], points[j]);
                if (perpDist > this.minTolerance) {
                    result.push(points[j]);
                    current = j;
                    break;
                }
                if (daeVector_1.DAEVector.distance(points[current], points[j]) > this.maxTolerance) {
                    result.push(points[j]);
                    current = j;
                    break;
                }
            }
            if (j == points.length - 1)
                break;
        }
        result.push(points[points.length - 1]);
        return result;
    }
}
exports.OpheimSimplification = OpheimSimplification;


/***/ }),

/***/ "./src/curveSimplification/perpendicularDistanceSimplification.ts":
/*!************************************************************************!*\
  !*** ./src/curveSimplification/perpendicularDistanceSimplification.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.PerpendicularDistanceSimplification = void 0;
const daeVector_1 = __webpack_require__(/*! ../dae/daeVector */ "./src/dae/daeVector.ts");
class PerpendicularDistanceSimplification {
    constructor(tolerance) {
        this.tolerance = tolerance;
    }
    simplify(points) {
        while (true) {
            let result = this.run(points);
            if (result.length == points.length)
                return result;
            points = result;
        }
    }
    run(points) {
        if (points.length <= 2)
            return points.slice();
        let result = [];
        result.push(points[0]);
        for (let i = 0; i < points.length - 2;) {
            if (daeVector_1.DAEVector.distanceLinePoint(points[i], points[i + 2], points[i + 1]) < this.tolerance) {
                result.push(points[i + 2]);
                i += 2;
            }
            else {
                result.push(points[i + 1]);
                i++;
            }
        }
        result.push(points[points.length - 1]);
        return result;
    }
}
exports.PerpendicularDistanceSimplification = PerpendicularDistanceSimplification;


/***/ }),

/***/ "./src/curveSimplification/radialDistanceSimplification.ts":
/*!*****************************************************************!*\
  !*** ./src/curveSimplification/radialDistanceSimplification.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.RadialDistanceSimplification = void 0;
const daeVector_1 = __webpack_require__(/*! ../dae/daeVector */ "./src/dae/daeVector.ts");
class RadialDistanceSimplification {
    constructor(tolerance) {
        this.tolerance = tolerance;
    }
    simplify(points) {
        let result = [];
        let current = points[0];
        result.push(points[0]);
        for (let i = 1; i < points.length - 1; i++) {
            if (daeVector_1.DAEVector.distanceSqr(points[i], current) > this.tolerance * this.tolerance) {
                current = points[i];
                result.push(points[i]);
            }
        }
        result.push(points[points.length - 1]);
        return result;
    }
}
exports.RadialDistanceSimplification = RadialDistanceSimplification;


/***/ }),

/***/ "./src/curveSimplification/reumannWitkamSimplification.ts":
/*!****************************************************************!*\
  !*** ./src/curveSimplification/reumannWitkamSimplification.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.ReumannWitkamSimplification = void 0;
const daeVector_1 = __webpack_require__(/*! ../dae/daeVector */ "./src/dae/daeVector.ts");
class ReumannWitkamSimplification {
    constructor(tolerance) {
        this.tolerance = tolerance;
    }
    simplify(points) {
        let result = [];
        result.push(points[0]);
        let current = 1;
        for (let i = 1; i < points.length - 1; i++) {
            if (daeVector_1.DAEVector.distanceLinePoint(result[result.length - 1], points[current], points[i]) > this.tolerance) {
                result.push(points[i - 1]);
                current = i;
            }
        }
        result.push(points[points.length - 1]);
        return result;
    }
}
exports.ReumannWitkamSimplification = ReumannWitkamSimplification;


/***/ }),

/***/ "./src/dae/adaptiveStep.ts":
/*!*********************************!*\
  !*** ./src/dae/adaptiveStep.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.AdaptiveStepNewton = void 0;
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
class AdaptiveStepNewton {
    constructor(gamma, minStep) {
        this.gamma = gamma;
        this.minStep = minStep;
    }
    findStepIDAE(x, z, t, solver, system) {
        let step = 10e8;
        let state = system.getCurrentState();
        let links = state.getLinks();
        links.forEach((link) => {
            let dxdt = solver.solve_dx(x, z, t, state);
            let dzdt = solver.solve_dzdt(dxdt, x, z, t, state);
            let denom = vector_1.vector.dot(link.dpdx(x, z, t), dxdt) + vector_1.vector.dot(link.dpdz(x, z, t), dzdt) + link.dpdt(x, z, t);
            let h = -this.gamma * link.p(x, z, t) / denom;
            step = (h < 0 || isNaN(h) ? step : Math.min(step, h));
        });
        return Math.max(step, this.minStep);
    }
    findStepEDAE(x, z, t, system) {
        let step = 10e8;
        let state = system.getCurrentState();
        let links = state.getLinks();
        links.forEach((link) => {
            let dxdt = state.f(x, z, t);
            let dzdt = state.dgdt(x, t).addSelf(state.dgdx(x, t).multVec(dxdt));
            let denom = vector_1.vector.dot(link.dpdx(x, z, t), dxdt) + vector_1.vector.dot(link.dpdz(x, z, t), dzdt) + link.dpdt(x, z, t);
            let h = -this.gamma * link.p(x, z, t) / denom;
            step = (h < 0 || isNaN(h) ? step : Math.min(step, h));
        });
        return Math.max(step, this.minStep);
    }
}
exports.AdaptiveStepNewton = AdaptiveStepNewton;


/***/ }),

/***/ "./src/dae/customEDAEHybridState.ts":
/*!******************************************!*\
  !*** ./src/dae/customEDAEHybridState.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomEDAEHybridState = void 0;
const edaeHybridSystem_1 = __webpack_require__(/*! ./edaeHybridSystem */ "./src/dae/edaeHybridSystem.ts");
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../math/matrix */ "./src/math/matrix.ts");
class CustomEDAEHybridState extends edaeHybridSystem_1.EDAEHybridState {
    init(_f, _g, _dfdx, _dfdz, _dgdx, _dgdt) {
        this._f = _f;
        this._g = _g;
        this._dfdx = _dfdx;
        this._dfdz = _dfdz;
        this._dgdx = _dgdx;
        this._dgdt = _dgdt;
        return this;
    }
    pushLink(link) {
        this.links.push(link);
    }
    f(x, z, t) {
        let result = vector_1.vector.empty(this.length_x());
        let args = x.data.concat(z.data, [t]);
        this._f.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    g(x, t) {
        let result = vector_1.vector.empty(this.length_z());
        let args = x.data.concat([t]);
        this._g.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    dfdx(x, z, t) {
        let result = matrix_1.matrix.emptySquare(this.length_x());
        let args = x.data.concat(z.data, [t]);
        //for each row
        this._dfdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dfdz(x, z, t) {
        let result = matrix_1.matrix.empty(this.length_x(), this.length_z());
        let args = x.data.concat(z.data, [t]);
        //for each row
        this._dfdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dgdx(x, t) {
        let result = matrix_1.matrix.empty(this.length_z(), this.length_x());
        let args = x.data.concat([t]);
        //for each row
        this._dgdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dgdt(x, t) {
        let result = vector_1.vector.empty(this.length_z());
        let args = x.data.concat([t]);
        this._dgdt.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    length_x() {
        return this._f.length;
    }
    length_z() {
        return this._g.length;
    }
}
exports.CustomEDAEHybridState = CustomEDAEHybridState;


/***/ }),

/***/ "./src/dae/customEDAESystem.ts":
/*!*************************************!*\
  !*** ./src/dae/customEDAESystem.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomEDAESystem = void 0;
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../math/matrix */ "./src/math/matrix.ts");
class CustomEDAESystem {
    constructor(_f, _g, _dfdx, _dfdz, _dgdx) {
        this._f = _f;
        this._g = _g;
        this._dfdx = _dfdx;
        this._dfdz = _dfdz;
        this._dgdx = _dgdx;
    }
    length_x() {
        return this._f.length;
    }
    length_z() {
        return this._g.length;
    }
    f(x, z, t) {
        let result = vector_1.vector.empty(this.length_x());
        let args = x.data.concat(z.data, [t]);
        this._f.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    g(x, t) {
        let result = vector_1.vector.empty(this.length_z());
        let args = x.data.concat([t]);
        this._g.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    dfdx(x, z, t) {
        let result = matrix_1.matrix.emptySquare(this.length_x());
        let args = x.data.concat(z.data, [t]);
        //for each row
        this._dfdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dfdz(x, z, t) {
        let result = matrix_1.matrix.empty(this.length_x(), this.length_z());
        let args = x.data.concat(z.data, [t]);
        //for each row
        this._dfdz.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dgdx(x, t) {
        let result = matrix_1.matrix.empty(this.length_z(), this.length_x());
        let args = x.data.concat([t]);
        //for each row
        this._dgdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
}
exports.CustomEDAESystem = CustomEDAESystem;


/***/ }),

/***/ "./src/dae/customHybridStateLink.ts":
/*!******************************************!*\
  !*** ./src/dae/customHybridStateLink.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomHybridStateLink = exports.Setter = void 0;
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
class Setter {
    constructor(index, expression) {
        this.index = index;
        this.expression = expression;
    }
}
exports.Setter = Setter;
class CustomHybridStateLink {
    constructor(newState, setters, _p, _dpdx, _dpdz, _dpdt) {
        this.newState = newState;
        this.setters = setters;
        this._p = _p;
        this._dpdx = _dpdx;
        this._dpdz = _dpdz;
        this._dpdt = _dpdt;
    }
    getNewState() {
        return this.newState;
    }
    pr(x, z, t) {
        let value = this.p(x, z, t);
        return value < 0 ? true : false;
    }
    p(x, z, t) {
        let args = x.data.concat(z.data, [t]);
        return this._p.execute(args);
    }
    dpdt(x, z, t) {
        let args = x.data.concat(z.data, [t]);
        return this._dpdt.execute(args);
    }
    setConditions(x, z, t) {
        let result = x.clone();
        let args = x.data.concat(z.data, [t]);
        this.setters.forEach(function (item) {
            result.set(item.expression.execute(args), item.index);
        });
        return result;
    }
    dpdz(x, z, t) {
        let result = vector_1.vector.empty(z.length());
        let args = x.data.concat(z.data, [t]);
        this._dpdz.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    dpdx(x, z, t) {
        let result = vector_1.vector.empty(x.length());
        let args = x.data.concat(z.data, [t]);
        this._dpdx.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
}
exports.CustomHybridStateLink = CustomHybridStateLink;


/***/ }),

/***/ "./src/dae/customIDAEHybridState.ts":
/*!******************************************!*\
  !*** ./src/dae/customIDAEHybridState.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomIDAEHybridState = void 0;
const idaeHybridSystem_1 = __webpack_require__(/*! ./idaeHybridSystem */ "./src/dae/idaeHybridSystem.ts");
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../math/matrix */ "./src/math/matrix.ts");
class CustomIDAEHybridState extends idaeHybridSystem_1.IDAEHybridState {
    init(_f, _g, _dfdx, _dfddx, _dfdz, _dgdx, _dgdz, _dgdt) {
        this._f = _f;
        this._g = _g;
        this._dfdx = _dfdx;
        this._dfddx = _dfddx;
        this._dfdz = _dfdz;
        this._dgdx = _dgdx;
        this._dgdz = _dgdz;
        this._dgdt = _dgdt;
        return this;
    }
    pushLink(link) {
        this.links.push(link);
    }
    f(x, dx, z, t) {
        let result = vector_1.vector.empty(this.length_x());
        let args = x.data.concat(dx.data, z.data, [t]);
        this._f.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    g(x, z, t) {
        let result = vector_1.vector.empty(this.length_z());
        let args = x.data.concat(z.data, [t]);
        this._g.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    dfdx(x, dx, z, t) {
        let result = matrix_1.matrix.emptySquare(this.length_x());
        let args = x.data.concat(dx.data, z.data, [t]);
        //for each row
        this._dfdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dfddx(x, dx, z, t) {
        let result = matrix_1.matrix.emptySquare(this.length_x());
        let args = x.data.concat(dx.data, z.data, [t]);
        //for each row
        this._dfddx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dfdz(x, dx, z, t) {
        let result = matrix_1.matrix.empty(this.length_x(), this.length_z());
        let args = x.data.concat(dx.data, z.data, [t]);
        //for each row
        this._dfdz.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dgdz(x, z, t) {
        let result = matrix_1.matrix.emptySquare(this.length_z());
        let args = x.data.concat(z.data, [t]);
        this._dgdz.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dgdx(x, z, t) {
        let result = matrix_1.matrix.empty(this.length_z(), this.length_x());
        let args = x.data.concat(z.data, [t]);
        this._dgdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dgdt(x, z, t) {
        let result = vector_1.vector.empty(this.length_z());
        let args = x.data.concat(z.data, [t]);
        this._dgdt.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    length_x() {
        return this._f.length;
    }
    length_z() {
        return this._g.length;
    }
}
exports.CustomIDAEHybridState = CustomIDAEHybridState;


/***/ }),

/***/ "./src/dae/customIDAESystem.ts":
/*!*************************************!*\
  !*** ./src/dae/customIDAESystem.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomIDAESystem = void 0;
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../math/matrix */ "./src/math/matrix.ts");
class CustomIDAESystem {
    constructor(_f, _g, _dfdx, _dfddx, _dfdz, _dgdx, _dgdz) {
        this._f = _f;
        this._g = _g;
        this._dfdx = _dfdx;
        this._dfddx = _dfddx;
        this._dfdz = _dfdz;
        this._dgdx = _dgdx;
        this._dgdz = _dgdz;
    }
    length_x() {
        return this._f.length;
    }
    length_z() {
        return this._g.length;
    }
    f(x, dx, z, t) {
        let result = vector_1.vector.empty(this.length_x());
        let args = x.data.concat(dx.data, z.data, [t]);
        this._f.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    g(x, z, t) {
        let result = vector_1.vector.empty(this.length_z());
        let args = x.data.concat(z.data, [t]);
        this._g.forEach(function (item, i) {
            result.set(item.execute(args), i);
        });
        return result;
    }
    dfdx(x, dx, z, t) {
        let result = matrix_1.matrix.emptySquare(this.length_x());
        let args = x.data.concat(dx.data, z.data, [t]);
        //for each row
        this._dfdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dfddx(x, dx, z, t) {
        let result = matrix_1.matrix.emptySquare(this.length_x());
        let args = x.data.concat(dx.data, z.data, [t]);
        //for each row
        this._dfddx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dfdz(x, dx, z, t) {
        let result = matrix_1.matrix.empty(this.length_x(), this.length_z());
        let args = x.data.concat(dx.data, z.data, [t]);
        //for each row
        this._dfdz.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dgdz(x, z, t) {
        let result = matrix_1.matrix.emptySquare(this.length_z());
        let args = x.data.concat(z.data, [t]);
        this._dgdz.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
    dgdx(x, z, t) {
        let result = matrix_1.matrix.empty(this.length_z(), this.length_x());
        let args = x.data.concat(z.data, [t]);
        this._dgdx.forEach(function (row, j) {
            //for each cell in row
            row.forEach(function (item, i) {
                result.set(item.execute(args), j, i);
            });
        });
        return result;
    }
}
exports.CustomIDAESystem = CustomIDAESystem;


/***/ }),

/***/ "./src/dae/daeVector.ts":
/*!******************************!*\
  !*** ./src/dae/daeVector.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DAEVector = void 0;
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
class DAEVector {
    constructor(x, z, t) {
        this.x = x;
        this.z = z;
        this.t = t;
    }
    lengthSqr() {
        return this.t * this.t + this.x.norm2Sqr() + this.z.norm2Sqr();
    }
    length() {
        return Math.sqrt(this.t * this.t + this.x.norm2Sqr() + this.z.norm2Sqr());
    }
    static distance(a, b) {
        return Math.sqrt(Math.pow(a.t - b.t, 2) + vector_1.vector.sub(a.x, b.x).norm2Sqr() + vector_1.vector.sub(a.z, b.z).norm2Sqr());
    }
    static distanceSqr(a, b) {
        return Math.pow(a.t - b.t, 2) + vector_1.vector.sub(a.x, b.x).norm2Sqr() + vector_1.vector.sub(a.z, b.z).norm2Sqr();
    }
    static dot(a, b) {
        return a.t * b.t + vector_1.vector.dot(a.x, b.x) + vector_1.vector.dot(a.z, b.z);
    }
    static sub(a, b) {
        return new DAEVector(vector_1.vector.sub(a.x, b.x), vector_1.vector.sub(a.z, b.z), a.t - b.t);
    }
    static distanceLinePoint(p1, p2, point) {
        let a = DAEVector.distanceSqr(point, p1); //dist from p to p1
        let b = DAEVector.dot(DAEVector.sub(point, p1), DAEVector.sub(p2, p1));
        let c = DAEVector.distanceSqr(p1, p2);
        return Math.sqrt(a - b * b / c);
    }
}
exports.DAEVector = DAEVector;


/***/ }),

/***/ "./src/dae/edaeHybridSolver.ts":
/*!*************************************!*\
  !*** ./src/dae/edaeHybridSolver.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAEHybridSolver = void 0;
const daeVector_1 = __webpack_require__(/*! ./daeVector */ "./src/dae/daeVector.ts");
const hybridSolution_1 = __webpack_require__(/*! ./hybridSolution */ "./src/dae/hybridSolution.ts");
const maxFloats = 2097152;
class EDAEHybridSolver {
    constructor(eventDetector, adaptiveStepStrategy) {
        this.eventDetector = eventDetector;
        this.adaptiveStepStrategy = adaptiveStepStrategy;
    }
    solve(x0, t0, t1, solver, system) {
        let solutionValues = [];
        let states = [];
        let stateSwitches = [];
        let t = t0;
        let x = x0;
        let z = system.getCurrentState().g(x, t);
        let oldValues = new daeVector_1.DAEVector(x, z, t);
        solutionValues.push(oldValues);
        states.push(system.getCurrentStateIndex());
        stateSwitches.push(t0);
        while (oldValues.t < t1) {
            //calculate new step size
            let currentStep = solver.getStep();
            let isStepChanged = false;
            if (this.adaptiveStepStrategy != null) {
                let h = this.adaptiveStepStrategy.findStepEDAE(oldValues.x, oldValues.z, oldValues.t, system);
                if (h > 0 && h < solver.getStep()) {
                    solver.setStep(h);
                    isStepChanged = true;
                }
            }
            //calculate variable values at t_{n+1}, t_{n+1} = t_n + h
            let curValues = solver.makeStep(oldValues.x, oldValues.z, oldValues.t, system.getCurrentState());
            //check for state change in the interval [t_n,t_n+h]
            if (this.eventDetector.checkEventEDAE(oldValues, curValues, solver, system)) {
                states.push(system.getCurrentStateIndex());
                stateSwitches.push(curValues.t);
                //check for terminal state
                if (system.isTerminal()) {
                    break;
                }
                //reset multistep method
                solver.setStep(currentStep);
            }
            else if (isStepChanged)
                solver.setStep(currentStep);
            oldValues = curValues;
            solutionValues.push(oldValues);
            if (states.length * 2 + solutionValues.length * (system.getCurrentState().length_x() + system.getCurrentState().length_z() + 1) > maxFloats) {
                console.info(`Solution was terminated prematurely due to memory limit`);
                break;
            }
        }
        return new hybridSolution_1.HybridSolution(solutionValues, states, stateSwitches);
    }
}
exports.EDAEHybridSolver = EDAEHybridSolver;


/***/ }),

/***/ "./src/dae/edaeHybridSystem.ts":
/*!*************************************!*\
  !*** ./src/dae/edaeHybridSystem.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAEHybridSystem = exports.EDAEHybridState = void 0;
class EDAEHybridState {
    constructor(name, links, terminal) {
        this.name = name;
        this.links = links;
        this.terminal = terminal;
    }
    isTerminal() {
        return this.terminal;
    }
    getLinks() {
        return this.links;
    }
    getName() {
        return this.name;
    }
}
exports.EDAEHybridState = EDAEHybridState;
class EDAEHybridSystem {
    constructor(states) {
        this.states = states;
        this.currentState = 0;
    }
    setCurrentState(state) {
        this.currentState = state;
    }
    getCurrentStateIndex() {
        return this.currentState;
    }
    getCurrentState() {
        return this.states[this.currentState];
    }
    isTerminal() {
        return this.states[this.currentState].isTerminal();
    }
}
exports.EDAEHybridSystem = EDAEHybridSystem;


/***/ }),

/***/ "./src/dae/edaeSolver.ts":
/*!*******************************!*\
  !*** ./src/dae/edaeSolver.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAESolver = void 0;
class EDAESolver {
    constructor(step) {
        this.step = step;
    }
    setStep(value) {
        this.step = value;
    }
    getStep() {
        return this.step;
    }
}
exports.EDAESolver = EDAESolver;


/***/ }),

/***/ "./src/dae/eventDetection.ts":
/*!***********************************!*\
  !*** ./src/dae/eventDetection.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDetectionComplex = exports.EventDetectionSimple = void 0;
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
class EventDetectionSimple {
    /**
     * Event detection for implicit dae hybrid system
     * @param oldValues values at t
     * @param curValues values at t+h, used to store initial values in case of state change
     * @param solver implicit dae solver
     * @param system hybrid system
     * @returns true when state has changed
     */
    checkEventIDAE(oldValues, curValues, solver, system) {
        let value = 10e8;
        let index = -1;
        let state = system.getCurrentState();
        let links = state.getLinks();
        links.forEach((link, id) => {
            let p = link.p(curValues.x, curValues.z, curValues.t);
            if (p >= 0 && p < value) {
                value = p;
                index = id;
            }
        });
        if (index != -1) {
            curValues.x = links[index].setConditions(curValues.x, curValues.z, curValues.t);
            system.setCurrentState(links[index].getNewState());
            return true;
        }
        return false;
    }
    /**
     * Event detection for explicit dae hybrid system
     * @param oldValues values at t
     * @param curValues values at t+h, used to store initial values in case of state change
     * @param solver explicit dae solver
     * @param system hybrid system
     * @returns true when state has changed
     */
    checkEventEDAE(oldValues, curValues, solver, system) {
        let value = 10e8;
        let index = -1;
        let state = system.getCurrentState();
        let links = state.getLinks();
        links.forEach((link, id) => {
            let p = link.p(curValues.x, curValues.z, curValues.t);
            if (p >= 0 && p < value) {
                value = p;
                index = id;
            }
        });
        if (index != -1) {
            curValues.x = links[index].setConditions(curValues.x, curValues.z, curValues.t);
            system.setCurrentState(links[index].getNewState());
            return true;
        }
        return false;
    }
}
exports.EventDetectionSimple = EventDetectionSimple;
/**
 * Event detection on time step interval with newton method for cases, when signs of event condition function doesn't change and bisection method
 * for cases with change of sign
 */
class EventDetectionComplex {
    constructor(newtonIterations = 30, relTol = 1e-6, absTol = 1e-5, alpha = 0.95, bisectionIterations = 30, timeAbsTol = 1e-4, timeRelTol = 1e-4) {
        this.newtonIterations = 30;
        this.relTol = 1e-6;
        this.absTol = 1e-5;
        this.alpha = 0.95;
        this.bisectionIterations = 30;
        this.timeAbsTol = 1e-4;
        this.timeRelTol = 1e-4;
        this.newtonIterations = newtonIterations;
        this.relTol = relTol;
        this.absTol = absTol;
        this.alpha = alpha;
        this.bisectionIterations = bisectionIterations;
        this.timeAbsTol = timeAbsTol;
        this.timeRelTol = timeRelTol;
    }
    /**
     * Event detection for implicit dae hybrid system
     * @param oldValues values at t
     * @param curValues values at t+h, used to store initial values in case of state change
     * @param solver implicit dae solver
     * @param system hybrid system
     * @returns true when state has changed
     */
    checkEventIDAE(oldValues, curValues, solver, system) {
        let time = 10e8;
        let index = -1;
        let state = system.getCurrentState();
        let links = state.getLinks();
        let step = curValues.t - oldValues.t;
        let dx = vector_1.vector.sub(curValues.x, oldValues.x).scaleSelf(1 / step);
        let dz = vector_1.vector.sub(curValues.z, oldValues.z).scaleSelf(1 / step);
        //assume that x and z are linear in interval [oldT,curT]
        links.forEach((link, id) => {
            let p0 = link.p(oldValues.x, oldValues.z, oldValues.t);
            let p1 = link.p(curValues.x, curValues.z, curValues.t);
            if (p0 >= 0 && oldValues.t < time) {
                time = oldValues.t;
                index = id;
                return;
            }
            else if (p1 >= 0 && curValues.t < time) {
                time = curValues.t;
                index = id;
            }
            let _p0 = Math.min(Math.abs(p1), Math.abs(p0));
            let p = p0;
            let t = oldValues.t;
            let x = oldValues.x;
            let z = oldValues.z;
            let flag = false;
            //Newton method for root finding
            for (let i = 0; i < this.newtonIterations; i++) {
                let dpdt = vector_1.vector.dot(link.dpdx(x, z, t), dx) +
                    vector_1.vector.dot(link.dpdz(x, z, t), dz) + link.dpdt(x, z, t);
                p = Math.max(Math.abs(p), this.absTol) * Math.sign(p);
                let dt = -this.alpha * p / dpdt;
                //dt = Math.max(this.timeAbsTol,Math.abs(dt))*Math.sign(dt);
                t += dt;
                if (t < oldValues.t || t > curValues.t)
                    break;
                x = vector_1.vector.mix(oldValues.x, curValues.x, (t - oldValues.t) / step);
                z = vector_1.vector.mix(oldValues.z, curValues.z, (t - oldValues.t) / step);
                p = link.p(x, z, t);
                if (p >= 0 && Math.abs(p) < _p0 * this.relTol + this.absTol) {
                    if (t < time) {
                        time = t;
                        index = id;
                    }
                    return;
                }
            }
            //bisection
            {
                if (p1 >= 0 && p0 <= 0) {
                    let t1 = curValues.t;
                    let t0 = oldValues.t;
                    for (let i = 0; i < this.bisectionIterations; i++) {
                        let t = (t1 + t0) / 2;
                        let x = vector_1.vector.mix(oldValues.x, curValues.x, (t - oldValues.t) / step);
                        let z = vector_1.vector.mix(oldValues.z, curValues.z, (t - oldValues.t) / step);
                        let p = link.p(x, z, t);
                        let dt = 0;
                        if (p >= 0) {
                            p1 = p;
                            t1 = t;
                            dt = t - t0;
                            if (p < _p0 * this.relTol + this.absTol && dt < this.timeAbsTol + step * this.timeRelTol && t < time) {
                                time = t;
                                index = id;
                                break;
                            }
                        }
                        else {
                            p0 = p;
                            t0 = t;
                            dt = t1 - t;
                        }
                    }
                }
            }
            //TODO add false position from matlab article
        });
        if (index != -1) {
            let x = vector_1.vector.mix(oldValues.x, curValues.x, (time - oldValues.t) / step);
            let z = vector_1.vector.mix(oldValues.z, curValues.z, (time - oldValues.t) / step);
            z = solver.solve_z(x, z, time, state);
            curValues.x = links[index].setConditions(x, z, time);
            curValues.t = time;
            curValues.z = solver.solve_z(curValues.x, z, curValues.t, state);
            system.setCurrentState(links[index].getNewState());
            //curValues.z = z;
            return true;
        }
        return false;
    }
    /**
     * Event detection for explicit dae hybrid system
     * @param oldValues values at t
     * @param curValues values at t+h, used to store initial values in case of state change
     * @param solver explicit dae solver
     * @param system hybrid system
     * @returns true when state has changed
     */
    checkEventEDAE(oldValues, curValues, solver, system) {
        let time = 10e8;
        let index = -1;
        let state = system.getCurrentState();
        let links = state.getLinks();
        let step = curValues.t - oldValues.t;
        let dx = vector_1.vector.sub(curValues.x, oldValues.x).scaleSelf(1 / step);
        let dz = vector_1.vector.sub(curValues.z, oldValues.z).scaleSelf(1 / step);
        //assume that x and z are linear in interval [oldT,curT]
        links.forEach((link, id) => {
            let p0 = link.p(oldValues.x, oldValues.z, oldValues.t);
            let p1 = link.p(curValues.x, curValues.z, curValues.t);
            if (p0 >= 0 && oldValues.t < time) {
                time = oldValues.t;
                index = id;
                return;
            }
            else if (p1 >= 0 && curValues.t < time) {
                time = curValues.t;
                index = id;
            }
            let _p0 = Math.min(Math.abs(p1), Math.abs(p0));
            let p = p0;
            let t = oldValues.t;
            let x = oldValues.x;
            let z = oldValues.z;
            let flag = false;
            //newton
            for (let i = 0; i < this.newtonIterations; i++) {
                let dpdt = vector_1.vector.dot(link.dpdx(x, z, t), dx) +
                    vector_1.vector.dot(link.dpdz(x, z, t), dz) + link.dpdt(x, z, t);
                p = Math.max(Math.abs(p), this.absTol) * Math.sign(p);
                let dt = -this.alpha * p / dpdt;
                //dt = Math.max(this.timeAbsTol,Math.abs(dt))*Math.sign(dt);
                t += dt;
                if (t < oldValues.t || t > curValues.t)
                    break;
                x = vector_1.vector.mix(oldValues.x, curValues.x, (t - oldValues.t) / step);
                z = vector_1.vector.mix(oldValues.z, curValues.z, (t - oldValues.t) / step);
                p = link.p(x, z, t);
                if (p >= 0 && Math.abs(p) < _p0 * this.relTol + this.absTol) {
                    if (t < time) {
                        time = t;
                        index = id;
                    }
                    return;
                }
            }
            //bisection
            {
                if (p1 >= 0 && p0 <= 0) {
                    let t1 = curValues.t;
                    let t0 = oldValues.t;
                    for (let i = 0; i < this.bisectionIterations; i++) {
                        let t = (t1 + t0) / 2;
                        let x = vector_1.vector.mix(oldValues.x, curValues.x, (t - oldValues.t) / step);
                        let z = vector_1.vector.mix(oldValues.z, curValues.z, (t - oldValues.t) / step);
                        let p = link.p(x, z, t);
                        let dt = 0;
                        if (p >= 0) {
                            p1 = p;
                            t1 = t;
                            dt = t - t0;
                            if (p < _p0 * this.relTol + this.absTol && dt < this.timeAbsTol + step * this.timeRelTol && t < time) {
                                time = t;
                                index = id;
                                break;
                            }
                        }
                        else {
                            p0 = p;
                            t0 = t;
                            dt = t1 - t;
                        }
                    }
                }
            }
            //TODO add false position from matlab article
        });
        if (index != -1) {
            let x = vector_1.vector.mix(oldValues.x, curValues.x, (time - oldValues.t) / step);
            //let z = vector.mix(oldValues.z,curValues.z,(time-oldValues.t)/step);
            let z = state.g(x, time);
            curValues.x = links[index].setConditions(x, z, time);
            curValues.t = time;
            curValues.z = state.g(curValues.x, curValues.t);
            system.setCurrentState(links[index].getNewState());
            //curValues.z = z;
            return true;
        }
        return false;
    }
}
exports.EventDetectionComplex = EventDetectionComplex;


/***/ }),

/***/ "./src/dae/hybridSolution.ts":
/*!***********************************!*\
  !*** ./src/dae/hybridSolution.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.HybridSolution = void 0;
/*export abstract class HybridState{
    name:string;
    links:HybridStateLink[];
    terminal:boolean;
    abstract f(x:vector,z:vector,t:number):vector;
    abstract g(x:vector,z:vector,t:number):vector;
    abstract dfdx(x:vector,z:vector,t:number):matrix;
    abstract dfdz(x:vector,z:vector,t:number):matrix;
}*/
class HybridSolution {
    constructor(values, states, stateSwitches) {
        this.values = values;
        this.states = states;
    }
}
exports.HybridSolution = HybridSolution;


/***/ }),

/***/ "./src/dae/idaeHybridSolver.ts":
/*!*************************************!*\
  !*** ./src/dae/idaeHybridSolver.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAEHybridSolver = void 0;
const hybridSolution_1 = __webpack_require__(/*! ./hybridSolution */ "./src/dae/hybridSolution.ts");
const daeVector_1 = __webpack_require__(/*! ./daeVector */ "./src/dae/daeVector.ts");
const maxFloats = 2097152;
//TODO: test this solver
class IDAEHybridSolver {
    constructor(eventDetector, adaptiveStepStrategy) {
        this.eventDetector = eventDetector;
        this.adaptiveStepStrategy = adaptiveStepStrategy;
    }
    solve(x0, z0, t0, t1, solver, system) {
        let solutionValues = [];
        let states = [];
        let stateSwitches = [];
        let t = t0;
        let x = x0;
        let z = solver.solve_z(x, z0, t, system.getCurrentState());
        let oldValues = new daeVector_1.DAEVector(x, z, t);
        solutionValues.push(oldValues);
        states.push(system.getCurrentStateIndex());
        stateSwitches.push(t0);
        while (oldValues.t < t1) {
            //find step
            let currentStep = solver.getStep();
            let isStepChanged = false;
            if (this.adaptiveStepStrategy != null) {
                let h = this.adaptiveStepStrategy.findStepIDAE(oldValues.x, oldValues.z, oldValues.t, solver, system);
                if (h > 0 && h < solver.getStep()) {
                    solver.setStep(h);
                    isStepChanged = true;
                }
            }
            //get values
            let curValues = solver.makeStep(oldValues.x, oldValues.z, oldValues.t, system.getCurrentState());
            //check for state change in the interval [t,t+h]
            if (this.eventDetector.checkEventIDAE(oldValues, curValues, solver, system)) {
                states.push(system.getCurrentStateIndex());
                stateSwitches.push(curValues.t);
                if (system.isTerminal()) {
                    break;
                }
                //reset multistep method
                solver.setStep(currentStep);
            }
            else if (isStepChanged)
                solver.setStep(currentStep);
            oldValues = curValues;
            solutionValues.push(oldValues);
            if (states.length * 2 + solutionValues.length * (system.getCurrentState().length_x() + system.getCurrentState().length_z() + 1) > maxFloats) {
                console.info(`Solution was terminated prematurely due to memory limit`);
                break;
            }
        }
        return new hybridSolution_1.HybridSolution(solutionValues, states, stateSwitches);
    }
}
exports.IDAEHybridSolver = IDAEHybridSolver;


/***/ }),

/***/ "./src/dae/idaeHybridSystem.ts":
/*!*************************************!*\
  !*** ./src/dae/idaeHybridSystem.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAEHybridSystem = exports.IDAEHybridState = void 0;
class IDAEHybridState {
    constructor(name, links, terminal) {
        this.name = name;
        this.links = links;
        this.terminal = terminal;
    }
    isTerminal() {
        return this.terminal;
    }
    getLinks() {
        return this.links;
    }
    getName() {
        return this.name;
    }
}
exports.IDAEHybridState = IDAEHybridState;
class IDAEHybridSystem {
    constructor(states) {
        this.states = states;
        this.currentState = 0;
    }
    getCurrentStateIndex() {
        return this.currentState;
    }
    getCurrentState() {
        return this.states[this.currentState];
    }
    isTerminal() {
        return this.states[this.currentState].isTerminal();
    }
    setCurrentState(state) {
        this.currentState = state;
    }
}
exports.IDAEHybridSystem = IDAEHybridSystem;


/***/ }),

/***/ "./src/dae/idaeSolver.ts":
/*!*******************************!*\
  !*** ./src/dae/idaeSolver.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAESolver = void 0;
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const gauss_1 = __webpack_require__(/*! ../math/gauss */ "./src/math/gauss.ts");
class IDAESolver {
    constructor(step, newtonSolver) {
        this.step = step;
        this.systemSolver = newtonSolver;
    }
    setStep(value) {
        this.step = value;
    }
    getStep() {
        return this.step;
    }
    solve_z(x, z, t, system) {
        if (system.length_z() == 0)
            return z;
        //solve g(x_{n+1},z_{n+1},t_{n+1}) = 0 for z_{n+1} 
        return this.systemSolver.solve((zNew) => {
            return system.g(x, zNew, t);
        }, (zNew) => {
            return system.dgdz(x, zNew, t);
        }, system.length_z(), z.clone());
        /*let zNew = z.clone();
        let F: vector = system.g(x, zNew, t);
        let f0norm: number = F.norm2();
        for (let i = 0; i < this.systemSolver.getIterations(); i++) {
            let J: matrix;
            J = system.dgdz(x, zNew, t);
            let fnorm = F.norm2();
            let dz = gauss.solve(J, F.scaleSelf(-this.systemSolver.getAlpha()));
            zNew.addSelf(dz);
            F = system.g(x, zNew, t);
            if (fnorm < this.systemSolver.getAbsTol() + this.systemSolver.getRelTol() * f0norm) {
                return zNew;
            }
        }
        throw "divergence at solve_z";*/
    }
    solve_dx(x, z, t, system) {
        if (system.length_x() == 0)
            return new vector_1.vector([]);
        //solve f(x,dx,z,t) = 0
        return this.systemSolver.solve((dx) => {
            return system.f(x, dx, z, t);
        }, (dx) => {
            return system.dfddx(x, dx, z, t);
        }, system.length_x());
        /*
        let dx = vector.empty(system.length_x());
        let F: vector = system.f(x, dx, z, t);
        let f0norm: number = F.norm2();
        for (let i = 0; i < this.systemSolver.getIterations(); i++) {
            let J: matrix;
            J = system.dfddx(x, dx, z, t);
            let fnorm = F.norm2();
            let _dx = gauss.solve(J, F.scaleSelf(-this.systemSolver.getAlpha()));
            dx.addSelf(_dx);
            F = system.f(x, dx, z, t);
            if (fnorm < this.systemSolver.getAbsTol() + this.systemSolver.getRelTol() * f0norm) {
                return dx;
            }
        }
        throw "divergence at solve_dx";*/
    }
    solve_dzdt(dx, x, z, t, state) {
        if (state.length_z() == 0)
            return z;
        let A = state.dgdz(x, z, t);
        let b;
        if (state.length_x() != 0)
            b = state.dgdx(x, z, t).multVec(dx).addSelf(state.dgdt(x, z, t)).scaleSelf(-1);
        else
            b = state.dgdt(x, z, t).scaleSelf(-1);
        //solve linear system
        //dg/dz dz/dt = -dg/dx x' - dg/dt
        let dzdt = gauss_1.gauss.solve(A, b);
        return dzdt;
    }
}
exports.IDAESolver = IDAESolver;


/***/ }),

/***/ "./src/dae/solvers/edae/adams-bashforth.ts":
/*!*************************************************!*\
  !*** ./src/dae/solvers/edae/adams-bashforth.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAE_AB6 = exports.EDAE_AB5 = exports.EDAE_AB4 = exports.EDAE_AB3 = exports.EDAE_AB2 = void 0;
const edaeSolver_1 = __webpack_require__(/*! ../../edaeSolver */ "./src/dae/edaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const rk_1 = __webpack_require__(/*! ../edae/rk */ "./src/dae/solvers/edae/rk.ts");
class EDAE_ADAMS_BASHFORTH extends edaeSolver_1.EDAESolver {
    constructor(step, b, solver, stages) {
        super(step);
        this.b = b;
        this.solver = solver;
        this.stages = stages;
        this.prevValues = [];
    }
    setStep(value) {
        super.setStep(value);
        this.prevValues = [];
    }
    makeStep(x, z, t, system) {
        this.prevValues.splice(0, 0, system.f(x, z, t));
        if (this.prevValues.length != this.stages) {
            let result = this.solver.makeStep(x, z, t, system);
            return result;
        }
        let tNew = t + this.step;
        let xNew = x.clone();
        for (let i = 0; i < this.stages; i++) {
            xNew.addSelf(vector_1.vector.scale(this.prevValues[i], this.step * this.b[i]));
        }
        let zNew = system.g(xNew, tNew);
        this.prevValues.splice(this.prevValues.length - 1, 1);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
class EDAE_AB2 extends EDAE_ADAMS_BASHFORTH {
    constructor(step) {
        super(step, [3 / 2, -1 / 2], new rk_1.EDAE_RK4(step), 2);
    }
}
exports.EDAE_AB2 = EDAE_AB2;
class EDAE_AB3 extends EDAE_ADAMS_BASHFORTH {
    constructor(step) {
        super(step, [23 / 12, -4 / 3, 5 / 12], new rk_1.EDAE_RK4(step), 3);
    }
}
exports.EDAE_AB3 = EDAE_AB3;
class EDAE_AB4 extends EDAE_ADAMS_BASHFORTH {
    constructor(step) {
        super(step, [55 / 24, -59 / 24, 37 / 24, -3 / 8], new rk_1.EDAE_RK4(step), 4);
    }
}
exports.EDAE_AB4 = EDAE_AB4;
class EDAE_AB5 extends EDAE_ADAMS_BASHFORTH {
    constructor(step) {
        super(step, [1901 / 720, -1387 / 360, 109 / 30, -637 / 360, 251 / 720], new rk_1.EDAE_RK6(step), 5);
    }
}
exports.EDAE_AB5 = EDAE_AB5;
class EDAE_AB6 extends EDAE_ADAMS_BASHFORTH {
    constructor(step) {
        super(step, [4277 / 1440, -2641 / 480, 4991 / 720, -3649 / 720, 959 / 480, -95 / 288], new rk_1.EDAE_RK6(step), 6);
    }
}
exports.EDAE_AB6 = EDAE_AB6;


/***/ }),

/***/ "./src/dae/solvers/edae/algebraicSolver.ts":
/*!*************************************************!*\
  !*** ./src/dae/solvers/edae/algebraicSolver.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAE_AlgebraicSolver = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const edaeSolver_1 = __webpack_require__(/*! ../../edaeSolver */ "./src/dae/edaeSolver.ts");
/**
 * solver for z = g(t)
 */
class EDAE_AlgebraicSolver extends edaeSolver_1.EDAESolver {
    makeStep(x, z, t, system) {
        let xNew = x;
        let tNew = t + this.step;
        let zNew = system.g(xNew, tNew);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
exports.EDAE_AlgebraicSolver = EDAE_AlgebraicSolver;


/***/ }),

/***/ "./src/dae/solvers/edae/euler.ts":
/*!***************************************!*\
  !*** ./src/dae/solvers/edae/euler.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAE_IEuler = exports.EDAE_EEuler = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const edaeSolver_1 = __webpack_require__(/*! ../../edaeSolver */ "./src/dae/edaeSolver.ts");
const matrix_1 = __webpack_require__(/*! ../../../math/matrix */ "./src/math/matrix.ts");
const gauss_1 = __webpack_require__(/*! ../../../math/gauss */ "./src/math/gauss.ts");
/**
 * forward euler for explicit dae with index one
 */
class EDAE_EEuler extends edaeSolver_1.EDAESolver {
    makeStep(x, z, t, system) {
        let xNew = system.f(x, z, t).scaleSelf(this.step).addSelf(x);
        let tNew = t + this.step;
        let zNew = system.g(xNew, tNew);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
exports.EDAE_EEuler = EDAE_EEuler;
/**
 * backward euler method for explicit dae with index one
 */
class EDAE_IEuler extends edaeSolver_1.EDAESolver {
    constructor(step, stepSolver) {
        super(step);
        this.stepSolver = stepSolver;
    }
    /*
    F = x_{n+1} - x_n - hf(x_{n+1},g(x_{n+1},t_{n+1}),t_{n+1}) = 0
    dFi/dx_{n+1}j = \delta_ij - h*df/dx - h*df/dz*dg/dx
    */
    makeStep(x, z, t, system) {
        let xNew = x.clone();
        let tNew = t + this.step;
        let zNew = system.g(xNew, tNew);
        let F = system.f(xNew, zNew, tNew).scaleSelf(-this.step).addSelf(xNew).subSelf(x);
        let f0norm = F.norm2();
        for (let i = 0; i < this.stepSolver.getIterations(); i++) {
            let J = matrix_1.matrix.identity(system.length_x());
            J.subSelf(system.dfdx(xNew, zNew, tNew).addSelf(matrix_1.matrix.mult(system.dfdz(xNew, zNew, tNew), system.dgdx(xNew, tNew))).scaleSelf(this.step));
            let dx = gauss_1.gauss.solve(J, F.scaleSelf(-this.stepSolver.getAlpha()));
            xNew.addSelf(dx);
            zNew = system.g(xNew, tNew);
            F = system.f(xNew, zNew, tNew).scaleSelf(-this.step).addSelf(xNew).subSelf(x);
            let fnorm = F.norm2();
            if (i >= this.stepSolver.getMinIterations() && fnorm < this.stepSolver.getAbsTol() + this.stepSolver.getRelTol() * f0norm) {
                return new daeVector_1.DAEVector(xNew, zNew, tNew);
            }
        }
        throw new Error("Divergence of newton method");
    }
}
exports.EDAE_IEuler = EDAE_IEuler;


/***/ }),

/***/ "./src/dae/solvers/edae/midpoint.ts":
/*!******************************************!*\
  !*** ./src/dae/solvers/edae/midpoint.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAE_IMidpoint = exports.EDAE_EMidpoint = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const edaeSolver_1 = __webpack_require__(/*! ../../edaeSolver */ "./src/dae/edaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../../../math/matrix */ "./src/math/matrix.ts");
const gauss_1 = __webpack_require__(/*! ../../../math/gauss */ "./src/math/gauss.ts");
/*
explicit
    x_{n+1} = x_n + h f(x_n+0.5h*f(x_n,t_n),t_n + 0.5*h)
    {
        1.  k_1 = f(x_n,z_n,t_n)
        explicit Nx
        2.  x_{n+1} = x_n + h*f(x_n + 0.5*h * k_1,g(x_n + 0.5 *h* k_1,t_n + 0.5*h),t_n + 0.5*h)
        explicit Nx
        3.  z_{n+1} = g(x_{n+1},t_{n+1})
        explicit Nz
    }
implicit
    x_{n+1}=x_n + h f(0.5*(x_n+x_{n+1}),t_n+0.5*h)
    {
        1.  x_{n+1} - x_n - h*f(0.5*(x_n+x_{n+1}),0.5*(z_n+z_{n+1}),t_n+0.5*h) = 0
            z_{n+1} - g(x_{n+1},t_{n+1}) = 0
        implicit Nx + Nz

        OR

        1. x_{n+1} - x_n - h * f(0.5*(x_n+x_{n+1}),0.5*(z_n + g(x_{n+1],t_{n+1})),t_n + 0.5*j)=0
        implicit Nx
        2. z_{n+1} = g(x_{n+1},t_{n+1})
        explicit Nz
    }
*/
/**
 * explicit midpoint method for explicit dae with index one
 */
class EDAE_EMidpoint extends edaeSolver_1.EDAESolver {
    constructor(step) {
        super(step);
    }
    makeStep(x, z, t, system) {
        let k = system.f(x, z, t).scaleSelf(this.step * 0.5).addSelf(x);
        let kz = system.g(k, t + 0.5 * this.step);
        let xNew = system.f(k, kz, t + 0.5 * this.step).scaleSelf(this.step).addSelf(x);
        let tNew = t + this.step;
        let zNew = system.g(xNew, tNew);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
exports.EDAE_EMidpoint = EDAE_EMidpoint;
/**
 * implicit midpoint method for explicit dae with index one
 */
class EDAE_IMidpoint extends edaeSolver_1.EDAESolver {
    constructor(step, stepSolver) {
        super(step);
        this.stepSolver = stepSolver;
    }
    /*
        x_{n+1} - x_n - h * f(0.5*(x_n+x_{n+1}),0.5*(z_n + g(x_{n+1],t_{n+1})),t_n + 0.5*j)=0
        dF_i/dx_{n+1}_j = \delta_ij - 0.5*h * df/dx - 0.5*h*df/dz * dg/dx(x_{n+1],t_{n+1})
     */
    makeStep(x, z, t, system) {
        let xNew = x.clone().addSelf(vector_1.vector.scale(system.f(x, z, t), this.step)); //better approximation for xNew
        let tNew = t + this.step;
        let xHalf = vector_1.vector.add(x, xNew).scaleSelf(0.5);
        let zHalf = system.g(xNew, tNew).addSelf(z).scaleSelf(0.5);
        let F = system.f(xHalf, zHalf, t + 0.5 * this.step).scale(-this.step).addSelf(xNew).subSelf(x);
        let f0norm = F.norm2();
        for (let i = 0; i < this.stepSolver.getIterations(); i++) {
            let J = matrix_1.matrix.identity(system.length_x());
            J.subSelf(system.dfdx(xHalf, zHalf, t + 0.5 * this.step).addSelf(matrix_1.matrix.mult(system.dfdz(xHalf, zHalf, t + 0.5 * this.step), system.dgdx(xNew, tNew))).scaleSelf(0.5 * this.step));
            let dx = gauss_1.gauss.solve(J, F.scale(-this.stepSolver.getAlpha()));
            xNew.addSelf(dx);
            xHalf = vector_1.vector.add(x, xNew).scaleSelf(0.5);
            zHalf = system.g(xNew, tNew).addSelf(z).scaleSelf(0.5);
            F = system.f(xHalf, zHalf, t + 0.5 * this.step).scale(-this.step).addSelf(xNew).subSelf(x);
            let fnorm = F.norm2();
            if (i >= this.stepSolver.getMinIterations() && fnorm <= this.stepSolver.getAbsTol() + this.stepSolver.getRelTol() * f0norm) {
                return new daeVector_1.DAEVector(xNew, system.g(xNew, tNew), tNew);
            }
        }
        throw new Error("Divergence");
    }
}
exports.EDAE_IMidpoint = EDAE_IMidpoint;


/***/ }),

/***/ "./src/dae/solvers/edae/rk.ts":
/*!************************************!*\
  !*** ./src/dae/solvers/edae/rk.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAE_LOBATTOIIIC4 = exports.EDAE_LOBATTOIIIC2 = exports.EDAE_LOBATTOIIIB4 = exports.EDAE_LOBATTOIIIB2 = exports.EDAE_LOBATTOIIIA4 = exports.EDAE_LOBATTOIIIA2 = exports.EDAE_GAUSSLEGENDRE6 = exports.EDAE_GAUSSLEGENDRE4 = exports.EDAE_RADAUIIA5 = exports.EDAE_RADAUIIA3 = exports.EDAE_RADAUIA5 = exports.EDAE_MidpointEuler = exports.EDAE_HeunEuler = exports.EDAE_BS23 = exports.EDAE_DOPRI5 = exports.EDAE_RK8 = exports.EDAE_RK6_2 = exports.EDAE_RK6 = exports.EDAE_RK4_RALSTON = exports.EDAE_RK4_2 = exports.EDAE_RK4 = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const edaeSolver_1 = __webpack_require__(/*! ../../edaeSolver */ "./src/dae/edaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../../../math/matrix */ "./src/math/matrix.ts");
const gauss_1 = __webpack_require__(/*! ../../../math/gauss */ "./src/math/gauss.ts");
/**
 * explicit rk methods for explicit dae of index 1
 */
class EDAE_ERK extends edaeSolver_1.EDAESolver {
    constructor(step, a, b, c) {
        super(step);
        this.a = a;
        this.b = b;
        this.c = c;
    }
    makeStep(x, z, t, system) {
        let k = [];
        for (let i = 0; i < this.c.length; i++) {
            let _x = x.clone();
            for (let j = 0; j < i; j++) {
                _x.add(vector_1.vector.scale(k[j], this.step * this.a[i - 1][j]));
            }
            let _t = t + this.c[i] * this.step;
            k.push(system.f(_x, system.g(_x, _t), _t));
        }
        let xNew = x.clone();
        for (let i = 0; i < this.b.length; i++) {
            xNew.add(k[i].scaleSelf(this.step * this.b[i]));
        }
        let tNew = t + this.step;
        return new daeVector_1.DAEVector(xNew, system.g(xNew, tNew), tNew);
    }
}
/**
 * explicit rk methods with adaptive step for explicit dae of index 1
 */
class EDAE_ERKA extends EDAE_ERK {
    constructor(step, maxStep, errorOrder, errorTolerance, a, b, c, _b) {
        super(step, a, b, c);
        this._b = _b;
        this.errorOrder = errorOrder;
        this.errorTolerance = errorTolerance;
        this.minStep = step;
        this.maxStep = maxStep;
    }
    makeStep(x, z, t, system) {
        while (true) {
            let k = [];
            for (let i = 0; i < this.c.length; i++) {
                let _x = x.clone();
                for (let j = 0; j < i; j++) {
                    _x.add(vector_1.vector.scale(k[j], this.step * this.a[i - 1][j]));
                }
                let _t = t + this.c[i] * this.step;
                k.push(system.f(_x, system.g(_x, _t), _t));
            }
            let difference = vector_1.vector.empty(x.length());
            for (let i = 0; i < this._b.length; i++) {
                difference.addSelf(vector_1.vector.scale(k[i], this._b[i] - this.b[i]));
            }
            let difNorm = difference.norm2();
            var stepOpt = Math.pow(this.errorTolerance * 0.5 / difNorm, 1 / this.errorOrder) * this.step;
            if (isNaN(stepOpt)) {
                stepOpt = this.minStep;
            }
            stepOpt = Math.min(Math.max(this.minStep, stepOpt), this.maxStep);
            if (stepOpt * 2 < this.step) {
                this.step = stepOpt;
                continue;
            }
            this.step = stepOpt;
            let xNew = x.clone();
            let tNew = t + this.step;
            for (let i = 0; i < this.b.length; i++) {
                xNew.add(vector_1.vector.scale(k[i], this.step * this.b[i]));
            }
            return new daeVector_1.DAEVector(xNew, system.g(xNew, tNew), tNew);
        }
    }
}
/**
 * implicit rk methods for explicit dae of index 1
 */
class EDAE_IRK extends edaeSolver_1.EDAESolver {
    constructor(step, stepSolver, a, b, c, stages) {
        super(step);
        this.a = a;
        this.b = b;
        this.c = c;
        this.stepSolver = stepSolver;
        this.stages = stages;
    }
    /*  USE LATEX, LUKE
        k_i = f(x_n + h * sum_{j=1}^{S} k_j * a_ij, g(x_n + h * sum_{j=1}^{S} k_j * a_ij, t_n + h * c_i), t_n + h * c_i)

        F_i = k_i - f(x_n + h * sum k_j * aij, g(x_n + h * sum_{j=1}^{S} k_j * a_ij, t_n + h * c_i), t_n + h * c_i) = 0

        dF_il/dk_jm = \delta_il_jm - df_l/dx_m * h * a_ij - df_l/dz dg_l/dx_m * h * a_ij

        memory layout:
                  j->
        |-------------------|
        | dF0/dk0 | dF0/dk1 |
    i   |---------|---------|
    |   | dF1/dk0 | dF1/dk1 |
    v   |-------------------|
     */
    function(k, x, z, t, system) {
        let F = vector_1.vector.empty(system.length_x() * this.stages);
        for (let i = 0; i < this.stages; i++) {
            let _t = t + this.c[i] * this.step;
            let _x = x.clone();
            for (let j = 0; j < this.stages; j++)
                _x.addSelf(vector_1.vector.scale(k[j], this.a[i][j] * this.step));
            let _z = system.g(_x, _t);
            F.addSubVector(k[i], i * system.length_x());
            F.subSubVector(system.f(_x, _z, _t), i * system.length_x());
        }
        return F;
    }
    jacobiMatrix(k, x, z, t, system) {
        let J = matrix_1.matrix.identity(this.stages * system.length_x());
        for (let i = 0; i < this.stages; i++) {
            let _t = t + this.c[i] * this.step;
            let _x = x.clone();
            for (let j = 0; j < this.stages; j++)
                _x.addSelf(vector_1.vector.scale(k[j], this.a[i][j] * this.step));
            let _z = system.g(_x, _t);
            let dfdx = system.dfdx(_x, _z, _t);
            let dfdz = system.dfdz(_x, _z, _t);
            let dgdx = system.dgdx(_x, _t);
            let value = matrix_1.matrix.mult(dfdz, dgdx).addSelf(dfdx);
            for (let j = 0; j < this.stages; j++) {
                J.subSubMatrix(value.scaleSelf(this.step * this.a[i][j]), i * system.length_x(), j * system.length_x());
            }
        }
        return J;
    }
    makeStep(x, z, t, system) {
        let k = [];
        for (let i = 0; i < this.stages; i++) {
            k.push(vector_1.vector.empty(system.length_x()));
        }
        let F = this.function(k, x, z, t, system);
        let f0norm = F.norm2();
        for (let it = 0; it < this.stepSolver.getIterations(); it++) {
            let J = this.jacobiMatrix(k, x, z, t, system);
            let dk = gauss_1.gauss.solve(J, F.scaleSelf(-this.stepSolver.getAlpha()));
            for (let i = 0; i < this.stages; i++) {
                k[i].addSelf(dk.getSubVector(i * system.length_x(), system.length_x()));
            }
            F = this.function(k, x, z, t, system);
            let fnorm = F.norm2();
            if (it >= this.stepSolver.getMinIterations() && fnorm < this.stepSolver.getAbsTol() + this.stepSolver.getRelTol() * f0norm) {
                let xNew = x.clone();
                for (let j = 0; j < this.stages; j++) {
                    xNew.addSelf(k[j].scaleSelf(this.step * this.b[j]));
                }
                let tNew = t + this.step;
                return new daeVector_1.DAEVector(xNew, system.g(xNew, tNew), tNew);
            }
        }
        throw new Error("Divergence");
    }
}
/**
 * implicit rk methods with adaptive step for explicit dae of index 1
 */
class EDAE_IRKA extends EDAE_IRK {
    constructor(step, maxStep, errorOrder, errorTolerance, stepSolver, a, b, c, _b, stages) {
        super(step, stepSolver, a, b, c, stages);
        this._b = _b;
        this.errorOrder = errorOrder;
        this.errorTolerance = errorTolerance;
        this.minStep = step;
        this.maxStep = maxStep;
    }
    function(k, x, z, t, system) {
        let F = vector_1.vector.empty(system.length_x() * this.stages);
        for (let i = 0; i < this.stages; i++) {
            let _t = t + this.c[i] * this.step;
            let _x = x.clone();
            for (let j = 0; j < this.stages; j++)
                _x.addSelf(vector_1.vector.scale(k[j], this.a[i][j] * this.step));
            let _z = system.g(_x, _t);
            F.addSubVector(k[i], i * system.length_x());
            F.subSubVector(system.f(_x, _z, _t), i * system.length_x());
        }
        return F;
    }
    jacobiMatrix(k, x, z, t, system) {
        let J = matrix_1.matrix.identity(this.stages * system.length_x());
        for (let i = 0; i < this.stages; i++) {
            let _t = t + this.c[i] * this.step;
            let _x = x.clone();
            for (let j = 0; j < this.stages; j++)
                _x.addSelf(vector_1.vector.scale(k[j], this.a[i][j] * this.step));
            let _z = system.g(_x, _t);
            let dfdx = system.dfdx(_x, _z, _t);
            let dfdz = system.dfdz(_x, _z, _t);
            let dgdx = system.dgdx(_x, _t);
            let value = matrix_1.matrix.mult(dfdz, dgdx).addSelf(dfdx);
            for (let j = 0; j < this.stages; j++) {
                J.subSubMatrix(value.scaleSelf(this.step * this.a[i][j]), i * system.length_x(), j * system.length_x());
            }
        }
        return J;
    }
    makeStep(x, z, t, system) {
        while (true) {
            let shouldThrow = true;
            let k = [];
            for (let i = 0; i < this.stages; i++) {
                k.push(vector_1.vector.empty(system.length_x()));
            }
            let F = this.function(k, x, z, t, system);
            let f0norm = F.norm2();
            for (let it = 0; it < this.stepSolver.getIterations(); it++) {
                let J = this.jacobiMatrix(k, x, z, t, system);
                let dk = gauss_1.gauss.solve(J, F.scaleSelf(-this.stepSolver.getAlpha()));
                for (let i = 0; i < this.stages; i++) {
                    k[i].addSelf(dk.getSubVector(i * system.length_x(), system.length_x()));
                }
                F = this.function(k, x, z, t, system);
                let fnorm = F.norm2();
                if (it >= this.stepSolver.getMinIterations() && fnorm < this.stepSolver.getAbsTol() + this.stepSolver.getRelTol() * f0norm) {
                    let difference = vector_1.vector.empty(x.length());
                    for (let i = 0; i < this._b.length; i++) {
                        difference.addSelf(vector_1.vector.scale(k[i], this._b[i] - this.b[i]));
                    }
                    let difNorm = difference.norm2();
                    var stepOpt = Math.pow(this.errorTolerance * 0.5 / difNorm, 1 / this.errorOrder) * this.step;
                    if (isNaN(stepOpt)) {
                        stepOpt = this.minStep;
                    }
                    stepOpt = Math.min(Math.max(this.minStep, stepOpt), this.maxStep);
                    if (stepOpt * 2 < this.step) {
                        this.step = stepOpt;
                        shouldThrow = false;
                        break;
                    }
                    this.step = stepOpt;
                    let xNew = x.clone();
                    let tNew = t + this.step;
                    for (let j = 0; j < this.stages; j++) {
                        xNew.addSelf(k[j].scaleSelf(this.step * this.b[j]));
                    }
                    return new daeVector_1.DAEVector(xNew, system.g(xNew, tNew), tNew);
                }
            }
            if (shouldThrow)
                throw new Error("Divergence");
        }
    }
}
/**
 * classic RK4
 */
class EDAE_RK4 extends EDAE_ERK {
    constructor(step) {
        super(step, [
            [0.5],
            [0, 0.5],
            [0, 0, 1]
        ], [1 / 6, 1 / 3, 1 / 3, 1 / 6], [0, 0.5, 0.5, 1]);
    }
}
exports.EDAE_RK4 = EDAE_RK4;
class EDAE_RK4_2 extends EDAE_ERK {
    constructor(step) {
        super(step, [
            [1 / 3],
            [-1 / 3, 1],
            [1, -1, 1]
        ], [1 / 8, 3 / 8, 3 / 8, 1 / 8], [0, 1 / 3, 2 / 3, 1]);
    }
}
exports.EDAE_RK4_2 = EDAE_RK4_2;
class EDAE_RK4_RALSTON extends EDAE_ERK {
    constructor(step) {
        super(step, [
            [0.4],
            [0.29697761, 0.15875964],
            [0.2181004, -3.05096516, 3.83286476]
        ], [0.17476028, -0.55148066, 1.20553560, 0.17118478], [0, 0.4, 0.45573725, 1]);
    }
}
exports.EDAE_RK4_RALSTON = EDAE_RK4_RALSTON;
class EDAE_RK6 extends EDAE_ERK {
    constructor(step) {
        super(step, [
            [2 / 5],
            [0, 4 / 5],
            [169 / 1458, 110 / 729, -65 / 1458],
            [-44 / 675, -88 / 135, 76 / 351, 336 / 325],
            [21 / 106, 0, -105 / 689, -324 / 689, 45 / 106],
            [-2517 / 4864, -55 / 38, 10615 / 31616, 567 / 7904, 7245 / 4864, 2597 / 2432]
        ], [0, 0, 1375 / 4992, 6561 / 20384, 3375 / 12544, 53 / 768, 19 / 294], [0, 2 / 5, 4 / 5, 2 / 9, 8 / 15, 0, 1]);
    }
}
exports.EDAE_RK6 = EDAE_RK6;
class EDAE_RK6_2 extends EDAE_ERK {
    constructor(step) {
        super(step, [
            [1 / 3],
            [0, 2 / 3],
            [1 / 12, 1 / 3, -1 / 12],
            [25 / 48, -55 / 24, 35 / 48, 15 / 8],
            [3 / 20, -11 / 24, -1 / 8, 1 / 2, 1 / 10],
            [-261 / 260, 33 / 13, 43 / 156, -118 / 39, 32 / 195, 80 / 39]
        ], [13 / 200, 0, 11 / 40, 11 / 40, 4 / 25, 4 / 25, 13 / 200], [0, 1 / 3, 2 / 3, 1 / 3, 5 / 6, 1 / 6, 1]);
    }
}
exports.EDAE_RK6_2 = EDAE_RK6_2;
class EDAE_RK8 extends EDAE_ERK {
    constructor(step) {
        var root21 = Math.sqrt(21);
        super(step, [
            [1 / 2],
            [1 / 4, 1 / 4],
            [1 / 7, (-7 - 3 * root21) / 98, 0, (21 + 5 * root21) / 49],
            [(11 + root21) / 84, 0, (18 + 4 * root21) / 63, (21 - root21) / 252],
            [(5 + root21) / 48, 0, (9 + root21) / 36, (-231 + 14 * root21) / 360, (63 - 7 * root21) / 80],
            [(10 - root21) / 42, 0, (-432 + 92 * root21) / 315, (633 - 145 * root21) / 90, (-503 + 115 * root21) / 70, (63 - 13 * root21) / 35],
            [1 / 14, 0, 0, 0, (14 - 3 * root21) / 126, (13 - 3 * root21) / 63, 1 / 9],
            [1 / 32, 0, 0, 0, (91 - 21 * root21) / 576, 11 / 72, (-385 - 75 * root21) / 1152, (63 + 13 * root21) / 128],
            [1 / 14, 0, 0, 0, 1 / 9, (-733 - 147 * root21) / 2205, (515 + 111 * root21) / 504, (-51 - 11 * root21) / 56, (132 + 28 * root21) / 245],
            [0, 0, 0, 0, (-42 + 7 * root21) / 18, (-18 + 28 * root21) / 45, (-273 - 53 * root21) / 72, (301 + 53 * root21) / 72, (28 - 28 * root21) / 45, (49 - 7 * root21) / 18]
        ], [1 / 20, 0, 0, 0, 0, 0, 0, 49 / 180, 16 / 45, 49 / 180, 1 / 20], [0, 1 / 2, 1 / 2, (7 + root21) / 14, (7 + root21) / 14, 1 / 2, (7 - root21) / 14,
            (7 - root21) / 14, 1 / 2, (7 + root21) / 14, 1]);
    }
}
exports.EDAE_RK8 = EDAE_RK8;
class EDAE_DOPRI5 extends EDAE_ERKA {
    constructor(step, maxStep, errorTolerance) {
        super(step, maxStep, 5, errorTolerance, [
            [1 / 5],
            [3 / 40, 9 / 40],
            [44 / 45, -56 / 15, 32 / 9],
            [19372 / 6561, -25360 / 2187, 64448 / 6561, -212 / 729],
            [9017 / 3168, -355 / 33, 46732 / 5247, 49 / 176, -5103 / 18656],
            [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84]
        ], [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84, 0], [0, 1 / 5, 3 / 10, 4 / 5, 8 / 9, 1, 1], [5179 / 57600, 0, 7571 / 16695, 393 / 640, -92097 / 339200, 187 / 2100, 1 / 40]);
    }
}
exports.EDAE_DOPRI5 = EDAE_DOPRI5;
/**
 * BogackiShampine23
 */
class EDAE_BS23 extends EDAE_ERKA {
    constructor(step, maxStep, errorTolerance) {
        super(step, maxStep, 3, errorTolerance, [
            [1 / 2],
            [0, 3 / 4],
            [2 / 9, 1 / 3, 4 / 9]
        ], [2 / 9, 1 / 3, 4 / 9, 0], [0, 0.5, 0.75, 1], [7 / 24, 1 / 4, 1 / 3, 1 / 8]);
    }
}
exports.EDAE_BS23 = EDAE_BS23;
/**
 *
 */
class EDAE_HeunEuler extends EDAE_ERKA {
    constructor(step, maxStep, errorTolerance) {
        super(step, maxStep, 2, errorTolerance, [
            [1]
        ], [1 / 2, 1 / 2], [0, 1], [1, 0]);
    }
}
exports.EDAE_HeunEuler = EDAE_HeunEuler;
class EDAE_MidpointEuler extends EDAE_ERKA {
    constructor(step, maxStep, errorTolerance) {
        super(step, maxStep, 2, errorTolerance, [
            [1 / 2]
        ], [0, 1], [0, 0.5], [1, 0]);
    }
}
exports.EDAE_MidpointEuler = EDAE_MidpointEuler;
class EDAE_RADAUIA5 extends EDAE_IRK {
    constructor(step, stepSolver) {
        let root6 = Math.sqrt(6);
        super(step, stepSolver, [
            [1 / 9, (-1 - root6) / 18, (-1 + root6) / 18],
            [1 / 9, (88 + 7 * root6) / 360, (88 - 43 * root6) / 360],
            [1 / 9, (88 + 43 * root6) / 360, (80 - 7 * root6) / 360]
        ], [1 / 9, (16 + root6) / 36, (16 - root6) / 36], [0, (6 - root6) / 10, (6 + root6) / 10], 3);
    }
}
exports.EDAE_RADAUIA5 = EDAE_RADAUIA5;
class EDAE_RADAUIIA3 extends EDAE_IRK {
    constructor(step, stepSolver) {
        let root6 = Math.sqrt(6);
        super(step, stepSolver, [
            [5 / 12, -1 / 12],
            [3 / 4, 1 / 4]
        ], [3 / 4, 1 / 4], [1 / 3, 1], 2);
    }
}
exports.EDAE_RADAUIIA3 = EDAE_RADAUIIA3;
class EDAE_RADAUIIA5 extends EDAE_IRK {
    constructor(step, stepSolver) {
        let root6 = Math.sqrt(6);
        super(step, stepSolver, [
            [11 / 45 - 7 * root6 / 360, 37 / 225 - 169 * root6 / 1800, -2 / 225 + root6 / 75],
            [37 / 225 + 169 * root6 / 1800, 11 / 45 + 7 * root6 / 360, -2 / 225 - root6 / 75],
            [4 / 9 - root6 / 36, 4 / 9 + root6 / 36, 1 / 9]
        ], [4 / 9 - root6 / 36, 4 / 9 + root6 / 36, 1 / 9], [2 / 5 - root6 / 10, 2 / 5 + root6 / 10, 1], 3);
    }
}
exports.EDAE_RADAUIIA5 = EDAE_RADAUIIA5;
/**
 * Embedded gauss-legendre 4th order
 */
class EDAE_GAUSSLEGENDRE4 extends EDAE_IRKA {
    constructor(step, maxStep, errorTolerance, stepSolver) {
        let sqrt3 = Math.sqrt(3);
        super(step, maxStep, 4, errorTolerance, stepSolver, [
            [1 / 4, 1 / 4 - sqrt3 / 6],
            [1 / 4 + sqrt3 / 6, 1 / 4]
        ], [0.5, 0.5], [(3 - sqrt3) / 6, (3 + sqrt3) / 6], [(1 + sqrt3) / 2, (1 - sqrt3) / 2], 2);
    }
}
exports.EDAE_GAUSSLEGENDRE4 = EDAE_GAUSSLEGENDRE4;
/**
 * Embedded gauss-legendre 6th order
 */
class EDAE_GAUSSLEGENDRE6 extends EDAE_IRKA {
    constructor(step, maxStep, errorTolerance, stepSolver) {
        let sqrt15 = Math.sqrt(15);
        super(step, maxStep, 6, errorTolerance, stepSolver, [
            [5 / 36, 2 / 9 - sqrt15 / 15, 5 / 36 - sqrt15 / 30],
            [5 / 36 + sqrt15 / 24, 2 / 9, 5 / 36, -sqrt15 / 24],
            [5 / 36 + sqrt15 / 30, 2 / 9 + sqrt15 / 15, 5 / 36]
        ], [5 / 18, 4 / 9, 5 / 18], [0.5 - sqrt15 / 10, 0.5, 0.5 + sqrt15 / 10], [-5 / 6, 8 / 3, -5 / 6], 3);
    }
}
exports.EDAE_GAUSSLEGENDRE6 = EDAE_GAUSSLEGENDRE6;
class EDAE_LOBATTOIIIA2 extends EDAE_IRKA {
    constructor(step, maxStep, errorTolerance, stepSolver) {
        super(step, maxStep, 2, errorTolerance, stepSolver, [
            [0, 0],
            [1 / 2, 1 / 2]
        ], [1 / 2, 1 / 2], [0, 1], [1, 0], 2);
    }
}
exports.EDAE_LOBATTOIIIA2 = EDAE_LOBATTOIIIA2;
class EDAE_LOBATTOIIIA4 extends EDAE_IRKA {
    constructor(step, maxStep, errorTolerance, stepSolver) {
        super(step, maxStep, 4, errorTolerance, stepSolver, [
            [0, 0, 0],
            [5 / 24, 1 / 3, -1 / 24],
            [1 / 6, 2 / 3, 1 / 36]
        ], [1 / 6, 2 / 3, 1 / 6], [0, 0.5, 1], [-1 / 2, 2, -1 / 2], 3);
    }
}
exports.EDAE_LOBATTOIIIA4 = EDAE_LOBATTOIIIA4;
class EDAE_LOBATTOIIIB2 extends EDAE_IRKA {
    constructor(step, maxStep, errorTolerance, stepSolver) {
        super(step, maxStep, 2, errorTolerance, stepSolver, [
            [1 / 2, 0],
            [1 / 2, 0]
        ], [1 / 2, 1 / 2], [1 / 2, 1 / 2], [1, 0], 2);
    }
}
exports.EDAE_LOBATTOIIIB2 = EDAE_LOBATTOIIIB2;
class EDAE_LOBATTOIIIB4 extends EDAE_IRKA {
    constructor(step, maxStep, errorTolerance, stepSolver) {
        super(step, maxStep, 4, errorTolerance, stepSolver, [
            [1 / 6, -1 / 6, 0],
            [1 / 6, 1 / 3, 0],
            [1 / 6, 5 / 6, 0]
        ], [1 / 6, 2 / 3, 1 / 6], [0, 0.5, 1], [-1 / 2, 2, -1 / 2], 3);
    }
}
exports.EDAE_LOBATTOIIIB4 = EDAE_LOBATTOIIIB4;
class EDAE_LOBATTOIIIC2 extends EDAE_IRKA {
    constructor(step, maxStep, errorTolerance, stepSolver) {
        super(step, maxStep, 2, errorTolerance, stepSolver, [
            [1 / 2, -1 / 2],
            [1 / 2, 1 / 2]
        ], [1 / 2, 1 / 2], [0, 1], [1, 0], 2);
    }
}
exports.EDAE_LOBATTOIIIC2 = EDAE_LOBATTOIIIC2;
class EDAE_LOBATTOIIIC4 extends EDAE_IRKA {
    constructor(step, maxStep, errorTolerance, stepSolver) {
        super(step, maxStep, 4, errorTolerance, stepSolver, [
            [1 / 6, -1 / 3, 1 / 6],
            [1 / 6, 5 / 12, -1 / 12],
            [1 / 6, 2 / 3, 1 / 6]
        ], [1 / 6, 2 / 3, 1 / 6], [0, 0.5, 1], [-1 / 2, 2, -1 / 2], 3);
    }
}
exports.EDAE_LOBATTOIIIC4 = EDAE_LOBATTOIIIC4;


/***/ }),

/***/ "./src/dae/solvers/edae/trapezoidal.ts":
/*!*********************************************!*\
  !*** ./src/dae/solvers/edae/trapezoidal.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.EDAE_ITrapezoidal = exports.EDAE_ETrapezoidal = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const edaeSolver_1 = __webpack_require__(/*! ../../edaeSolver */ "./src/dae/edaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../../../math/matrix */ "./src/math/matrix.ts");
const gauss_1 = __webpack_require__(/*! ../../../math/gauss */ "./src/math/gauss.ts");
/*
explicit
    x_{n+1} = x_n + 0.5*h(f(x_n,t_n)+f(x_n+hf(x_n,t_n),t_{n+1}))
    {
        1.  k_1 = f(x_n,z_n,t_n)
        explicit Nx
        2.  k_2 = f(x_n + h*k_1,g(x_n + h*k_1,t_{n+1}),t_{n+1})
        explicit Nx
        3.  x_{n+1} = x_n + 0.5*h(k_1 + k_2)
        explicit Nx
        4.  z_{n+1} = g(x_{n+1},t_{n+1})
        explicit Nz
    }
implicit
    x_{n+1} = x_n + 0.5*h(f(x_n,t_n)+f(x_{n+1},t_{n+1}))
    {
        1.  k_1 = f(x_n,z_n,t_n)
        explicit Nx
        2.  x_{n+1} - x_n - 0.5*h(k_1+f(x_{n+1},g(x_{n+1},t_{n+1}),t_{n+1})) = 0
        implicit Nx
        3.  z_{n+1} = g(x_{n+1},t_{n+1})
        explicit Nz
    }
*/
/**
 * explicit trapezoidal method for explicit dae with index one
 */
class EDAE_ETrapezoidal extends edaeSolver_1.EDAESolver {
    constructor(step) {
        super(step);
    }
    makeStep(x, z, t, system) {
        let tNew = t + this.step;
        let k_1 = system.f(x, z, t).scaleSelf(this.step);
        let _x = vector_1.vector.add(x, k_1);
        let k_2 = system.f(_x, system.g(_x, tNew), tNew).scaleSelf(this.step);
        let xNew = k_1.addSelf(k_2).scaleSelf(0.5).addSelf(x);
        let zNew = system.g(xNew, tNew);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
exports.EDAE_ETrapezoidal = EDAE_ETrapezoidal;
/**
 * implicit trapezoidal method for explicit dae with index one
 */
class EDAE_ITrapezoidal extends edaeSolver_1.EDAESolver {
    constructor(step, stepSolver) {
        super(step);
        this.stepSolver = stepSolver;
    }
    /*
        x_{n+1} - x_n - 0.5* h * (k_1+f(x_{n+1},g(x_{n+1},t_{n+1}),t_{n+1})) = 0
        dF_i/dx_{n+1}_j = \delta_ij - 0.5*h * df/dx - 0.5*h*df/dz * dg/dx(x_{n+1],t_{n+1})
     */
    makeStep(x, z, t, system) {
        let k_1 = system.f(x, z, t);
        let xNew = x.clone().addSelf(vector_1.vector.scale(k_1, this.step)); //better approximation for xNew
        let tNew = t + this.step;
        let zNew = system.g(xNew, tNew);
        let F = system.f(xNew, zNew, tNew).addSelf(k_1).scaleSelf(-0.5 * this.step).addSelf(xNew).subSelf(x);
        let f0norm = F.norm2();
        for (let i = 0; i < this.stepSolver.getIterations(); i++) {
            let J = matrix_1.matrix.identity(system.length_x());
            J.subSelf(system.dfdx(xNew, zNew, tNew).addSelf(matrix_1.matrix.mult(system.dfdz(xNew, zNew, tNew), system.dgdx(xNew, tNew))).scaleSelf(0.5 * this.step));
            let dx = gauss_1.gauss.solve(J, F.scaleSelf(-this.stepSolver.getAlpha()));
            xNew.addSelf(dx);
            zNew = system.g(xNew, tNew);
            F = system.f(xNew, zNew, tNew).addSelf(k_1).scaleSelf(-0.5 * this.step).addSelf(xNew).subSelf(x);
            let fnorm = F.norm2();
            if (i >= this.stepSolver.getMinIterations() && fnorm < this.stepSolver.getAbsTol() + this.stepSolver.getRelTol() * f0norm) {
                return new daeVector_1.DAEVector(xNew, zNew, tNew);
            }
        }
        throw new Error("Divergence");
    }
}
exports.EDAE_ITrapezoidal = EDAE_ITrapezoidal;


/***/ }),

/***/ "./src/dae/solvers/idae/adams-bashforth.ts":
/*!*************************************************!*\
  !*** ./src/dae/solvers/idae/adams-bashforth.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAE_AB6 = exports.IDAE_AB5 = exports.IDAE_AB4 = exports.IDAE_AB3 = exports.IDAE_AB2 = void 0;
const idaeSolver_1 = __webpack_require__(/*! ../../idaeSolver */ "./src/dae/idaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const rk_1 = __webpack_require__(/*! ../idae/rk */ "./src/dae/solvers/idae/rk.ts");
class IDAE_ADAMS_BASHFORTH extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver, b, solver, stages) {
        super(step, systemSolver);
        this.b = b;
        this.solver = solver;
        this.stages = stages;
        this.prevValues = [];
    }
    setStep(value) {
        super.setStep(value);
        this.prevValues = [];
    }
    makeStep(x, z, t, system) {
        this.prevValues.splice(0, 0, this.solve_dx(x, z, t, system));
        if (this.prevValues.length != this.stages) {
            let result = this.solver.makeStep(x, z, t, system);
            return result;
        }
        let tNew = t + this.step;
        let xNew = x.clone();
        for (let i = 0; i < this.stages; i++) {
            xNew.addSelf(vector_1.vector.scale(this.prevValues[i], this.step * this.b[i]));
        }
        let zNew = this.solve_z(xNew, z, tNew, system);
        this.prevValues.splice(this.prevValues.length - 1, 1);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
class IDAE_AB2 extends IDAE_ADAMS_BASHFORTH {
    constructor(step, systemSolver) {
        super(step, systemSolver, [3 / 2, -1 / 2], new rk_1.IDAE_RK4(step, systemSolver), 2);
    }
}
exports.IDAE_AB2 = IDAE_AB2;
class IDAE_AB3 extends IDAE_ADAMS_BASHFORTH {
    constructor(step, systemSolver) {
        super(step, systemSolver, [23 / 12, -4 / 3, 5 / 12], new rk_1.IDAE_RK4(step, systemSolver), 3);
    }
}
exports.IDAE_AB3 = IDAE_AB3;
class IDAE_AB4 extends IDAE_ADAMS_BASHFORTH {
    constructor(step, systemSolver) {
        super(step, systemSolver, [55 / 24, -59 / 24, 37 / 24, -3 / 8], new rk_1.IDAE_RK4(step, systemSolver), 4);
    }
}
exports.IDAE_AB4 = IDAE_AB4;
class IDAE_AB5 extends IDAE_ADAMS_BASHFORTH {
    constructor(step, systemSolver) {
        super(step, systemSolver, [1901 / 720, -1387 / 360, 109 / 30, -637 / 360, 251 / 720], new rk_1.IDAE_RK6(step, systemSolver), 5);
    }
}
exports.IDAE_AB5 = IDAE_AB5;
class IDAE_AB6 extends IDAE_ADAMS_BASHFORTH {
    constructor(step, systemSolver) {
        super(step, systemSolver, [4277 / 1440, -2641 / 480, 4991 / 720, -3649 / 720, 959 / 480, -95 / 288], new rk_1.IDAE_RK6(step, systemSolver), 6);
    }
}
exports.IDAE_AB6 = IDAE_AB6;


/***/ }),

/***/ "./src/dae/solvers/idae/algebraicSolver.ts":
/*!*************************************************!*\
  !*** ./src/dae/solvers/idae/algebraicSolver.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAE_AlgebraicSolver = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const idaeSolver_1 = __webpack_require__(/*! ../../idaeSolver */ "./src/dae/idaeSolver.ts");
/**
 * solver for purely algebraic system g(z,t) = 0
 */
class IDAE_AlgebraicSolver extends idaeSolver_1.IDAESolver {
    makeStep(x, z, t, system) {
        let xNew = x;
        let tNew = t + this.step;
        let zNew = this.solve_z(x, z, tNew, system);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
exports.IDAE_AlgebraicSolver = IDAE_AlgebraicSolver;


/***/ }),

/***/ "./src/dae/solvers/idae/euler.ts":
/*!***************************************!*\
  !*** ./src/dae/solvers/idae/euler.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAE_IEuler = exports.IDAE_EEuler = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const idaeSolver_1 = __webpack_require__(/*! ../../idaeSolver */ "./src/dae/idaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../../../math/matrix */ "./src/math/matrix.ts");
const gauss_1 = __webpack_require__(/*! ../../../math/gauss */ "./src/math/gauss.ts");
class IDAE_EEuler extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver) {
        super(step, systemSolver);
    }
    solve_x(x, z, t, system) {
        return this.systemSolver.solve((xNew) => {
            let derx = vector_1.vector.sub(xNew, x).scale(1 / this.step);
            return system.f(x, derx, z, t).scaleSelf(this.step);
        }, (xNew) => {
            let derx = vector_1.vector.sub(xNew, x).scale(1 / this.step);
            return system.dfddx(x, derx, z, t);
        }, x.length(), x);
        /*//solve for x_{n+1}
        let xNew = x.clone();
        let F:vector;
        let derx = vector.empty(x.length());
        F = system.f(x,derx,z,t).scaleSelf(-this.step * this.alpha);
        let f0norm = F.norm2();
        for(let i=0;i<this.newtonIterations;i++){
            let J:matrix;
            J = system.dfddx(x,derx,z,t);
            let dx = gauss.solve(J,F);
            xNew.addSelf(dx);

            derx = vector.sub(xNew,x).scale(1/this.step);
            F = system.f(x,derx,z,t).scaleSelf(-this.step * this.alpha);
            let fnorm = F.norm2()/this.step;
            if(fnorm<this.fAbsTol+this.fRelTol*f0norm){
                return xNew;
            }
        }
        throw new Error("divergence at solve_x");*/
    }
    /*private solve_z(x:vector,z:vector,t:number,system:IDAESystem){
        //solve g(x_{n+1}, z_{n+1}, t_{n+1}) = 0 for z_{n+1}
        let zNew = z.clone();
        for(let i=0;i<this.newtonIterations;i++){
            let J:matrix;
            J = system.dgdz(x, zNew, t);
            let F:vector;
            F = system.g(x,zNew,t).scaleSelf(this.alpha);
            let dz = gauss.solve(J, F);
            zNew.addSelf(dz);
            if(F.norm2()<this.fAbsTol){
                return zNew;
            }
        }
        throw "divergence at solve_z";
    }*/
    makeStep(x, z, t, system) {
        let xNew = this.solve_x(x, z, t, system);
        let tNew = t + this.step;
        let zNew = this.solve_z(xNew, z, tNew, system);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
exports.IDAE_EEuler = IDAE_EEuler;
/*
df/dx_{n+1} = df/dx + df/ddx * 1/h
df/dz_{n+1} = df/dz
dg/dx_{n+1} = dg/dx
dg/dz_{n+1} = dg/dz
F = {
    f(x_{n+1},(x_{n+1}-x_{n})/h, z_{n+1},t_{n+1}) = 0
    g(x_{n+1}, z_{n+1}, t_{n+1}) = 0
}
OR
df/dx_{n+1} = df/dx * h + df/ddx
df/dz_{n+1} = df/dz * h
dg/dx_{n+1} = dg/dx * h
dg/dz_{n+1} = dg/dz * h
F = {
    f(x_{n+1},(x_{n+1}-x_{n})/h, z_{n+1}, t_{n+1}) * h = 0
    g(x_{n+1},z_{n+1}, t_{n+1}) * h = 0
}
*/
class IDAE_IEuler extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver) {
        super(step, systemSolver);
    }
    makeStep(x, z, t, system) {
        /*let xz0 = vector.concat([x,z]);
        let tNew = t + this.step;
        let xzNew = this.stepSolver.solve((xzNew:vector)=>{
            let xNew = xzNew.getSubVector(0,system.length_x());
            let zNew = xzNew.getSubVector(system.length_x(),system.length_z());
            let derx = vector.sub(xNew,x).scale(1/this.step);
            let F:vector = vector.empty(system.length_x()+system.length_z());
            F.addSubVector(system.f(xNew,derx,zNew,tNew),0);
            F.addSubVector(system.g(xNew,zNew,tNew),system.length_x());
            return F;
        }, (xzNew:vector)=>{
            let xNew = xzNew.getSubVector(0,system.length_x());
            let zNew = xzNew.getSubVector(system.length_x(),system.length_z());
            let J:matrix;
            J = matrix.emptySquare(x.length()+z.length());
            //scale both part of (J dx = -F) by step
            J.addSubMatrix(system.dfdx(xNew,derx,zNew,tNew).addSelf(system.dfddx(xNew,derx,zNew,tNew).scaleSelf(1/this.step)),0,0);
            J.addSubMatrix(system.dfdz(xNew,derx,zNew,tNew),0,x.length());
            J.addSubMatrix(system.dgdx(xNew,zNew,tNew),x.length(),0);
            J.addSubMatrix(system.dgdz(xNew,zNew,tNew),x.length(),x.length());
            return J;
        }, system.length_x()+system.length_z(), xz0);
        return new DAEVector(xzNew.getSubVector(0,system.length_x()),xzNew.getSubVector(system.length_x(),system.length_z()),tNew);*/
        let xNew = x.clone();
        let zNew = z.clone();
        let tNew = t + this.step;
        let derx = vector_1.vector.empty(x.length());
        let F;
        F = vector_1.vector.empty(x.length() + z.length());
        F.addSubVector(system.f(xNew, derx, zNew, tNew), 0);
        F.addSubVector(system.g(xNew, zNew, tNew), x.length());
        let f0norm = F.norm2();
        ;
        for (let i = 0; i < this.systemSolver.getIterations(); i++) {
            let J;
            J = matrix_1.matrix.emptySquare(x.length() + z.length());
            //scale both part of (J dx = -F) by step
            J.addSubMatrix(system.dfdx(xNew, derx, zNew, tNew).addSelf(system.dfddx(xNew, derx, zNew, tNew).scaleSelf(1 / this.step)), 0, 0);
            J.addSubMatrix(system.dfdz(xNew, derx, zNew, tNew), 0, x.length());
            J.addSubMatrix(system.dgdx(xNew, zNew, tNew), x.length(), 0);
            J.addSubMatrix(system.dgdz(xNew, zNew, tNew), x.length(), x.length());
            let dxz = gauss_1.gauss.solve(J, F.scaleSelf(-this.systemSolver.getAlpha()));
            xNew.addSelf(dxz.getSubVector(0, x.length()));
            zNew.addSelf(dxz.getSubVector(x.length(), z.length()));
            derx = vector_1.vector.sub(xNew, x).scale(1 / this.step);
            F = vector_1.vector.empty(x.length() + z.length());
            F.addSubVector(system.f(xNew, derx, zNew, tNew), 0);
            F.addSubVector(system.g(xNew, zNew, tNew), x.length());
            let fnorm = F.norm2();
            if (i >= this.systemSolver.getMinIterations() && fnorm < this.systemSolver.getAbsTol() + this.systemSolver.getRelTol() * f0norm) {
                return new daeVector_1.DAEVector(xNew, zNew, tNew);
            }
        }
        throw new Error("Divergence");
    }
}
exports.IDAE_IEuler = IDAE_IEuler;


/***/ }),

/***/ "./src/dae/solvers/idae/midpoint.ts":
/*!******************************************!*\
  !*** ./src/dae/solvers/idae/midpoint.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAE_IMidpoint = exports.IDAE_EMidpoint = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const idaeSolver_1 = __webpack_require__(/*! ../../idaeSolver */ "./src/dae/idaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../../../math/matrix */ "./src/math/matrix.ts");
const gauss_1 = __webpack_require__(/*! ../../../math/gauss */ "./src/math/gauss.ts");
/*
explicit
    x_{n+1} = x_n + h f(x_n+0.5h*f(x_n, t_n), t_n + 0.5*h)
    {
        1.  f(x_n, k_1, z_n, t_n) = 0
        implicit Nx
        2.  g(x_n + 0.5 * h * k_1, z^1_n, t_n+0.5*h) = 0
        implicit Nz
        3.  f(x_n + 0.5 * h * k_1, k_2, z^1_n, t_n+0.5*h) = 0
        implicit Nx
        4.  x_{n+1} = x_n + h*k_2
        explicit Nx
        5.  g(x_{n+1}, z_{n+1}, t_{n+1}) = 0
        implicit Nz
    }
implicit
    x_{n+1}=x_n + h f(0.5*(x_n+x_{n+1}),t_n+0.5*h)
    {
        1.  f(0.5*(x_{n}+x_{n+1}), (x_{n+1} - x_n)/h, 0.5*(z_{n}+z_{n+1}), t_n + 0.5*h) = 0
            g(x_{n+1}, z_{n+1}, t_{n+1}) = 0
        implicit Nx + Nz
    }
*/
/**
 * explicit midpoint method for implicit dae with index one
 */
class IDAE_EMidpoint extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver) {
        super(step, systemSolver);
    }
    makeStep(x, z, t, system) {
        let x1 = this.solve_dx(x, z, t, system).scaleSelf(0.5 * this.step).addSelf(x);
        let z1 = this.solve_z(x1, z, t + 0.5 * this.step, system);
        let tNew = t + this.step;
        let xNew = this.solve_dx(x1, z1, t + 0.5 * this.step, system).scaleSelf(this.step).addSelf(x);
        let zNew = this.solve_z(xNew, z1, tNew, system);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
        /*x_{n+1} = x_n + h f(x_n+0.5h*f(x_n, t_n), t_n + 0.5*h)
        {
            1.  f(x_n, k_1, z_n, t_n) = 0
            implicit Nx
            2.  g(x_n + 0.5 * h * k_1, z^1_n, t_n+0.5*h) = 0
            implicit Nz
            3.  f(x_n + 0.5 * h * k_1, k_2, z^1_n, t_n+0.5*h) = 0
            implicit Nx
            4.  x_{n+1} = x_n + h*k_2
            explicit Nx
            5.  g(x_{n+1}, z_{n+1}, t_{n+1}) = 0
            implicit Nz
        }*/
    }
}
exports.IDAE_EMidpoint = IDAE_EMidpoint;
/**
 * implicit midpoint method for implicit dae with index one
 */
/*
Fx = f(0.5*(x_{n}+x_{n+1}), (x_{n+1} - x_n)/h, 0.5*(z_{n}+z_{n+1}), t_n + 0.5*h) = 0
Fz = g(x_{n+1}, z_{n+1}, t_{n+1}) = 0
dFx/dx_{n+1} = 0.5*df/dx + df/ddx *1/h
dFx/dz_{n+1} = 0.5*df/dz
dFz/dx_{n+1} = dg/dx
dFz/dz_{n+1} = dg/dz
*/
class IDAE_IMidpoint extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver) {
        super(step, systemSolver);
    }
    makeStep(x, z, t, system) {
        /*let xz0 = vector.concat([x,z]);
        let tHalf = t + this.step*0.5;
        let tNew = t + this.step;
        let xzNew = this.stepSolver.solve((xzNew:vector)=>{
            let xNew = xzNew.getSubVector(0,system.length_x());
            let zNew = xzNew.getSubVector(system.length_x(),system.length_z());
            let dx = vector.sub(xNew,x).scale(1/this.step);
            let xHalf = vector.add(x,xNew).scaleSelf(0.5);
            let zHalf = vector.add(z,zNew).scaleSelf(0.5);

            let F = vector.empty(x.length()+z.length());
            F.addSubVector(system.f(xHalf,dx,zHalf,tHalf),0);
            F.addSubVector(system.g(xNew,zNew,tNew),x.length());
            return F;
        },(xzNew:vector)=>{
            let xNew = xzNew.getSubVector(0,system.length_x());
            let zNew = xzNew.getSubVector(system.length_x(),system.length_z());
            let dx = vector.sub(xNew,x).scale(1/this.step);
            let xHalf = vector.add(x,xNew).scaleSelf(0.5);
            let zHalf = vector.add(z,zNew).scaleSelf(0.5);

            let J:matrix = matrix.emptySquare(x.length()+z.length());
            J.addSubMatrix(system.dfdx(xHalf,dx,zHalf,tHalf).scaleSelf(0.5).addSelf(system.dfddx(xHalf,dx,zHalf,tHalf).scaleSelf(1/this.step)),0,0);
            J.addSubMatrix(system.dfdz(xHalf,dx,zHalf,tHalf).scaleSelf(0.5),0,x.length());
            J.addSubMatrix(system.dgdx(xNew,zNew,tNew),x.length(),0);
            J.addSubMatrix(system.dgdz(xNew,zNew,tNew),x.length(),x.length());
            return J;
        },system.length_x()+system.length_z(),xz0);

        return new DAEVector(xzNew.getSubVector(0,system.length_x()),xzNew.getSubVector(system.length_x(),system.length_z()),tNew);*/
        let tNew = t + this.step;
        let xNew = x.clone();
        let zNew = z.clone();
        let tHalf = t + 0.5 * this.step;
        let F = vector_1.vector.empty(x.length() + z.length());
        let dx = vector_1.vector.empty(x.length());
        let xHalf = vector_1.vector.add(x, xNew).scaleSelf(0.5);
        let zHalf = vector_1.vector.add(z, zNew).scaleSelf(0.5);
        F.addSubVector(system.f(xHalf, dx, zHalf, tHalf), 0);
        F.addSubVector(system.g(xNew, zNew, tNew), x.length());
        let f0norm = F.norm2();
        for (let i = 0; i < this.systemSolver.getIterations(); i++) {
            let J = matrix_1.matrix.emptySquare(x.length() + z.length());
            J.addSubMatrix(system.dfdx(xHalf, dx, zHalf, tHalf).scaleSelf(0.5).addSelf(system.dfddx(xHalf, dx, zHalf, tHalf).scaleSelf(1 / this.step)), 0, 0);
            J.addSubMatrix(system.dfdz(xHalf, dx, zHalf, tHalf).scaleSelf(0.5), 0, x.length());
            J.addSubMatrix(system.dgdx(xNew, zNew, tNew), x.length(), 0);
            J.addSubMatrix(system.dgdz(xNew, zNew, tNew), x.length(), x.length());
            let dxz = gauss_1.gauss.solve(J, F.scaleSelf(-this.systemSolver.getAlpha()));
            xNew.addSelf(dxz.getSubVector(0, x.length()));
            zNew.addSelf(dxz.getSubVector(x.length(), z.length()));
            dx = vector_1.vector.sub(xNew, x).scale(1 / this.step);
            xHalf = vector_1.vector.add(x, xNew).scaleSelf(0.5);
            zHalf = vector_1.vector.add(z, zNew).scaleSelf(0.5);
            F = vector_1.vector.empty(x.length() + z.length());
            F.addSubVector(system.f(xHalf, dx, zHalf, tHalf), 0);
            F.addSubVector(system.g(xNew, zNew, tNew), x.length());
            let fnorm = F.norm2();
            if (i >= this.systemSolver.getMinIterations() && fnorm < this.systemSolver.getAbsTol() + this.systemSolver.getRelTol() * f0norm) {
                return new daeVector_1.DAEVector(xNew, zNew, tNew);
            }
        }
        throw new Error("Divergence");
    }
}
exports.IDAE_IMidpoint = IDAE_IMidpoint;


/***/ }),

/***/ "./src/dae/solvers/idae/rk.ts":
/*!************************************!*\
  !*** ./src/dae/solvers/idae/rk.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAE_LOBATTOIIIC4 = exports.IDAE_LOBATTOIIIC2 = exports.IDAE_LOBATTOIIIB4 = exports.IDAE_LOBATTOIIIB2 = exports.IDAE_LOBATTOIIIA4 = exports.IDAE_LOBATTOIIIA2 = exports.IDAE_GAUSSLEGENDRE6 = exports.IDAE_GAUSSLEGENDRE4 = exports.IDAE_RADAUIIA5 = exports.IDAE_RADAUIIA3 = exports.IDAE_RADAUIA5 = exports.IDAE_MidpointEuler = exports.IDAE_HeunEuler = exports.IDAE_BS23 = exports.IDAE_DOPRI5 = exports.IDAE_RK8 = exports.IDAE_RK6_2 = exports.IDAE_RK6 = exports.IDAE_RK4_RALSTON = exports.IDAE_RK4_2 = exports.IDAE_RK4 = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const idaeSolver_1 = __webpack_require__(/*! ../../idaeSolver */ "./src/dae/idaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../../../math/matrix */ "./src/math/matrix.ts");
const gauss_1 = __webpack_require__(/*! ../../../math/gauss */ "./src/math/gauss.ts");
/**
 * explicit rk methods for implicit dae of index 1
 */
class IDAE_ERK extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver, a, b, c) {
        super(step, systemSolver);
        this.a = a;
        this.b = b;
        this.c = c;
    }
    makeStep(x, z, t, system) {
        let k = [];
        let _z = z;
        for (let i = 0; i < this.c.length; i++) {
            let _x = x.clone();
            for (let j = 0; j < i; j++) {
                _x.add(vector_1.vector.scale(k[j], this.step * this.a[i - 1][j]));
            }
            let _t = t + this.c[i] * this.step;
            _z = this.solve_z(_x, _z, _t, system);
            k.push(this.solve_dx(_x, _z, _t, system));
        }
        let xNew = x.clone();
        for (let i = 0; i < this.b.length; i++) {
            xNew.add(k[i].scaleSelf(this.step * this.b[i]));
        }
        let tNew = t + this.step;
        let zNew = this.solve_z(xNew, _z, tNew, system);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
/**
 * explicit rk methods with adaptive step for implicit dae of index 1
 */
class IDAE_ERKA extends IDAE_ERK {
    constructor(step, maxStep, errorOrder, errorTolerance, systemSolver, a, b, c, _b) {
        super(step, systemSolver, a, b, c);
        this._b = _b;
        this.errorOrder = errorOrder;
        this.errorTolerance = errorTolerance;
        this.minStep = step;
        this.maxStep = maxStep;
    }
    makeStep(x, z, t, system) {
        while (true) {
            let k = [];
            let _z = z;
            for (let i = 0; i < this.c.length; i++) {
                let _x = x.clone();
                for (let j = 0; j < i; j++) {
                    _x.add(vector_1.vector.scale(k[j], this.step * this.a[i - 1][j]));
                }
                let _t = t + this.c[i] * this.step;
                _z = this.solve_z(_x, _z, _t, system);
                k.push(this.solve_dx(_x, _z, _t, system));
            }
            let difference = vector_1.vector.empty(x.length());
            for (let i = 0; i < this._b.length; i++) {
                difference.addSelf(vector_1.vector.scale(k[i], this._b[i] - this.b[i]));
            }
            let difNorm = difference.norm2();
            var stepOpt = Math.pow(this.errorTolerance * 0.5 / difNorm, 1 / this.errorOrder) * this.step;
            if (isNaN(stepOpt)) {
                stepOpt = this.minStep;
            }
            stepOpt = Math.min(Math.max(this.minStep, stepOpt), this.maxStep);
            if (stepOpt * 2 < this.step) {
                this.step = stepOpt;
                continue;
            }
            this.step = stepOpt;
            let xNew = x.clone();
            let tNew = t + this.step;
            for (let i = 0; i < this.b.length; i++) {
                xNew.add(vector_1.vector.scale(k[i], this.step * this.b[i]));
            }
            let zNew = this.solve_z(xNew, _z, tNew, system);
            return new daeVector_1.DAEVector(xNew, zNew, tNew);
        }
    }
}
/**
 * implicit rk methods for explicit dae of index 1
 */
class IDAE_IRK extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver, a, b, c, stages) {
        super(step, systemSolver);
        this.a = a;
        this.b = b;
        this.c = c;
        this.stages = stages;
    }
    /*  I KNEW UR FATHER, LUKE, I CUTTED HIS LEGS AND LEFT HIM IN LAVA, HE WAS A GOOD FRIEND
        {
            F_{xi}: f(x_n + h * sum_{j=1}^{S} k_j * a_ij, k_i, k_{zi}, t_n + h * c_i) = 0
            F_{gi}: g(x_n + h * sum_{j=1}^{S} k_j * a_ij, k_{zi}, t_n + h * c_i) = 0
        }
        S * (N_x + N_z)
        dF_{xil}/dk_jm = \delta_ij * df/ddx + df/dx * h * a_ij;
        dF_{xil}/dk_zj = \delta_ij * df/dz;
        dF_{gi}/dk_jm = dg/dx * h * a_ij;
        dF_{gi}/dk_zj = \delta_ij * dg/dz;

        memory layout:
                  j->
        |-----------------------------------------------------|
        | dFx0/dk0 | dFx0/dkz0     | dFx0/dk1 | dFx0/dkz1 = 0 |
    i   |----------|---------------|----------|---------------|
    |   | dFg0/dk0 | dFg0/dkz0     | dFg0/dk1 | dFg0/dkz1 = 0 |
    v   |----------|---------------|----------|---------------|
        | dFx1/dk0 | dFx1/dkz0 = 0 | dFx1/dk1 | dFx1/dkz1     |
        |----------|---------------|----------|---------------|
        | dFg1/dk0 | dFg1/dkz0 = 0 | dFg1/dk1 | dFg1/dkz1     |
        |-----------------------------------------------------|
     */
    function(kx, kz, x, z, t, system) {
        let length = system.length_x() + system.length_z();
        let F = vector_1.vector.empty(this.stages * length);
        for (let i = 0; i < this.stages; i++) {
            let _t = t + this.c[i] * this.step;
            let _x = x.clone();
            for (let j = 0; j < this.stages; j++)
                _x.addSelf(vector_1.vector.scale(kx[j], this.a[i][j] * this.step));
            F.addSubVector(system.f(_x, kx[i], kz[i], _t), i * length);
            F.subSubVector(system.g(_x, kz[i], _t), i * length + system.length_x());
        }
        return F;
    }
    jacobiMatrix(kx, kz, x, z, t, system) {
        let length = system.length_x() + system.length_z();
        let J = matrix_1.matrix.emptySquare(this.stages * length);
        for (let i = 0; i < this.stages; i++) {
            let _t = t + this.c[i] * this.step;
            let _x = x.clone();
            for (let j = 0; j < this.stages; j++)
                _x.addSelf(vector_1.vector.scale(kx[j], this.a[i][j] * this.step));
            let dfdx = system.dfdx(_x, kx[i], kz[i], _t);
            let dfddx = system.dfddx(_x, kx[i], kz[i], _t);
            let dfdz = system.dfdz(_x, kx[i], kz[i], _t);
            let dgdx = system.dgdx(_x, kz[i], _t);
            let dgdz = system.dgdz(_x, kz[i], _t);
            J.addSubMatrix(dfddx, i * length, i * length);
            J.addSubMatrix(dfdz, i * length, i * length + system.length_x());
            J.addSubMatrix(dgdz, i * length + system.length_x(), i * length + system.length_x());
            for (let j = 0; j < this.stages; j++) {
                J.subSubMatrix(dfdx.scaleSelf(this.step * this.a[i][j]), i * length, j * length);
                J.subSubMatrix(dgdx.scaleSelf(this.step * this.a[i][j]), i * length + system.length_x(), j * length);
            }
        }
        return J;
    }
    makeStep(x, z, t, system) {
        let length = system.length_x() + system.length_z();
        let kx = [];
        let kz = [];
        for (let i = 0; i < this.stages; i++) {
            kx.push(vector_1.vector.empty(system.length_x()));
            kz.push(z.clone());
        }
        let F = this.function(kx, kz, x, z, t, system);
        let f0norm = F.norm2();
        for (let it = 0; it < this.systemSolver.getIterations(); it++) {
            let J = this.jacobiMatrix(kx, kz, x, z, t, system);
            let dk = gauss_1.gauss.solve(J, F.scaleSelf(-this.systemSolver.getAlpha()));
            for (let i = 0; i < this.stages; i++) {
                kx[i].addSelf(dk.getSubVector(i * length, system.length_x()));
                kz[i].addSelf(dk.getSubVector(i * length + system.length_x(), system.length_z()));
            }
            F = this.function(kx, kz, x, z, t, system);
            let fnorm = F.norm2();
            if (it >= this.systemSolver.getMinIterations() && fnorm < this.systemSolver.getAbsTol() + this.systemSolver.getRelTol() * f0norm) {
                let xNew = x.clone();
                for (let j = 0; j < this.stages; j++) {
                    xNew.addSelf(kx[j].scaleSelf(this.step * this.b[j]));
                }
                let tNew = t + this.step;
                return new daeVector_1.DAEVector(xNew, this.solve_z(xNew, kz[this.stages - 1], tNew, system), tNew);
            }
        }
        throw new Error("Divergence");
    }
}
/**
 * implicit rk methods with adaptive step for implicit dae of index 1
 */
class IDAE_IRKA extends IDAE_IRK {
    constructor(step, maxStep, errorOrder, errorTolerance, systemSolver, a, b, c, _b, stages) {
        super(step, systemSolver, a, b, c, stages);
        this._b = _b;
        this.errorOrder = errorOrder;
        this.errorTolerance = errorTolerance;
        this.minStep = step;
        this.maxStep = maxStep;
    }
    makeStep(x, z, t, system) {
        //throw new Error("Method not implemented.");
        while (true) {
            let shouldThrow = true;
            let length = system.length_x() + system.length_z();
            let kx = [];
            let kz = [];
            for (let i = 0; i < this.stages; i++) {
                kx.push(vector_1.vector.empty(system.length_x()));
                kz.push(z.clone());
            }
            let F = this.function(kx, kz, x, z, t, system);
            let f0norm = F.norm2();
            for (let it = 0; it < this.systemSolver.getIterations(); it++) {
                let J = this.jacobiMatrix(kx, kz, x, z, t, system);
                let dk = gauss_1.gauss.solve(J, F.scaleSelf(-this.systemSolver.getAlpha()));
                for (let i = 0; i < this.stages; i++) {
                    kx[i].addSelf(dk.getSubVector(i * length, system.length_x()));
                    kz[i].addSelf(dk.getSubVector(i * length + system.length_x(), system.length_z()));
                }
                F = this.function(kx, kz, x, z, t, system);
                let fnorm = F.norm2();
                if (it >= this.systemSolver.getMinIterations() && fnorm < this.systemSolver.getAbsTol() + this.systemSolver.getRelTol() * f0norm) {
                    let difference = vector_1.vector.empty(x.length());
                    for (let i = 0; i < this._b.length; i++) {
                        difference.addSelf(vector_1.vector.scale(kx[i], this._b[i] - this.b[i]));
                    }
                    let difNorm = difference.norm2();
                    var stepOpt = Math.pow(this.errorTolerance * 0.5 / difNorm, 1 / this.errorOrder) * this.step;
                    if (isNaN(stepOpt)) {
                        stepOpt = this.minStep;
                    }
                    stepOpt = Math.min(Math.max(this.minStep, stepOpt), this.maxStep);
                    if (stepOpt * 2 < this.step) {
                        this.step = stepOpt;
                        shouldThrow = false;
                        break;
                    }
                    this.step = stepOpt;
                    let xNew = x.clone();
                    let tNew = t + this.step;
                    for (let j = 0; j < this.stages; j++) {
                        xNew.addSelf(kx[j].scaleSelf(this.step * this.b[j]));
                    }
                    return new daeVector_1.DAEVector(xNew, this.solve_z(xNew, kz[this.stages - 1], tNew, system), tNew);
                }
            }
            if (shouldThrow)
                throw new Error("Divergence");
        }
    }
}
/**
 * classic RK4
 */
class IDAE_RK4 extends IDAE_ERK {
    constructor(step, systemSolver) {
        super(step, systemSolver, [
            [0.5],
            [0, 0.5],
            [0, 0, 1]
        ], [1 / 6, 1 / 3, 1 / 3, 1 / 6], [0, 0.5, 0.5, 1]);
    }
}
exports.IDAE_RK4 = IDAE_RK4;
class IDAE_RK4_2 extends IDAE_ERK {
    constructor(step, systemSolver) {
        super(step, systemSolver, [
            [1 / 3],
            [-1 / 3, 1],
            [1, -1, 1]
        ], [1 / 8, 3 / 8, 3 / 8, 1 / 8], [0, 1 / 3, 2 / 3, 1]);
    }
}
exports.IDAE_RK4_2 = IDAE_RK4_2;
class IDAE_RK4_RALSTON extends IDAE_ERK {
    constructor(step, systemSolver) {
        super(step, systemSolver, [
            [0.4],
            [0.29697761, 0.15875964],
            [0.2181004, -3.05096516, 3.83286476]
        ], [0.17476028, -0.55148066, 1.20553560, 0.17118478], [0, 0.4, 0.45573725, 1]);
    }
}
exports.IDAE_RK4_RALSTON = IDAE_RK4_RALSTON;
class IDAE_RK6 extends IDAE_ERK {
    constructor(step, systemSolver) {
        super(step, systemSolver, [
            [2 / 5],
            [0, 4 / 5],
            [169 / 1458, 110 / 729, -65 / 1458],
            [-44 / 675, -88 / 135, 76 / 351, 336 / 325],
            [21 / 106, 0, -105 / 689, -324 / 689, 45 / 106],
            [-2517 / 4864, -55 / 38, 10615 / 31616, 567 / 7904, 7245 / 4864, 2597 / 2432]
        ], [0, 0, 1375 / 4992, 6561 / 20384, 3375 / 12544, 53 / 768, 19 / 294], [0, 2 / 5, 4 / 5, 2 / 9, 8 / 15, 0, 1]);
    }
}
exports.IDAE_RK6 = IDAE_RK6;
class IDAE_RK6_2 extends IDAE_ERK {
    constructor(step, systemSolver) {
        super(step, systemSolver, [
            [1 / 3],
            [0, 2 / 3],
            [1 / 12, 1 / 3, -1 / 12],
            [25 / 48, -55 / 24, 35 / 48, 15 / 8],
            [3 / 20, -11 / 24, -1 / 8, 1 / 2, 1 / 10],
            [-261 / 260, 33 / 13, 43 / 156, -118 / 39, 32 / 195, 80 / 39]
        ], [13 / 200, 0, 11 / 40, 11 / 40, 4 / 25, 4 / 25, 13 / 200], [0, 1 / 3, 2 / 3, 1 / 3, 5 / 6, 1 / 6, 1]);
    }
}
exports.IDAE_RK6_2 = IDAE_RK6_2;
class IDAE_RK8 extends IDAE_ERK {
    constructor(step, systemSolver) {
        var root21 = Math.sqrt(21);
        super(step, systemSolver, [
            [1 / 2],
            [1 / 4, 1 / 4],
            [1 / 7, (-7 - 3 * root21) / 98, 0, (21 + 5 * root21) / 49],
            [(11 + root21) / 84, 0, (18 + 4 * root21) / 63, (21 - root21) / 252],
            [(5 + root21) / 48, 0, (9 + root21) / 36, (-231 + 14 * root21) / 360, (63 - 7 * root21) / 80],
            [(10 - root21) / 42, 0, (-432 + 92 * root21) / 315, (633 - 145 * root21) / 90, (-503 + 115 * root21) / 70, (63 - 13 * root21) / 35],
            [1 / 14, 0, 0, 0, (14 - 3 * root21) / 126, (13 - 3 * root21) / 63, 1 / 9],
            [1 / 32, 0, 0, 0, (91 - 21 * root21) / 576, 11 / 72, (-385 - 75 * root21) / 1152, (63 + 13 * root21) / 128],
            [1 / 14, 0, 0, 0, 1 / 9, (-733 - 147 * root21) / 2205, (515 + 111 * root21) / 504, (-51 - 11 * root21) / 56, (132 + 28 * root21) / 245],
            [0, 0, 0, 0, (-42 + 7 * root21) / 18, (-18 + 28 * root21) / 45, (-273 - 53 * root21) / 72, (301 + 53 * root21) / 72, (28 - 28 * root21) / 45, (49 - 7 * root21) / 18]
        ], [1 / 20, 0, 0, 0, 0, 0, 0, 49 / 180, 16 / 45, 49 / 180, 1 / 20], [0, 1 / 2, 1 / 2, (7 + root21) / 14, (7 + root21) / 14, 1 / 2, (7 - root21) / 14,
            (7 - root21) / 14, 1 / 2, (7 + root21) / 14, 1]);
    }
}
exports.IDAE_RK8 = IDAE_RK8;
class IDAE_DOPRI5 extends IDAE_ERKA {
    constructor(step, maxStep, systemSolver, errorTolerance) {
        super(step, maxStep, 5, errorTolerance, systemSolver, [
            [1 / 5],
            [3 / 40, 9 / 40],
            [44 / 45, -56 / 15, 32 / 9],
            [19372 / 6561, -25360 / 2187, 64448 / 6561, -212 / 729],
            [9017 / 3168, -355 / 33, 46732 / 5247, 49 / 176, -5103 / 18656],
            [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84]
        ], [35 / 384, 0, 500 / 1113, 125 / 192, -2187 / 6784, 11 / 84, 0], [0, 1 / 5, 3 / 10, 4 / 5, 8 / 9, 1, 1], [5179 / 57600, 0, 7571 / 16695, 393 / 640, -92097 / 339200, 187 / 2100, 1 / 40]);
    }
}
exports.IDAE_DOPRI5 = IDAE_DOPRI5;
/**
 * BogackiShampine23
 */
class IDAE_BS23 extends IDAE_ERKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 3, errorTolerance, systemSolver, [
            [1 / 2],
            [0, 3 / 4],
            [2 / 9, 1 / 3, 4 / 9]
        ], [2 / 9, 1 / 3, 4 / 9, 0], [0, 0.5, 0.75, 1], [7 / 24, 1 / 4, 1 / 3, 1 / 8]);
    }
}
exports.IDAE_BS23 = IDAE_BS23;
class IDAE_HeunEuler extends IDAE_ERKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 2, errorTolerance, systemSolver, [
            [1]
        ], [1 / 2, 1 / 2], [0, 1], [1, 0]);
    }
}
exports.IDAE_HeunEuler = IDAE_HeunEuler;
class IDAE_MidpointEuler extends IDAE_ERKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 2, errorTolerance, systemSolver, [
            [1 / 2]
        ], [0, 1], [0, 0.5], [1, 0]);
    }
}
exports.IDAE_MidpointEuler = IDAE_MidpointEuler;
class IDAE_RADAUIA5 extends IDAE_IRK {
    constructor(step, systemSolver) {
        let root6 = Math.sqrt(6);
        super(step, systemSolver, [
            [1 / 9, (-1 - root6) / 18, (-1 + root6) / 18],
            [1 / 9, (88 + 7 * root6) / 360, (88 - 43 * root6) / 360],
            [1 / 9, (88 + 43 * root6) / 360, (80 - 7 * root6) / 360]
        ], [1 / 9, (16 + root6) / 36, (16 - root6) / 36], [0, (6 - root6) / 10, (6 + root6) / 10], 3);
    }
}
exports.IDAE_RADAUIA5 = IDAE_RADAUIA5;
class IDAE_RADAUIIA3 extends IDAE_IRK {
    constructor(step, systemSolver) {
        let root6 = Math.sqrt(6);
        super(step, systemSolver, [
            [5 / 12, -1 / 12],
            [3 / 4, 1 / 4]
        ], [3 / 4, 1 / 4], [1 / 3, 1], 2);
    }
}
exports.IDAE_RADAUIIA3 = IDAE_RADAUIIA3;
class IDAE_RADAUIIA5 extends IDAE_IRK {
    constructor(step, systemSolver) {
        let root6 = Math.sqrt(6);
        super(step, systemSolver, [
            [11 / 45 - 7 * root6 / 360, 37 / 225 - 169 * root6 / 1800, -2 / 225 + root6 / 75],
            [37 / 225 + 169 * root6 / 1800, 11 / 45 + 7 * root6 / 360, -2 / 225 - root6 / 75],
            [4 / 9 - root6 / 36, 4 / 9 + root6 / 36, 1 / 9]
        ], [4 / 9 - root6 / 36, 4 / 9 + root6 / 36, 1 / 9], [2 / 5 - root6 / 10, 2 / 5 + root6 / 10, 1], 3);
    }
}
exports.IDAE_RADAUIIA5 = IDAE_RADAUIIA5;
/**
 * Embedded gauss-legendre 4th order
 */
class IDAE_GAUSSLEGENDRE4 extends IDAE_IRKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        let sqrt3 = Math.sqrt(3);
        super(step, maxStep, 4, errorTolerance, systemSolver, [
            [1 / 4, 1 / 4 - sqrt3 / 6],
            [1 / 4 + sqrt3 / 6, 1 / 4]
        ], [0.5, 0.5], [(3 - sqrt3) / 6, (3 + sqrt3) / 6], [(1 + sqrt3) / 2, (1 - sqrt3) / 2], 2);
    }
}
exports.IDAE_GAUSSLEGENDRE4 = IDAE_GAUSSLEGENDRE4;
/**
 * Embedded gauss-legendre 6th order
 */
class IDAE_GAUSSLEGENDRE6 extends IDAE_IRKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        let sqrt15 = Math.sqrt(15);
        super(step, maxStep, 6, errorTolerance, systemSolver, [
            [5 / 36, 2 / 9 - sqrt15 / 15, 5 / 36 - sqrt15 / 30],
            [5 / 36 + sqrt15 / 24, 2 / 9, 5 / 36, -sqrt15 / 24],
            [5 / 36 + sqrt15 / 30, 2 / 9 + sqrt15 / 15, 5 / 36]
        ], [5 / 18, 4 / 9, 5 / 18], [0.5 - sqrt15 / 10, 0.5, 0.5 + sqrt15 / 10], [-5 / 6, 8 / 3, -5 / 6], 3);
    }
}
exports.IDAE_GAUSSLEGENDRE6 = IDAE_GAUSSLEGENDRE6;
class IDAE_LOBATTOIIIA2 extends IDAE_IRKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 2, errorTolerance, systemSolver, [
            [0, 0],
            [1 / 2, 1 / 2]
        ], [1 / 2, 1 / 2], [0, 1], [1, 0], 2);
    }
}
exports.IDAE_LOBATTOIIIA2 = IDAE_LOBATTOIIIA2;
class IDAE_LOBATTOIIIA4 extends IDAE_IRKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 4, errorTolerance, systemSolver, [
            [0, 0, 0],
            [5 / 24, 1 / 3, -1 / 24],
            [1 / 6, 2 / 3, 1 / 36]
        ], [1 / 6, 2 / 3, 1 / 6], [0, 0.5, 1], [-1 / 2, 2, -1 / 2], 3);
    }
}
exports.IDAE_LOBATTOIIIA4 = IDAE_LOBATTOIIIA4;
class IDAE_LOBATTOIIIB2 extends IDAE_IRKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 2, errorTolerance, systemSolver, [
            [1 / 2, 0],
            [1 / 2, 0]
        ], [1 / 2, 1 / 2], [1 / 2, 1 / 2], [1, 0], 2);
    }
}
exports.IDAE_LOBATTOIIIB2 = IDAE_LOBATTOIIIB2;
class IDAE_LOBATTOIIIB4 extends IDAE_IRKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 4, errorTolerance, systemSolver, [
            [1 / 6, -1 / 6, 0],
            [1 / 6, 1 / 3, 0],
            [1 / 6, 5 / 6, 0]
        ], [1 / 6, 2 / 3, 1 / 6], [0, 0.5, 1], [-1 / 2, 2, -1 / 2], 3);
    }
}
exports.IDAE_LOBATTOIIIB4 = IDAE_LOBATTOIIIB4;
class IDAE_LOBATTOIIIC2 extends IDAE_IRKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 2, errorTolerance, systemSolver, [
            [1 / 2, -1 / 2],
            [1 / 2, 1 / 2]
        ], [1 / 2, 1 / 2], [0, 1], [1, 0], 2);
    }
}
exports.IDAE_LOBATTOIIIC2 = IDAE_LOBATTOIIIC2;
class IDAE_LOBATTOIIIC4 extends IDAE_IRKA {
    constructor(step, maxStep, errorTolerance, systemSolver) {
        super(step, maxStep, 4, errorTolerance, systemSolver, [
            [1 / 6, -1 / 3, 1 / 6],
            [1 / 6, 5 / 12, -1 / 12],
            [1 / 6, 2 / 3, 1 / 6]
        ], [1 / 6, 2 / 3, 1 / 6], [0, 0.5, 1], [-1 / 2, 2, -1 / 2], 3);
    }
}
exports.IDAE_LOBATTOIIIC4 = IDAE_LOBATTOIIIC4;


/***/ }),

/***/ "./src/dae/solvers/idae/trapezoidal.ts":
/*!*********************************************!*\
  !*** ./src/dae/solvers/idae/trapezoidal.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.IDAE_ITrapezoidal = exports.IDAE_ETrapezoidal = void 0;
const daeVector_1 = __webpack_require__(/*! ../../daeVector */ "./src/dae/daeVector.ts");
const idaeSolver_1 = __webpack_require__(/*! ../../idaeSolver */ "./src/dae/idaeSolver.ts");
const vector_1 = __webpack_require__(/*! ../../../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../../../math/matrix */ "./src/math/matrix.ts");
const gauss_1 = __webpack_require__(/*! ../../../math/gauss */ "./src/math/gauss.ts");
/*
explicit
    x_{n+1} = x_n + 0.5*h(f(x_n,t_n)+f(x_n+hf(x_n,t_n),t_{n+1}))
    {
        1.  f(x_n,k_1,z_n,t_n) = 0
        implicit Nx
        2.  g(x_n+hk_1,z^1_n,t_{n+1}) = 0
        implicit Nz
        3.  f(x_n+hk_1,k_2,z^1_n,t_{n+1}) = 0
        implicit Nx
        4.  x_{n+1} = x_n + 0.5*h(k_1 + k_2)
        explicit Nx
        5.  g(x_{n+1},z_{n+1},t_{n+1}) = 0
        implicit Nz
    }
implicit
    x_{n+1} = x_n + 0.5*h(f(x_n,t_n)+f(x_{n+1}.t_{n+1}))
    {
        1.  f(x_n,k_1,z_n,t_n) = 0
        implicit Nx
        2.  g(x_{n+1},z_{n+1},t_{n+1}) = 0
            f(x_{n+1},(x_{n+1}-x_n)/(2h)-k_1,z_{n+1},t_{n+1}) = 0
        implicit Nx + Nz system
    }
*/
/**
 * explicit trapezoidal method for implicit dae with index one
 */
class IDAE_ETrapezoidal extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver) {
        super(step, systemSolver);
    }
    makeStep(x, z, t, system) {
        //1.    f(x_n,k_1,z_n,t_n) = 0
        let x1 = this.solve_dx(x, z, t, system).scaleSelf(this.step).addSelf(x);
        let tNew = t + this.step;
        //2.    g(x_n+hk_1,z^1_n,t_{n+1}) = 0
        let z1 = this.solve_z(x1, z, tNew, system);
        //3.    f(x_n+hk_1,k_2,z^1_n,t_{n+1}) = 0
        let x2 = this.solve_dx(x1, z1, tNew, system).scaleSelf(this.step).addSelf(x);
        //4.    x_{n+1} = x_n + 0.5*h(k_1 + k_2)
        let xNew = x1.addSelf(x2).scaleSelf(0.5);
        //5.    g(x_{n+1},z_{n+1},t_{n+1}) = 0
        let zNew = this.solve_z(xNew, z1, tNew, system);
        return new daeVector_1.DAEVector(xNew, zNew, tNew);
    }
}
exports.IDAE_ETrapezoidal = IDAE_ETrapezoidal;
/**
 * implicit trapezoidal method for implicit dae with index one
 */
class IDAE_ITrapezoidal extends idaeSolver_1.IDAESolver {
    constructor(step, systemSolver, stepSolver) {
        super(step, systemSolver);
        this.stepSolver = stepSolver;
    }
    /*x_{n+1} = x_n + 0.5*h(f(x_n,t_n)+f(x_{n+1}.t_{n+1}))
    {
        1.  f(x_n,k_1,z_n,t_n) = 0
        implicit Nx
        2.  Fx = f(x_{n+1},(x_{n+1}-x_n)*2/h-k_1,z_{n+1},t_{n+1}) = 0
            Fz = g(x_{n+1},z_{n+1},t_{n+1}) = 0
        implicit Nx + Nz system
        dFx/dx_{n+1} = df/dx + df/ddx *2/h
        dFx/dz_{n+1} = df/dz
        dFz/dx_{n+1} = dg/dx
        dFz/dz_{n+1} = dg/dz
    }*/
    makeStep(x, z, t, system) {
        /*let k1 = this.solve_dx(x,z,t,system);
        let xz0 = vector.concat([x.clone().addSelf(vector.scale(k1,this.step)),z]);
        let tNew = t + this.step;
        let xzNew = this.stepSolver.solve((xzNew:vector)=>{
            let xNew = xzNew.getSubVector(0,system.length_x());
            let zNew = xzNew.getSubVector(system.length_x(),system.length_z());
            let dx = vector.sub(xNew,x).scale(2/this.step).sub(k1);

            let F:vector = vector.empty(x.length()+z.length());
            F.addSubVector(system.f(xNew,dx,zNew,tNew),0);
            F.addSubVector(system.g(xNew,zNew,tNew),x.length());
            return F;

        },(xzNew:vector)=>{
            let xNew = xzNew.getSubVector(0,system.length_x());
            let zNew = xzNew.getSubVector(system.length_x(),system.length_z());
            let dx = vector.sub(xNew,x).scale(2/this.step).sub(k1);

            let J:matrix = matrix.emptySquare(x.length()+z.length());
            J.addSubMatrix(system.dfdx(xNew,dx,zNew,tNew).addSelf(system.dfddx(xNew,dx,zNew,tNew).scaleSelf(2/this.step)),0,0);
            J.addSubMatrix(system.dfdz(xNew,dx,zNew,tNew),0,x.length());
            J.addSubMatrix(system.dgdx(xNew,zNew,tNew),x.length(),0);
            J.addSubMatrix(system.dgdz(xNew,zNew,tNew),x.length(),x.length());
            return J;
        },system.length_x() + system.length_z(), xz0);
        
        return new DAEVector(xzNew.getSubVector(0,system.length_x()),xzNew.getSubVector(system.length_x(),system.length_z()),tNew);*/
        /*x_{n+1} = x_n + 0.5*h(f(x_n,t_n)+f(x_{n+1}.t_{n+1}))
        {
            1.  f(x_n,k_1,z_n,t_n) = 0
            implicit Nx
            2.  Fx = f(x_{n+1},(x_{n+1}-x_n)*2/h-k_1,z_{n+1},t_{n+1}) = 0
                Fz = g(x_{n+1},z_{n+1},t_{n+1}) = 0
            implicit Nx + Nz system
            dFx/dx_{n+1} = df/dx + df/ddx *2/h
            dFx/dz_{n+1} = df/dz
            dFz/dx_{n+1} = dg/dx
            dFz/dz_{n+1} = dg/dz
        }*/
        //1.    f(x_n,k_1,z_n,t_n) = 0
        let k1 = this.solve_dx(x, z, t, system);
        let tNew = t + this.step;
        let xNew = x.clone().addSelf(vector_1.vector.scale(k1, this.step)); //better approximation for xNew
        let zNew = z.clone();
        let dx = vector_1.vector.sub(xNew, x).scaleSelf(2 / this.step).subSelf(k1);
        let F = vector_1.vector.empty(x.length() + z.length());
        F.addSubVector(system.f(xNew, dx, zNew, tNew), 0);
        F.addSubVector(system.g(xNew, zNew, tNew), x.length());
        let f0norm = F.norm2();
        for (let i = 0; i < this.stepSolver.getIterations(); i++) {
            let J = matrix_1.matrix.emptySquare(x.length() + z.length());
            J.addSubMatrix(system.dfdx(xNew, dx, zNew, tNew).addSelf(system.dfddx(xNew, dx, zNew, tNew).scaleSelf(2 / this.step)), 0, 0);
            J.addSubMatrix(system.dfdz(xNew, dx, zNew, tNew), 0, x.length());
            J.addSubMatrix(system.dgdx(xNew, zNew, tNew), x.length(), 0);
            J.addSubMatrix(system.dgdz(xNew, zNew, tNew), x.length(), x.length());
            let dxz = gauss_1.gauss.solve(J, F.scaleSelf(-this.stepSolver.getAlpha()));
            xNew.addSelf(dxz.getSubVector(0, x.length()));
            zNew.addSelf(dxz.getSubVector(x.length(), z.length()));
            dx = vector_1.vector.sub(xNew, x).scaleSelf(2 / this.step).subSelf(k1);
            F = vector_1.vector.empty(x.length() + z.length());
            F.addSubVector(system.f(xNew, dx, zNew, tNew), 0);
            F.addSubVector(system.g(xNew, zNew, tNew), x.length());
            let fnorm = F.norm2();
            if (i >= this.stepSolver.getMinIterations() && fnorm < this.stepSolver.getRelTol() + this.stepSolver.getAbsTol() * f0norm) {
                return new daeVector_1.DAEVector(xNew, zNew, tNew);
            }
        }
        throw new Error("Divergence");
    }
}
exports.IDAE_ITrapezoidal = IDAE_ITrapezoidal;


/***/ }),

/***/ "./src/examples.ts":
/*!*************************!*\
  !*** ./src/examples.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.examples = void 0;
exports.examples = {
    dae: {
        //https://www.mathworks.com/help/matlab/math/solve-differential-algebraic-equations-daes.html
        "robertson-problem": {
            name: "Robertson problem",
            text: `
//https://www.mathworks.com/help/matlab/math/solve-differential-algebraic-equations-daes.html
//Robertson problem

x1(t0) = 1;
x2(t0) = 0;
x1'=-0.04*x1+10^4*x2*x3;
x2'=0.04-1e4*x2*x3-3e7*x2^2;
x3 = 1 - x1 - x2;`
        },
        "weissinger": {
            name: "Weissinger implicit DE",
            text: `
//Weissinger implicit dif. eq.
//t0 = 1

x(t0) = sqrt(3/2);
t * x^2*der(x)^3 - x^3*der(x)^2 + t*(t^2+1)*der(x)-t*t*x = 0;
z = sqrt(t*t+0.5);  //exact solution`
        },
        "stiff-equation": {
            name: "Stiff equation",
            text: `//stiff equation

constant x0 = 0;
constant a = -21;
constant c1 = x0 + 1/(a + 1);

x' = a*x+exp(-t);
z = c1 * exp(a*t) - exp(-t)/(a+1);//analytical solution
x(t0) = x0;`
        },
        "lorenz-system": {
            name: "Lorenz system",
            text: `
//Lorenz system

constant sigma = 10;
constant rho=28;
constant beta=8/3;

x(t0) = 1;
y(t0) = 1;
z(t0) = 1;

x' = sigma* (y-x);
y' = x * (rho - z) - y;
z' = x*z-beta*z;`
        },
        "dalquist-equation": {
            name: "Dalquist equation",
            text: `
//Dalquist equation
//t0 = 0, t1 = 2

constant a = 2;
constant x0 = 1;
constant t0 = 0;

x(t0) = x0;
x' = a * x;
z = x0*exp(a*x-a*t0);//analytic solution
`
        },
        "van-der-pol-oscillator": {
            name: "Van der Pol oscillator",
            text: `
//Van der Pol oscillator

constant mu = 20;
constant a = 0;
constant omega = 1;

x1(t0) = 1;
x2(t0) = 0;

x1' = x2;
x2' = mu*(1-x1*x1)*x2-x1 + a*sin(omega*t);`
        },
        "implicid van-der-pol": {
            name: "Implicit Van der Pol oscillator",
            text: `
//Van der Pol oscillator

constant mu = 20;
constant a = 0;
constant omega = 1;

x1(t0) = 1;
x2(t0) = 0;

x1' - x2 =0;
x2' = mu*(1-x1*x1)*x2-x1 + a*sin(omega*t);
`
        },
        "airy-equation": {
            name: "Airy equation",
            text: `
//Airy equation
//x''-tx=0
//t0 = -15

x2(t0)=0.0;
x1(t0)=0.255;

x2'= t*x1;
x1'= x2;`
        },
        "lotka-volterra": {
            name: "Lotka-Volterra equations",
            text: `
//prey hunter Lotka–Volterra

constant alpha = 1.1;
constant beta = 0.4;
constant delta = 0.1;
constant gamma = 0.4;

x(t0) = 10;
y(t0) = 10;

x' = x*alpha-beta*x*y;
y' = delta*x*y - gamma*y;`
        },
        "logistic-equation": {
            name: "Logistic differential equation",
            text: `
//Logistic differential equation
constant k = 1;
constant a = 1;

x(t0) = 0.5;

x' = k*x*(a-x);`
        },
        "double-pendulum": {
            name: "Double pendulum",
            text: `//double pendulum

constant m = 1;
constant r = 1;
constant g = 9.82;

p1(t0) = 0;
p2(t0) = 0;
theta1(t0) = 1.5;
theta2(t0) = 3.;

macro dtheta1() 6/(m*r^2)*(2*p1 - 3*cos(theta1 - theta2)*p2)/(16-9*cos(theta1 - theta2)^2);
macro dtheta2() 6/(m*r^2)*(8*p2 - 3*cos(theta1 - theta2)*p1)/(16-9*cos(theta1 - theta2)^2);

der(theta1) =#dtheta1() ;
der(theta2) = #dtheta2();
der(p1) = -0.5*m*(r^2)*(#dtheta1()*#dtheta2()*sin(theta1-theta2)+3*g/r*sin(theta1));
der(p2) = -0.5*m*(r^2)*(-#dtheta1()*#dtheta2()*sin(theta1-theta2)+g/r*sin(theta2));

x1 =r*sin(theta1);
y1 = -r*cos(theta1);
x2 = r*sin(theta1) + r*sin(theta2);
y2 = -r*cos(theta1) - r*cos(theta2);
`
        },
        "mathieu": {
            name: "Mathieu's differential equation",
            text: `//Methieu's differential equation

constant q = 1;
constant a = 2;

y(t0) = 0;
dyt(t0) = 0;

dyt' = y*(2*q*cos(2*t)-a);
y' = dyt;

`
        },
        "linear-system": {
            name: "Linear system",
            text: `//Linear system
/*
x_i' = sum_j x_j * a_{ij} + t * b_i
*/

macro a[1][1]()  1;
macro  a[1][2]() -1;
macro a[1][3]()  -2;

macro a[2][1]() -3;
macro a[2][2]() -1;
macro a[2][3]() -0.2;

macro a[3][1]() 0.12;
macro a[3][2]() 0.15;
macro a[3][3]() 3;

macro b[1]() 1;
macro b[2]() -0.13;
macro b[3]() 0.5;

x[1](t0) = 1;
x[2](t0) = -0.3;
x[3](t0) = 0.0;

for(i in [1:3]){
        der(x[i]) = sum(j in [1:3]){ x[j]*#a[i][j]() }+#b[i]()*t;
}
`
        },
        "pendulum": {
            name: "Pendulum",
            text: `//penduluum
//t = [0,0.5]

constant m = 1;
constant r = 1;
constant g = 9.8;
constant angle = pi()/6;

x1(t0) = r*sin(angle);
y1(t0) = -r*cos(angle);
x2(t0) = 0;
y2(t0) = 0;
T(t0) = 0.0;
x3(t0) = 0.0;
y3(t0) = 0.0;

y1' = y2;
y2' = y3;
m*x3 = T*x1/r;
m*y3 = T*y1/r - g;
x1^2 + y1^2 = r^2;
x1*x2 + y1*y2 = 0;
x2^2 + y2^2+ x1*x3 + y3*y1 = 0;`
        },
        "orbit": {
            name: "An Arenstorf orbit",
            text: `
//period is 17.0652165601579625588917206249
constant m1 = 0.012277471;
constant m2 = 1 - m1;

x1' = x2;
x2' = x1 + 2*y2 - m2*(x1+m1)/D1-m1*(x1-m2)/D2;
y1' = y2;
y2' = y1 - 2*x2 - m2*y1/D1-m1*y1/D2;

D1 = ((x1 + m1)^2 + y1^2)^1.5;
D2 = ((x1 - m2)^2 + y1^2)^1.5;
x1(t0) = 0.994;
x2(t0) = 0;
y1(t0) = 0;
y2(t0) = -2.00158510637908252240537862224;
`
        },
        "oregonator": {
            name: "Oregonator",
            text: `
//t = [0,400]
constant a1 = 77.27;
constant a2 = 8.375e-5;
constant a3 = 0.161;

x1' = a1 * x2 + a1 * x1 - a1 * a2 * x1^2 - a1 * x1 * x2;
x2' = (-x2 + x1*x2 + x3) / a1;
x3' = a3 * (x1 - x3);

x1(t0) = 400;
x2(t0) = 1;
x3(t0) = 400;
`
        },
        "brusselator": {
            name: "Brusselator",
            text: `
//t = [0,30]
x1(t0) = 1.5;
x2(t0) = 3;

x1' = 1 + x1^2 * x2 - 4*x1;
x2' = 3*x1 - x1^2 * x2;
`
        }
    },
    hybrid: {
        "jumping-ball": {
            name: "Jumping ball",
            text: `
//Jumping ball
constant m = 1;
constant g = 9.82;
constant k = 1;

x(t0) = 1;
v(t0) = 0;

v' = -m*g;
x' = v;

state jump{
        set v = -v*k;
} from initial, jump on(v<0 and x<0);

terminal state end{
}from initial, jump on(abs(v)=0 and abs(x)=0);`
        },
        "jumping-ball-spring": {
            name: "Jumping ball on a spring",
            text: `//Jumping ball on a spring
constant m = 1;
constant g = 9.82;
constant k = 1;
constant k_spring = 0.1;
constant h0;

x(t0) = 1;
v(t0) = 0;

v' = -m*g - k_spring*(x - h0);
x' = v;

state jump{
        set v = -v*k;
} from initial, jump on(v<0 and x<0);

terminal state end{
}from initial, jump on(abs(v)=0 and abs(x)=0);
`
        },
        "two-masses": {
            name: "Two masses",
            text: `
//Two masses
constant k1 = n1 = m1 = m2 = 1, k2 = n2 = 2;

x1(t0) = 0;
x2(t0) = 3;
st(t0) = 0;

state separate{
        x1' = v1;
        v1' = k1*(n1-x1)/m1;
        x2' = v2;
        v2' = k2*(n2-x2)/m2;
        set st = 10;
        a1 = k1*(n1 - x1)/m1;
        a2 = k2*(n2 - x2)/m2;
} from initial, together on(st<);

state together{
        set st = 10;
        set v1 = (m1 * v1 + m2*v2)/(m1 + m2);
        set v2 = v1;
        v1' = (k1*n1+k2*n2-x1*(k1+k2))/(m1+m2);
        v2' = (k1*n1+k2*n2-x2*(k1+k2))/(m1+m2);
        x1' = v1;
        x2' = v2;
        a1 = (k1*n1 + k2*n2-x1*(k1+k2))/(m1+m2);
        a2 = (k1*n1 + k2*n2-x2*(k1+k2))/(m1+m2);
} from initial, separate on(x1>x2&&v1>v2);`
        },
        "abs-equation": {
            name: "Abs value differential equation",
            text: `
//abs value
//t = [0,40]
x(t0) = 1;

x' = -abs(x);
z = exp(-t);//analytic solution

state zero{
	set x = abs(x);
} from initial, zero on(x<0);`
        },
        "knee-problem": {
            name: "Knee problem",
            text: `
//knee problem
//t = [0,2]

constant epsilon = 1e-6;

x(t0) = 1;
z = {t<1?1 - x:0};
epsilon*x' = (1 - t)*x - x^2;

state zero on(x<0){
	set x = abs(x);
} from initial on(x<0), zero on(x<0);`
        },
        "falling-body": {
            name: "Falling body",
            text: `
//falling body
//x'' = -1 + x'^2

x1(t0) = 1;
x2(t0) = 0;

eq_1:x1' = x2;
eq_2:x2' = -1 + x2^2;

terminal state zero{
        eq_1:x1' = 0;
        eq_2:x2' = 0;
} from initial on(x<=0);`
        }
    }
};


/***/ }),

/***/ "./src/grammar/antlrOutput/odeGrammarLexer.js":
/*!****************************************************!*\
  !*** ./src/grammar/antlrOutput/odeGrammarLexer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from e:\projects\SolversJS\src\grammar\odeGrammar.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");



var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u00024\u018e\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0005\u0017\u00d1\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u00d8\n\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u00de\n\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001c\u0006\u001c\u00e5\n",
    "\u001c\r\u001c\u000e\u001c\u00e6\u0003\u001c\u0003\u001c\u0007\u001c",
    "\u00eb\n\u001c\f\u001c\u000e\u001c\u00ee\u000b\u001c\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u00f2\n\u001c\u0003\u001c\u0006\u001c\u00f5\n\u001c",
    "\r\u001c\u000e\u001c\u00f6\u0005\u001c\u00f9\n\u001c\u0003\u001c\u0003",
    "\u001c\u0006\u001c\u00fd\n\u001c\r\u001c\u000e\u001c\u00fe\u0003\u001c",
    "\u0003\u001c\u0005\u001c\u0103\n\u001c\u0003\u001c\u0006\u001c\u0106",
    "\n\u001c\r\u001c\u000e\u001c\u0107\u0005\u001c\u010a\n\u001c\u0003\u001c",
    "\u0006\u001c\u010d\n\u001c\r\u001c\u000e\u001c\u010e\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u0113\n\u001c\u0003\u001c\u0006\u001c\u0116\n\u001c",
    "\r\u001c\u000e\u001c\u0117\u0005\u001c\u011a\n\u001c\u0003\u001d\u0006",
    "\u001d\u011d\n\u001d\r\u001d\u000e\u001d\u011e\u0003\u001e\u0007\u001e",
    "\u0122\n\u001e\f\u001e\u000e\u001e\u0125\u000b\u001e\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u0129\n\u001e\u0003\u001e\u0007\u001e\u012c\n\u001e",
    "\f\u001e\u000e\u001e\u012f\u000b\u001e\u0003\u001f\u0003\u001f\u0003",
    " \u0003 \u0003!\u0003!\u0003\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003",
    "%\u0003%\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003(\u0003)\u0003)\u0003",
    "*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003-\u0003",
    "-\u0003.\u0003.\u0003/\u0003/\u00030\u00030\u00031\u00031\u00032\u0003",
    "2\u00033\u00033\u00034\u00054\u015f\n4\u00034\u00034\u00064\u0163\n",
    "4\r4\u000e4\u0164\u00034\u00034\u00035\u00065\u016a\n5\r5\u000e5\u016b",
    "\u00035\u00035\u00036\u00036\u00036\u00036\u00076\u0174\n6\f6\u000e",
    "6\u0177\u000b6\u00036\u00056\u017a\n6\u00036\u00036\u00056\u017e\n6",
    "\u00036\u00036\u00036\u00036\u00076\u0184\n6\f6\u000e6\u0187\u000b6",
    "\u00036\u00036\u00056\u018b\n6\u00036\u00036\u0003\u0185\u00027\u0003",
    "\u0003\u0005\u0002\u0007\u0002\t\u0002\u000b\u0004\r\u0005\u000f\u0006",
    "\u0011\u0007\u0013\b\u0015\t\u0017\n\u0019\u000b\u001b\f\u001d\r\u001f",
    "\u000e!\u000f#\u0010%\u0011\'\u0012)\u0013+\u0014-\u0015/\u00161\u0017",
    "3\u00185\u00197\u001a9\u001b;\u001c=\u001d?\u001eA\u001fC E!G\"I#K$",
    "M%O&Q\'S(U)W*Y+[,]-_.a/c0e1g2i3k4\u0003\u0002\u000b\u0003\u0002c|\u0003",
    "\u0002C\\\u0003\u00022;\u0004\u0002GGgg\u0004\u0002--//\u0003\u0002",
    "aa\u0006\u00022;C\\aac|\u0004\u0002\u000b\u000b\"\"\u0004\u0002\f\f",
    "\u000f\u000f\u0002\u01a8\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u000b",
    "\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002\u000f",
    "\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002\u0013",
    "\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002\u0017",
    "\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002\u001b",
    "\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002\u001f",
    "\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002#\u0003",
    "\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003\u0002",
    "\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002\u0002",
    "\u0002\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002\u0002\u0002",
    "\u00021\u0003\u0002\u0002\u0002\u00023\u0003\u0002\u0002\u0002\u0002",
    "5\u0003\u0002\u0002\u0002\u00027\u0003\u0002\u0002\u0002\u00029\u0003",
    "\u0002\u0002\u0002\u0002;\u0003\u0002\u0002\u0002\u0002=\u0003\u0002",
    "\u0002\u0002\u0002?\u0003\u0002\u0002\u0002\u0002A\u0003\u0002\u0002",
    "\u0002\u0002C\u0003\u0002\u0002\u0002\u0002E\u0003\u0002\u0002\u0002",
    "\u0002G\u0003\u0002\u0002\u0002\u0002I\u0003\u0002\u0002\u0002\u0002",
    "K\u0003\u0002\u0002\u0002\u0002M\u0003\u0002\u0002\u0002\u0002O\u0003",
    "\u0002\u0002\u0002\u0002Q\u0003\u0002\u0002\u0002\u0002S\u0003\u0002",
    "\u0002\u0002\u0002U\u0003\u0002\u0002\u0002\u0002W\u0003\u0002\u0002",
    "\u0002\u0002Y\u0003\u0002\u0002\u0002\u0002[\u0003\u0002\u0002\u0002",
    "\u0002]\u0003\u0002\u0002\u0002\u0002_\u0003\u0002\u0002\u0002\u0002",
    "a\u0003\u0002\u0002\u0002\u0002c\u0003\u0002\u0002\u0002\u0002e\u0003",
    "\u0002\u0002\u0002\u0002g\u0003\u0002\u0002\u0002\u0002i\u0003\u0002",
    "\u0002\u0002\u0002k\u0003\u0002\u0002\u0002\u0003m\u0003\u0002\u0002",
    "\u0002\u0005o\u0003\u0002\u0002\u0002\u0007q\u0003\u0002\u0002\u0002",
    "\ts\u0003\u0002\u0002\u0002\u000bu\u0003\u0002\u0002\u0002\rz\u0003",
    "\u0002\u0002\u0002\u000f~\u0003\u0002\u0002\u0002\u0011\u0081\u0003",
    "\u0002\u0002\u0002\u0013\u0086\u0003\u0002\u0002\u0002\u0015\u008a\u0003",
    "\u0002\u0002\u0002\u0017\u0093\u0003\u0002\u0002\u0002\u0019\u0098\u0003",
    "\u0002\u0002\u0002\u001b\u009e\u0003\u0002\u0002\u0002\u001d\u00a2\u0003",
    "\u0002\u0002\u0002\u001f\u00a8\u0003\u0002\u0002\u0002!\u00ae\u0003",
    "\u0002\u0002\u0002#\u00b2\u0003\u0002\u0002\u0002%\u00b5\u0003\u0002",
    "\u0002\u0002\'\u00b8\u0003\u0002\u0002\u0002)\u00bd\u0003\u0002\u0002",
    "\u0002+\u00c3\u0003\u0002\u0002\u0002-\u00d0\u0003\u0002\u0002\u0002",
    "/\u00d7\u0003\u0002\u0002\u00021\u00dd\u0003\u0002\u0002\u00023\u00df",
    "\u0003\u0002\u0002\u00025\u00e1\u0003\u0002\u0002\u00027\u0119\u0003",
    "\u0002\u0002\u00029\u011c\u0003\u0002\u0002\u0002;\u0123\u0003\u0002",
    "\u0002\u0002=\u0130\u0003\u0002\u0002\u0002?\u0132\u0003\u0002\u0002",
    "\u0002A\u0134\u0003\u0002\u0002\u0002C\u0136\u0003\u0002\u0002\u0002",
    "E\u0138\u0003\u0002\u0002\u0002G\u013a\u0003\u0002\u0002\u0002I\u013c",
    "\u0003\u0002\u0002\u0002K\u013e\u0003\u0002\u0002\u0002M\u0140\u0003",
    "\u0002\u0002\u0002O\u0142\u0003\u0002\u0002\u0002Q\u0144\u0003\u0002",
    "\u0002\u0002S\u0146\u0003\u0002\u0002\u0002U\u0149\u0003\u0002\u0002",
    "\u0002W\u014c\u0003\u0002\u0002\u0002Y\u014f\u0003\u0002\u0002\u0002",
    "[\u0151\u0003\u0002\u0002\u0002]\u0153\u0003\u0002\u0002\u0002_\u0155",
    "\u0003\u0002\u0002\u0002a\u0157\u0003\u0002\u0002\u0002c\u0159\u0003",
    "\u0002\u0002\u0002e\u015b\u0003\u0002\u0002\u0002g\u0162\u0003\u0002",
    "\u0002\u0002i\u0169\u0003\u0002\u0002\u0002k\u018a\u0003\u0002\u0002",
    "\u0002mn\u0007%\u0002\u0002n\u0004\u0003\u0002\u0002\u0002op\t\u0002",
    "\u0002\u0002p\u0006\u0003\u0002\u0002\u0002qr\t\u0003\u0002\u0002r\b",
    "\u0003\u0002\u0002\u0002st\t\u0004\u0002\u0002t\n\u0003\u0002\u0002",
    "\u0002uv\u0007*\u0002\u0002vw\u0007v\u0002\u0002wx\u00072\u0002\u0002",
    "xy\u0007+\u0002\u0002y\f\u0003\u0002\u0002\u0002z{\u0007u\u0002\u0002",
    "{|\u0007g\u0002\u0002|}\u0007v\u0002\u0002}\u000e\u0003\u0002\u0002",
    "\u0002~\u007f\u0007q\u0002\u0002\u007f\u0080\u0007p\u0002\u0002\u0080",
    "\u0010\u0003\u0002\u0002\u0002\u0081\u0082\u0007h\u0002\u0002\u0082",
    "\u0083\u0007t\u0002\u0002\u0083\u0084\u0007q\u0002\u0002\u0084\u0085",
    "\u0007o\u0002\u0002\u0085\u0012\u0003\u0002\u0002\u0002\u0086\u0087",
    "\u0007f\u0002\u0002\u0087\u0088\u0007g\u0002\u0002\u0088\u0089\u0007",
    "t\u0002\u0002\u0089\u0014\u0003\u0002\u0002\u0002\u008a\u008b\u0007",
    "v\u0002\u0002\u008b\u008c\u0007g\u0002\u0002\u008c\u008d\u0007t\u0002",
    "\u0002\u008d\u008e\u0007o\u0002\u0002\u008e\u008f\u0007k\u0002\u0002",
    "\u008f\u0090\u0007p\u0002\u0002\u0090\u0091\u0007c\u0002\u0002\u0091",
    "\u0092\u0007n\u0002\u0002\u0092\u0016\u0003\u0002\u0002\u0002\u0093",
    "\u0094\u0007v\u0002\u0002\u0094\u0095\u0007t\u0002\u0002\u0095\u0096",
    "\u0007w\u0002\u0002\u0096\u0097\u0007g\u0002\u0002\u0097\u0018\u0003",
    "\u0002\u0002\u0002\u0098\u0099\u0007h\u0002\u0002\u0099\u009a\u0007",
    "c\u0002\u0002\u009a\u009b\u0007n\u0002\u0002\u009b\u009c\u0007u\u0002",
    "\u0002\u009c\u009d\u0007g\u0002\u0002\u009d\u001a\u0003\u0002\u0002",
    "\u0002\u009e\u009f\u0007u\u0002\u0002\u009f\u00a0\u0007w\u0002\u0002",
    "\u00a0\u00a1\u0007o\u0002\u0002\u00a1\u001c\u0003\u0002\u0002\u0002",
    "\u00a2\u00a3\u0007o\u0002\u0002\u00a3\u00a4\u0007c\u0002\u0002\u00a4",
    "\u00a5\u0007e\u0002\u0002\u00a5\u00a6\u0007t\u0002\u0002\u00a6\u00a7",
    "\u0007q\u0002\u0002\u00a7\u001e\u0003\u0002\u0002\u0002\u00a8\u00a9",
    "\u0007u\u0002\u0002\u00a9\u00aa\u0007v\u0002\u0002\u00aa\u00ab\u0007",
    "c\u0002\u0002\u00ab\u00ac\u0007v\u0002\u0002\u00ac\u00ad\u0007g\u0002",
    "\u0002\u00ad \u0003\u0002\u0002\u0002\u00ae\u00af\u0007h\u0002\u0002",
    "\u00af\u00b0\u0007q\u0002\u0002\u00b0\u00b1\u0007t\u0002\u0002\u00b1",
    "\"\u0003\u0002\u0002\u0002\u00b2\u00b3\u0007k\u0002\u0002\u00b3\u00b4",
    "\u0007p\u0002\u0002\u00b4$\u0003\u0002\u0002\u0002\u00b5\u00b6\u0007",
    "k\u0002\u0002\u00b6\u00b7\u0007h\u0002\u0002\u00b7&\u0003\u0002\u0002",
    "\u0002\u00b8\u00b9\u0007g\u0002\u0002\u00b9\u00ba\u0007n\u0002\u0002",
    "\u00ba\u00bb\u0007u\u0002\u0002\u00bb\u00bc\u0007g\u0002\u0002\u00bc",
    "(\u0003\u0002\u0002\u0002\u00bd\u00be\u0007n\u0002\u0002\u00be\u00bf",
    "\u0007q\u0002\u0002\u00bf\u00c0\u0007e\u0002\u0002\u00c0\u00c1\u0007",
    "c\u0002\u0002\u00c1\u00c2\u0007n\u0002\u0002\u00c2*\u0003\u0002\u0002",
    "\u0002\u00c3\u00c4\u0007e\u0002\u0002\u00c4\u00c5\u0007q\u0002\u0002",
    "\u00c5\u00c6\u0007p\u0002\u0002\u00c6\u00c7\u0007u\u0002\u0002\u00c7",
    "\u00c8\u0007v\u0002\u0002\u00c8\u00c9\u0007c\u0002\u0002\u00c9\u00ca",
    "\u0007p\u0002\u0002\u00ca\u00cb\u0007v\u0002\u0002\u00cb,\u0003\u0002",
    "\u0002\u0002\u00cc\u00cd\u0007~\u0002\u0002\u00cd\u00d1\u0007~\u0002",
    "\u0002\u00ce\u00cf\u0007q\u0002\u0002\u00cf\u00d1\u0007t\u0002\u0002",
    "\u00d0\u00cc\u0003\u0002\u0002\u0002\u00d0\u00ce\u0003\u0002\u0002\u0002",
    "\u00d1.\u0003\u0002\u0002\u0002\u00d2\u00d3\u0007(\u0002\u0002\u00d3",
    "\u00d8\u0007(\u0002\u0002\u00d4\u00d5\u0007c\u0002\u0002\u00d5\u00d6",
    "\u0007p\u0002\u0002\u00d6\u00d8\u0007f\u0002\u0002\u00d7\u00d2\u0003",
    "\u0002\u0002\u0002\u00d7\u00d4\u0003\u0002\u0002\u0002\u00d80\u0003",
    "\u0002\u0002\u0002\u00d9\u00de\u0007#\u0002\u0002\u00da\u00db\u0007",
    "p\u0002\u0002\u00db\u00dc\u0007q\u0002\u0002\u00dc\u00de\u0007v\u0002",
    "\u0002\u00dd\u00d9\u0003\u0002\u0002\u0002\u00dd\u00da\u0003\u0002\u0002",
    "\u0002\u00de2\u0003\u0002\u0002\u0002\u00df\u00e0\u0007]\u0002\u0002",
    "\u00e04\u0003\u0002\u0002\u0002\u00e1\u00e2\u0007_\u0002\u0002\u00e2",
    "6\u0003\u0002\u0002\u0002\u00e3\u00e5\u0005\t\u0005\u0002\u00e4\u00e3",
    "\u0003\u0002\u0002\u0002\u00e5\u00e6\u0003\u0002\u0002\u0002\u00e6\u00e4",
    "\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7\u00e8",
    "\u0003\u0002\u0002\u0002\u00e8\u00ec\u0005I%\u0002\u00e9\u00eb\u0005",
    "\t\u0005\u0002\u00ea\u00e9\u0003\u0002\u0002\u0002\u00eb\u00ee\u0003",
    "\u0002\u0002\u0002\u00ec\u00ea\u0003\u0002\u0002\u0002\u00ec\u00ed\u0003",
    "\u0002\u0002\u0002\u00ed\u00f8\u0003\u0002\u0002\u0002\u00ee\u00ec\u0003",
    "\u0002\u0002\u0002\u00ef\u00f1\t\u0005\u0002\u0002\u00f0\u00f2\t\u0006",
    "\u0002\u0002\u00f1\u00f0\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002",
    "\u0002\u0002\u00f2\u00f4\u0003\u0002\u0002\u0002\u00f3\u00f5\u0005\t",
    "\u0005\u0002\u00f4\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002",
    "\u0002\u0002\u00f6\u00f4\u0003\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002",
    "\u0002\u0002\u00f7\u00f9\u0003\u0002\u0002\u0002\u00f8\u00ef\u0003\u0002",
    "\u0002\u0002\u00f8\u00f9\u0003\u0002\u0002\u0002\u00f9\u011a\u0003\u0002",
    "\u0002\u0002\u00fa\u00fc\u0005I%\u0002\u00fb\u00fd\u0005\t\u0005\u0002",
    "\u00fc\u00fb\u0003\u0002\u0002\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002",
    "\u00fe\u00fc\u0003\u0002\u0002\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002",
    "\u00ff\u0109\u0003\u0002\u0002\u0002\u0100\u0102\t\u0005\u0002\u0002",
    "\u0101\u0103\t\u0006\u0002\u0002\u0102\u0101\u0003\u0002\u0002\u0002",
    "\u0102\u0103\u0003\u0002\u0002\u0002\u0103\u0105\u0003\u0002\u0002\u0002",
    "\u0104\u0106\u0005\t\u0005\u0002\u0105\u0104\u0003\u0002\u0002\u0002",
    "\u0106\u0107\u0003\u0002\u0002\u0002\u0107\u0105\u0003\u0002\u0002\u0002",
    "\u0107\u0108\u0003\u0002\u0002\u0002\u0108\u010a\u0003\u0002\u0002\u0002",
    "\u0109\u0100\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002",
    "\u010a\u011a\u0003\u0002\u0002\u0002\u010b\u010d\u0005\t\u0005\u0002",
    "\u010c\u010b\u0003\u0002\u0002\u0002\u010d\u010e\u0003\u0002\u0002\u0002",
    "\u010e\u010c\u0003\u0002\u0002\u0002\u010e\u010f\u0003\u0002\u0002\u0002",
    "\u010f\u0110\u0003\u0002\u0002\u0002\u0110\u0112\t\u0005\u0002\u0002",
    "\u0111\u0113\t\u0006\u0002\u0002\u0112\u0111\u0003\u0002\u0002\u0002",
    "\u0112\u0113\u0003\u0002\u0002\u0002\u0113\u0115\u0003\u0002\u0002\u0002",
    "\u0114\u0116\u0005\t\u0005\u0002\u0115\u0114\u0003\u0002\u0002\u0002",
    "\u0116\u0117\u0003\u0002\u0002\u0002\u0117\u0115\u0003\u0002\u0002\u0002",
    "\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u011a\u0003\u0002\u0002\u0002",
    "\u0119\u00e4\u0003\u0002\u0002\u0002\u0119\u00fa\u0003\u0002\u0002\u0002",
    "\u0119\u010c\u0003\u0002\u0002\u0002\u011a8\u0003\u0002\u0002\u0002",
    "\u011b\u011d\u0005\t\u0005\u0002\u011c\u011b\u0003\u0002\u0002\u0002",
    "\u011d\u011e\u0003\u0002\u0002\u0002\u011e\u011c\u0003\u0002\u0002\u0002",
    "\u011e\u011f\u0003\u0002\u0002\u0002\u011f:\u0003\u0002\u0002\u0002",
    "\u0120\u0122\t\u0007\u0002\u0002\u0121\u0120\u0003\u0002\u0002\u0002",
    "\u0122\u0125\u0003\u0002\u0002\u0002\u0123\u0121\u0003\u0002\u0002\u0002",
    "\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0128\u0003\u0002\u0002\u0002",
    "\u0125\u0123\u0003\u0002\u0002\u0002\u0126\u0129\u0005\u0005\u0003\u0002",
    "\u0127\u0129\u0005\u0007\u0004\u0002\u0128\u0126\u0003\u0002\u0002\u0002",
    "\u0128\u0127\u0003\u0002\u0002\u0002\u0129\u012d\u0003\u0002\u0002\u0002",
    "\u012a\u012c\t\b\u0002\u0002\u012b\u012a\u0003\u0002\u0002\u0002\u012c",
    "\u012f\u0003\u0002\u0002\u0002\u012d\u012b\u0003\u0002\u0002\u0002\u012d",
    "\u012e\u0003\u0002\u0002\u0002\u012e<\u0003\u0002\u0002\u0002\u012f",
    "\u012d\u0003\u0002\u0002\u0002\u0130\u0131\u0007-\u0002\u0002\u0131",
    ">\u0003\u0002\u0002\u0002\u0132\u0133\u0007/\u0002\u0002\u0133@\u0003",
    "\u0002\u0002\u0002\u0134\u0135\u0007,\u0002\u0002\u0135B\u0003\u0002",
    "\u0002\u0002\u0136\u0137\u00071\u0002\u0002\u0137D\u0003\u0002\u0002",
    "\u0002\u0138\u0139\u0007*\u0002\u0002\u0139F\u0003\u0002\u0002\u0002",
    "\u013a\u013b\u0007+\u0002\u0002\u013bH\u0003\u0002\u0002\u0002\u013c",
    "\u013d\u00070\u0002\u0002\u013dJ\u0003\u0002\u0002\u0002\u013e\u013f",
    "\u0007.\u0002\u0002\u013fL\u0003\u0002\u0002\u0002\u0140\u0141\u0007",
    "`\u0002\u0002\u0141N\u0003\u0002\u0002\u0002\u0142\u0143\u0007>\u0002",
    "\u0002\u0143P\u0003\u0002\u0002\u0002\u0144\u0145\u0007@\u0002\u0002",
    "\u0145R\u0003\u0002\u0002\u0002\u0146\u0147\u0007>\u0002\u0002\u0147",
    "\u0148\u0007?\u0002\u0002\u0148T\u0003\u0002\u0002\u0002\u0149\u014a",
    "\u0007@\u0002\u0002\u014a\u014b\u0007?\u0002\u0002\u014bV\u0003\u0002",
    "\u0002\u0002\u014c\u014d\u0007#\u0002\u0002\u014d\u014e\u0007?\u0002",
    "\u0002\u014eX\u0003\u0002\u0002\u0002\u014f\u0150\u0007?\u0002\u0002",
    "\u0150Z\u0003\u0002\u0002\u0002\u0151\u0152\u0007=\u0002\u0002\u0152",
    "\\\u0003\u0002\u0002\u0002\u0153\u0154\u0007<\u0002\u0002\u0154^\u0003",
    "\u0002\u0002\u0002\u0155\u0156\u0007}\u0002\u0002\u0156`\u0003\u0002",
    "\u0002\u0002\u0157\u0158\u0007\u007f\u0002\u0002\u0158b\u0003\u0002",
    "\u0002\u0002\u0159\u015a\u0007)\u0002\u0002\u015ad\u0003\u0002\u0002",
    "\u0002\u015b\u015c\u0007A\u0002\u0002\u015cf\u0003\u0002\u0002\u0002",
    "\u015d\u015f\u0007\u000f\u0002\u0002\u015e\u015d\u0003\u0002\u0002\u0002",
    "\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002",
    "\u0160\u0163\u0007\f\u0002\u0002\u0161\u0163\u0007\u000f\u0002\u0002",
    "\u0162\u015e\u0003\u0002\u0002\u0002\u0162\u0161\u0003\u0002\u0002\u0002",
    "\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0162\u0003\u0002\u0002\u0002",
    "\u0164\u0165\u0003\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002",
    "\u0166\u0167\b4\u0002\u0002\u0167h\u0003\u0002\u0002\u0002\u0168\u016a",
    "\t\t\u0002\u0002\u0169\u0168\u0003\u0002\u0002\u0002\u016a\u016b\u0003",
    "\u0002\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016b\u016c\u0003",
    "\u0002\u0002\u0002\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016e\b",
    "5\u0002\u0002\u016ej\u0003\u0002\u0002\u0002\u016f\u0170\u00071\u0002",
    "\u0002\u0170\u0171\u00071\u0002\u0002\u0171\u0175\u0003\u0002\u0002",
    "\u0002\u0172\u0174\n\n\u0002\u0002\u0173\u0172\u0003\u0002\u0002\u0002",
    "\u0174\u0177\u0003\u0002\u0002\u0002\u0175\u0173\u0003\u0002\u0002\u0002",
    "\u0175\u0176\u0003\u0002\u0002\u0002\u0176\u017d\u0003\u0002\u0002\u0002",
    "\u0177\u0175\u0003\u0002\u0002\u0002\u0178\u017a\u0007\u000f\u0002\u0002",
    "\u0179\u0178\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002",
    "\u017a\u017b\u0003\u0002\u0002\u0002\u017b\u017e\u0007\f\u0002\u0002",
    "\u017c\u017e\u0007t\u0002\u0002\u017d\u0179\u0003\u0002\u0002\u0002",
    "\u017d\u017c\u0003\u0002\u0002\u0002\u017e\u018b\u0003\u0002\u0002\u0002",
    "\u017f\u0180\u00071\u0002\u0002\u0180\u0181\u0007,\u0002\u0002\u0181",
    "\u0185\u0003\u0002\u0002\u0002\u0182\u0184\u000b\u0002\u0002\u0002\u0183",
    "\u0182\u0003\u0002\u0002\u0002\u0184\u0187\u0003\u0002\u0002\u0002\u0185",
    "\u0186\u0003\u0002\u0002\u0002\u0185\u0183\u0003\u0002\u0002\u0002\u0186",
    "\u0188\u0003\u0002\u0002\u0002\u0187\u0185\u0003\u0002\u0002\u0002\u0188",
    "\u0189\u0007,\u0002\u0002\u0189\u018b\u00071\u0002\u0002\u018a\u016f",
    "\u0003\u0002\u0002\u0002\u018a\u017f\u0003\u0002\u0002\u0002\u018b\u018c",
    "\u0003\u0002\u0002\u0002\u018c\u018d\b6\u0002\u0002\u018dl\u0003\u0002",
    "\u0002\u0002 \u0002\u00d0\u00d7\u00dd\u00e6\u00ec\u00f1\u00f6\u00f8",
    "\u00fe\u0102\u0107\u0109\u010e\u0112\u0117\u0119\u011e\u0123\u0128\u012d",
    "\u015e\u0162\u0164\u016b\u0175\u0179\u017d\u0185\u018a\u0003\b\u0002",
    "\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function odeGrammarLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

odeGrammarLexer.prototype = Object.create(antlr4.Lexer.prototype);
odeGrammarLexer.prototype.constructor = odeGrammarLexer;

Object.defineProperty(odeGrammarLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

odeGrammarLexer.EOF = antlr4.Token.EOF;
odeGrammarLexer.T__0 = 1;
odeGrammarLexer.T0 = 2;
odeGrammarLexer.SET = 3;
odeGrammarLexer.ON = 4;
odeGrammarLexer.FROM = 5;
odeGrammarLexer.DER = 6;
odeGrammarLexer.TERMINAL = 7;
odeGrammarLexer.TRUE = 8;
odeGrammarLexer.FALSE = 9;
odeGrammarLexer.SUM = 10;
odeGrammarLexer.MACRO = 11;
odeGrammarLexer.STATE = 12;
odeGrammarLexer.FOR = 13;
odeGrammarLexer.IN = 14;
odeGrammarLexer.IF = 15;
odeGrammarLexer.ELSE = 16;
odeGrammarLexer.LOCAL = 17;
odeGrammarLexer.CONSTANT = 18;
odeGrammarLexer.OR = 19;
odeGrammarLexer.AND = 20;
odeGrammarLexer.NOT = 21;
odeGrammarLexer.LSQR = 22;
odeGrammarLexer.RSQR = 23;
odeGrammarLexer.FLOAT = 24;
odeGrammarLexer.INT = 25;
odeGrammarLexer.ID = 26;
odeGrammarLexer.PLUS = 27;
odeGrammarLexer.MINUS = 28;
odeGrammarLexer.ASTERISK = 29;
odeGrammarLexer.DIVISION = 30;
odeGrammarLexer.LPAREN = 31;
odeGrammarLexer.RPAREN = 32;
odeGrammarLexer.DOT = 33;
odeGrammarLexer.COMMA = 34;
odeGrammarLexer.CARET = 35;
odeGrammarLexer.L = 36;
odeGrammarLexer.G = 37;
odeGrammarLexer.LE = 38;
odeGrammarLexer.GE = 39;
odeGrammarLexer.NE = 40;
odeGrammarLexer.E = 41;
odeGrammarLexer.SEMICOLON = 42;
odeGrammarLexer.COLON = 43;
odeGrammarLexer.LCRL = 44;
odeGrammarLexer.RCRL = 45;
odeGrammarLexer.APOSTROPHE = 46;
odeGrammarLexer.QUESTIONMARK = 47;
odeGrammarLexer.NEWLINE = 48;
odeGrammarLexer.WHITESPACE = 49;
odeGrammarLexer.COMMENT = 50;

odeGrammarLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

odeGrammarLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

odeGrammarLexer.prototype.literalNames = [ null, "'#'", "'(t0)'", "'set'", 
                                           "'on'", "'from'", "'der'", "'terminal'", 
                                           "'true'", "'false'", "'sum'", 
                                           "'macro'", "'state'", "'for'", 
                                           "'in'", "'if'", "'else'", "'local'", 
                                           "'constant'", null, null, null, 
                                           "'['", "']'", null, null, null, 
                                           "'+'", "'-'", "'*'", "'/'", "'('", 
                                           "')'", "'.'", "','", "'^'", "'<'", 
                                           "'>'", "'<='", "'>='", "'!='", 
                                           "'='", "';'", "':'", "'{'", "'}'", 
                                           "'''", "'?'" ];

odeGrammarLexer.prototype.symbolicNames = [ null, null, "T0", "SET", "ON", 
                                            "FROM", "DER", "TERMINAL", "TRUE", 
                                            "FALSE", "SUM", "MACRO", "STATE", 
                                            "FOR", "IN", "IF", "ELSE", "LOCAL", 
                                            "CONSTANT", "OR", "AND", "NOT", 
                                            "LSQR", "RSQR", "FLOAT", "INT", 
                                            "ID", "PLUS", "MINUS", "ASTERISK", 
                                            "DIVISION", "LPAREN", "RPAREN", 
                                            "DOT", "COMMA", "CARET", "L", 
                                            "G", "LE", "GE", "NE", "E", 
                                            "SEMICOLON", "COLON", "LCRL", 
                                            "RCRL", "APOSTROPHE", "QUESTIONMARK", 
                                            "NEWLINE", "WHITESPACE", "COMMENT" ];

odeGrammarLexer.prototype.ruleNames = [ "T__0", "LOWERCASE", "UPPERCASE", 
                                        "DIGIT", "T0", "SET", "ON", "FROM", 
                                        "DER", "TERMINAL", "TRUE", "FALSE", 
                                        "SUM", "MACRO", "STATE", "FOR", 
                                        "IN", "IF", "ELSE", "LOCAL", "CONSTANT", 
                                        "OR", "AND", "NOT", "LSQR", "RSQR", 
                                        "FLOAT", "INT", "ID", "PLUS", "MINUS", 
                                        "ASTERISK", "DIVISION", "LPAREN", 
                                        "RPAREN", "DOT", "COMMA", "CARET", 
                                        "L", "G", "LE", "GE", "NE", "E", 
                                        "SEMICOLON", "COLON", "LCRL", "RCRL", 
                                        "APOSTROPHE", "QUESTIONMARK", "NEWLINE", 
                                        "WHITESPACE", "COMMENT" ];

odeGrammarLexer.prototype.grammarFileName = "odeGrammar.g4";


exports.odeGrammarLexer = odeGrammarLexer;



/***/ }),

/***/ "./src/grammar/antlrOutput/odeGrammarParser.js":
/*!*****************************************************!*\
  !*** ./src/grammar/antlrOutput/odeGrammarParser.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from e:\projects\SolversJS\src\grammar\odeGrammar.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");
var odeGrammarVisitor = __webpack_require__(/*! ./odeGrammarVisitor */ "./src/grammar/antlrOutput/odeGrammarVisitor.js").odeGrammarVisitor;

var grammarFileName = "odeGrammar.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u00034\u0146\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0003\u0002\u0007\u00022\n\u0002\f\u0002\u000e\u0002",
    "5\u000b\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003<\n\u0003\u0003\u0004\u0007\u0004?\n\u0004\f\u0004",
    "\u000e\u0004B\u000b\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006L",
    "\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b\u0003",
    "\b\u0007\bT\n\b\f\b\u000e\bW\u000b\b\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t_\n\t\u0003\n\u0003\n\u0007\nc\n\n\f\n\u000e",
    "\nf\u000b\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0005\u000bp\n\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0007\fx\n\f\f\f\u000e\f",
    "{\u000b\f\u0003\f\u0005\f~\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0006",
    "\u000e\u008a\n\u000e\r\u000e\u000e\u000e\u008b\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f",
    "\u0095\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005",
    "\u0013\u00b3\n\u0013\u0003\u0014\u0005\u0014\u00b6\n\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u00bc\n\u0014\f\u0014",
    "\u000e\u0014\u00bf\u000b\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0007\u0014\u00c6\n\u0014\f\u0014\u000e\u0014\u00c9",
    "\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u00ce\n",
    "\u0015\f\u0015\u000e\u0015\u00d1\u000b\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u00e8\n\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u00f0\n\u0016",
    "\f\u0016\u000e\u0016\u00f3\u000b\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0108",
    "\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0007\u0017\u010f\n\u0017\f\u0017\u000e\u0017\u0112\u000b\u0017\u0003",
    "\u0017\u0005\u0017\u0115\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u012b\n\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u0136",
    "\n\u0017\f\u0017\u000e\u0017\u0139\u000b\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0007\u0018\u013e\n\u0018\f\u0018\u000e\u0018\u0141\u000b",
    "\u0018\u0003\u0018\u0005\u0018\u0144\n\u0018\u0003\u0018\u0002\u0004",
    "*,\u0019\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.\u0002\b\u0003\u0002\u001a\u001b\u0003\u0002",
    "&)\u0003\u0002*+\u0003\u0002\n\u000b\u0003\u0002\u001d\u001e\u0003\u0002",
    "\u001f \u0002\u0163\u00023\u0003\u0002\u0002\u0002\u0004;\u0003\u0002",
    "\u0002\u0002\u0006@\u0003\u0002\u0002\u0002\bC\u0003\u0002\u0002\u0002",
    "\nK\u0003\u0002\u0002\u0002\fM\u0003\u0002\u0002\u0002\u000eQ\u0003",
    "\u0002\u0002\u0002\u0010^\u0003\u0002\u0002\u0002\u0012`\u0003\u0002",
    "\u0002\u0002\u0014i\u0003\u0002\u0002\u0002\u0016}\u0003\u0002\u0002",
    "\u0002\u0018\u007f\u0003\u0002\u0002\u0002\u001a\u0083\u0003\u0002\u0002",
    "\u0002\u001c\u0094\u0003\u0002\u0002\u0002\u001e\u009b\u0003\u0002\u0002",
    "\u0002 \u00a1\u0003\u0002\u0002\u0002\"\u00a7\u0003\u0002\u0002\u0002",
    "$\u00b2\u0003\u0002\u0002\u0002&\u00b5\u0003\u0002\u0002\u0002(\u00ca",
    "\u0003\u0002\u0002\u0002*\u00e7\u0003\u0002\u0002\u0002,\u012a\u0003",
    "\u0002\u0002\u0002.\u0143\u0003\u0002\u0002\u000202\u0005\u0004\u0003",
    "\u000210\u0003\u0002\u0002\u000225\u0003\u0002\u0002\u000231\u0003\u0002",
    "\u0002\u000234\u0003\u0002\u0002\u00024\u0003\u0003\u0002\u0002\u0002",
    "53\u0003\u0002\u0002\u00026<\u0005\u001c\u000f\u00027<\u0005 \u0011",
    "\u00028<\u0005\"\u0012\u00029<\u0005\u0014\u000b\u0002:<\u0005\u001a",
    "\u000e\u0002;6\u0003\u0002\u0002\u0002;7\u0003\u0002\u0002\u0002;8\u0003",
    "\u0002\u0002\u0002;9\u0003\u0002\u0002\u0002;:\u0003\u0002\u0002\u0002",
    "<\u0005\u0003\u0002\u0002\u0002=?\u0005\n\u0006\u0002>=\u0003\u0002",
    "\u0002\u0002?B\u0003\u0002\u0002\u0002@>\u0003\u0002\u0002\u0002@A\u0003",
    "\u0002\u0002\u0002A\u0007\u0003\u0002\u0002\u0002B@\u0003\u0002\u0002",
    "\u0002CD\t\u0002\u0002\u0002D\t\u0003\u0002\u0002\u0002EL\u0005\u001c",
    "\u000f\u0002FL\u0005 \u0011\u0002GL\u0005\"\u0012\u0002HL\u0005\u0014",
    "\u000b\u0002IL\u0005\u001a\u000e\u0002JL\u0005&\u0014\u0002KE\u0003",
    "\u0002\u0002\u0002KF\u0003\u0002\u0002\u0002KG\u0003\u0002\u0002\u0002",
    "KH\u0003\u0002\u0002\u0002KI\u0003\u0002\u0002\u0002KJ\u0003\u0002\u0002",
    "\u0002L\u000b\u0003\u0002\u0002\u0002MN\u0007\u0018\u0002\u0002NO\u0005",
    ",\u0017\u0002OP\u0007\u0019\u0002\u0002P\r\u0003\u0002\u0002\u0002Q",
    "U\u0007\u001c\u0002\u0002RT\u0005\f\u0007\u0002SR\u0003\u0002\u0002",
    "\u0002TW\u0003\u0002\u0002\u0002US\u0003\u0002\u0002\u0002UV\u0003\u0002",
    "\u0002\u0002V\u000f\u0003\u0002\u0002\u0002WU\u0003\u0002\u0002\u0002",
    "X_\u0005\u001c\u000f\u0002Y_\u0005 \u0011\u0002Z_\u0005\u0014\u000b",
    "\u0002[_\u0005\"\u0012\u0002\\_\u0005\u001e\u0010\u0002]_\u0005\u001a",
    "\u000e\u0002^X\u0003\u0002\u0002\u0002^Y\u0003\u0002\u0002\u0002^Z\u0003",
    "\u0002\u0002\u0002^[\u0003\u0002\u0002\u0002^\\\u0003\u0002\u0002\u0002",
    "^]\u0003\u0002\u0002\u0002_\u0011\u0003\u0002\u0002\u0002`d\u0007.\u0002",
    "\u0002ac\u0005\u0010\t\u0002ba\u0003\u0002\u0002\u0002cf\u0003\u0002",
    "\u0002\u0002db\u0003\u0002\u0002\u0002de\u0003\u0002\u0002\u0002eg\u0003",
    "\u0002\u0002\u0002fd\u0003\u0002\u0002\u0002gh\u0007/\u0002\u0002h\u0013",
    "\u0003\u0002\u0002\u0002ij\u0007\r\u0002\u0002jo\u0005\u000e\b\u0002",
    "kl\u0007!\u0002\u0002lm\u0005\u0016\f\u0002mn\u0007\"\u0002\u0002np",
    "\u0003\u0002\u0002\u0002ok\u0003\u0002\u0002\u0002op\u0003\u0002\u0002",
    "\u0002pq\u0003\u0002\u0002\u0002qr\u0005,\u0017\u0002rs\u0007,\u0002",
    "\u0002s\u0015\u0003\u0002\u0002\u0002ty\u0007\u001c\u0002\u0002uv\u0007",
    "$\u0002\u0002vx\u0007\u001c\u0002\u0002wu\u0003\u0002\u0002\u0002x{",
    "\u0003\u0002\u0002\u0002yw\u0003\u0002\u0002\u0002yz\u0003\u0002\u0002",
    "\u0002z~\u0003\u0002\u0002\u0002{y\u0003\u0002\u0002\u0002|~\u0003\u0002",
    "\u0002\u0002}t\u0003\u0002\u0002\u0002}|\u0003\u0002\u0002\u0002~\u0017",
    "\u0003\u0002\u0002\u0002\u007f\u0080\u0007\u001b\u0002\u0002\u0080\u0081",
    "\u0007-\u0002\u0002\u0081\u0082\u0007\u001b\u0002\u0002\u0082\u0019",
    "\u0003\u0002\u0002\u0002\u0083\u0084\u0007\u000f\u0002\u0002\u0084\u0085",
    "\u0007!\u0002\u0002\u0085\u0086\u0007\u001c\u0002\u0002\u0086\u0087",
    "\u0007\u0010\u0002\u0002\u0087\u0089\u0007\u0018\u0002\u0002\u0088\u008a",
    "\u0005\u0018\r\u0002\u0089\u0088\u0003\u0002\u0002\u0002\u008a\u008b",
    "\u0003\u0002\u0002\u0002\u008b\u0089\u0003\u0002\u0002\u0002\u008b\u008c",
    "\u0003\u0002\u0002\u0002\u008c\u008d\u0003\u0002\u0002\u0002\u008d\u008e",
    "\u0007\u0019\u0002\u0002\u008e\u008f\u0007\"\u0002\u0002\u008f\u0090",
    "\u0005\u0012\n\u0002\u0090\u001b\u0003\u0002\u0002\u0002\u0091\u0092",
    "\u0005\u000e\b\u0002\u0092\u0093\u0007-\u0002\u0002\u0093\u0095\u0003",
    "\u0002\u0002\u0002\u0094\u0091\u0003\u0002\u0002\u0002\u0094\u0095\u0003",
    "\u0002\u0002\u0002\u0095\u0096\u0003\u0002\u0002\u0002\u0096\u0097\u0005",
    ",\u0017\u0002\u0097\u0098\u0007+\u0002\u0002\u0098\u0099\u0005,\u0017",
    "\u0002\u0099\u009a\u0007,\u0002\u0002\u009a\u001d\u0003\u0002\u0002",
    "\u0002\u009b\u009c\u0007\u0005\u0002\u0002\u009c\u009d\u0005\u000e\b",
    "\u0002\u009d\u009e\u0007+\u0002\u0002\u009e\u009f\u0005,\u0017\u0002",
    "\u009f\u00a0\u0007,\u0002\u0002\u00a0\u001f\u0003\u0002\u0002\u0002",
    "\u00a1\u00a2\u0005\u000e\b\u0002\u00a2\u00a3\u0007\u0004\u0002\u0002",
    "\u00a3\u00a4\u0007+\u0002\u0002\u00a4\u00a5\u0005,\u0017\u0002\u00a5",
    "\u00a6\u0007,\u0002\u0002\u00a6!\u0003\u0002\u0002\u0002\u00a7\u00a8",
    "\u0007\u0014\u0002\u0002\u00a8\u00a9\u0005\u000e\b\u0002\u00a9\u00aa",
    "\u0007+\u0002\u0002\u00aa\u00ab\u0005,\u0017\u0002\u00ab\u00ac\u0007",
    ",\u0002\u0002\u00ac#\u0003\u0002\u0002\u0002\u00ad\u00b3\u0005\u001c",
    "\u000f\u0002\u00ae\u00b3\u0005\u001e\u0010\u0002\u00af\u00b3\u0005\u001a",
    "\u000e\u0002\u00b0\u00b3\u0005\u0014\u000b\u0002\u00b1\u00b3\u0005\"",
    "\u0012\u0002\u00b2\u00ad\u0003\u0002\u0002\u0002\u00b2\u00ae\u0003\u0002",
    "\u0002\u0002\u00b2\u00af\u0003\u0002\u0002\u0002\u00b2\u00b0\u0003\u0002",
    "\u0002\u0002\u00b2\u00b1\u0003\u0002\u0002\u0002\u00b3%\u0003\u0002",
    "\u0002\u0002\u00b4\u00b6\u0007\t\u0002\u0002\u00b5\u00b4\u0003\u0002",
    "\u0002\u0002\u00b5\u00b6\u0003\u0002\u0002\u0002\u00b6\u00b7\u0003\u0002",
    "\u0002\u0002\u00b7\u00b8\u0007\u000e\u0002\u0002\u00b8\u00b9\u0007\u001c",
    "\u0002\u0002\u00b9\u00bd\u0007.\u0002\u0002\u00ba\u00bc\u0005$\u0013",
    "\u0002\u00bb\u00ba\u0003\u0002\u0002\u0002\u00bc\u00bf\u0003\u0002\u0002",
    "\u0002\u00bd\u00bb\u0003\u0002\u0002\u0002\u00bd\u00be\u0003\u0002\u0002",
    "\u0002\u00be\u00c0\u0003\u0002\u0002\u0002\u00bf\u00bd\u0003\u0002\u0002",
    "\u0002\u00c0\u00c1\u0007/\u0002\u0002\u00c1\u00c2\u0007\u0007\u0002",
    "\u0002\u00c2\u00c7\u0005(\u0015\u0002\u00c3\u00c4\u0007$\u0002\u0002",
    "\u00c4\u00c6\u0005(\u0015\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002",
    "\u00c6\u00c9\u0003\u0002\u0002\u0002\u00c7\u00c5\u0003\u0002\u0002\u0002",
    "\u00c7\u00c8\u0003\u0002\u0002\u0002\u00c8\'\u0003\u0002\u0002\u0002",
    "\u00c9\u00c7\u0003\u0002\u0002\u0002\u00ca\u00cf\u0007\u001c\u0002\u0002",
    "\u00cb\u00cc\u0007$\u0002\u0002\u00cc\u00ce\u0007\u001c\u0002\u0002",
    "\u00cd\u00cb\u0003\u0002\u0002\u0002\u00ce\u00d1\u0003\u0002\u0002\u0002",
    "\u00cf\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002",
    "\u00d0\u00d2\u0003\u0002\u0002\u0002\u00d1\u00cf\u0003\u0002\u0002\u0002",
    "\u00d2\u00d3\u0007\u0006\u0002\u0002\u00d3\u00d4\u0007!\u0002\u0002",
    "\u00d4\u00d5\u0005*\u0016\u0002\u00d5\u00d6\u0007\"\u0002\u0002\u00d6",
    ")\u0003\u0002\u0002\u0002\u00d7\u00d8\b\u0016\u0001\u0002\u00d8\u00d9",
    "\u0007!\u0002\u0002\u00d9\u00da\u0005*\u0016\u0002\u00da\u00db\u0007",
    "\"\u0002\u0002\u00db\u00e8\u0003\u0002\u0002\u0002\u00dc\u00dd\u0007",
    "\u0017\u0002\u0002\u00dd\u00e8\u0005*\u0016\b\u00de\u00df\u0005,\u0017",
    "\u0002\u00df\u00e0\t\u0003\u0002\u0002\u00e0\u00e1\u0005,\u0017\u0002",
    "\u00e1\u00e8\u0003\u0002\u0002\u0002\u00e2\u00e3\u0005,\u0017\u0002",
    "\u00e3\u00e4\t\u0004\u0002\u0002\u00e4\u00e5\u0005,\u0017\u0002\u00e5",
    "\u00e8\u0003\u0002\u0002\u0002\u00e6\u00e8\t\u0005\u0002\u0002\u00e7",
    "\u00d7\u0003\u0002\u0002\u0002\u00e7\u00dc\u0003\u0002\u0002\u0002\u00e7",
    "\u00de\u0003\u0002\u0002\u0002\u00e7\u00e2\u0003\u0002\u0002\u0002\u00e7",
    "\u00e6\u0003\u0002\u0002\u0002\u00e8\u00f1\u0003\u0002\u0002\u0002\u00e9",
    "\u00ea\f\u0005\u0002\u0002\u00ea\u00eb\u0007\u0016\u0002\u0002\u00eb",
    "\u00f0\u0005*\u0016\u0006\u00ec\u00ed\f\u0004\u0002\u0002\u00ed\u00ee",
    "\u0007\u0015\u0002\u0002\u00ee\u00f0\u0005*\u0016\u0005\u00ef\u00e9",
    "\u0003\u0002\u0002\u0002\u00ef\u00ec\u0003\u0002\u0002\u0002\u00f0\u00f3",
    "\u0003\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f2",
    "\u0003\u0002\u0002\u0002\u00f2+\u0003\u0002\u0002\u0002\u00f3\u00f1",
    "\u0003\u0002\u0002\u0002\u00f4\u00f5\b\u0017\u0001\u0002\u00f5\u00f6",
    "\u0007!\u0002\u0002\u00f6\u00f7\u0005,\u0017\u0002\u00f7\u00f8\u0007",
    "\"\u0002\u0002\u00f8\u012b\u0003\u0002\u0002\u0002\u00f9\u00fa\u0007",
    "\b\u0002\u0002\u00fa\u00fb\u0007!\u0002\u0002\u00fb\u00fc\u0005\u000e",
    "\b\u0002\u00fc\u00fd\u0007\"\u0002\u0002\u00fd\u012b\u0003\u0002\u0002",
    "\u0002\u00fe\u00ff\u0007\u001c\u0002\u0002\u00ff\u0100\u0007!\u0002",
    "\u0002\u0100\u0101\u0005.\u0018\u0002\u0101\u0102\u0007\"\u0002\u0002",
    "\u0102\u012b\u0003\u0002\u0002\u0002\u0103\u0104\t\u0006\u0002\u0002",
    "\u0104\u012b\u0005,\u0017\n\u0105\u0107\u0005\u000e\b\u0002\u0106\u0108",
    "\u00070\u0002\u0002\u0107\u0106\u0003\u0002\u0002\u0002\u0107\u0108",
    "\u0003\u0002\u0002\u0002\u0108\u012b\u0003\u0002\u0002\u0002\u0109\u012b",
    "\u0005\b\u0005\u0002\u010a\u010b\u0007\u0003\u0002\u0002\u010b\u0114",
    "\u0005\u000e\b\u0002\u010c\u0110\u0007!\u0002\u0002\u010d\u010f\u0005",
    ",\u0017\u0002\u010e\u010d\u0003\u0002\u0002\u0002\u010f\u0112\u0003",
    "\u0002\u0002\u0002\u0110\u010e\u0003\u0002\u0002\u0002\u0110\u0111\u0003",
    "\u0002\u0002\u0002\u0111\u0113\u0003\u0002\u0002\u0002\u0112\u0110\u0003",
    "\u0002\u0002\u0002\u0113\u0115\u0007\"\u0002\u0002\u0114\u010c\u0003",
    "\u0002\u0002\u0002\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u012b\u0003",
    "\u0002\u0002\u0002\u0116\u0117\u0007\f\u0002\u0002\u0117\u0118\u0007",
    "!\u0002\u0002\u0118\u0119\u0007\u001c\u0002\u0002\u0119\u011a\u0007",
    "\u0010\u0002\u0002\u011a\u011b\u0007\u0018\u0002\u0002\u011b\u011c\u0005",
    "\u0018\r\u0002\u011c\u011d\u0007\u0019\u0002\u0002\u011d\u011e\u0007",
    "\"\u0002\u0002\u011e\u011f\u0007.\u0002\u0002\u011f\u0120\u0005,\u0017",
    "\u0002\u0120\u0121\u0007/\u0002\u0002\u0121\u012b\u0003\u0002\u0002",
    "\u0002\u0122\u0123\u0007.\u0002\u0002\u0123\u0124\u0005*\u0016\u0002",
    "\u0124\u0125\u00071\u0002\u0002\u0125\u0126\u0005,\u0017\u0002\u0126",
    "\u0127\u0007-\u0002\u0002\u0127\u0128\u0005,\u0017\u0002\u0128\u0129",
    "\u0007/\u0002\u0002\u0129\u012b\u0003\u0002\u0002\u0002\u012a\u00f4",
    "\u0003\u0002\u0002\u0002\u012a\u00f9\u0003\u0002\u0002\u0002\u012a\u00fe",
    "\u0003\u0002\u0002\u0002\u012a\u0103\u0003\u0002\u0002\u0002\u012a\u0105",
    "\u0003\u0002\u0002\u0002\u012a\u0109\u0003\u0002\u0002\u0002\u012a\u010a",
    "\u0003\u0002\u0002\u0002\u012a\u0116\u0003\u0002\u0002\u0002\u012a\u0122",
    "\u0003\u0002\u0002\u0002\u012b\u0137\u0003\u0002\u0002\u0002\u012c\u012d",
    "\f\u000b\u0002\u0002\u012d\u012e\u0007%\u0002\u0002\u012e\u0136\u0005",
    ",\u0017\u000b\u012f\u0130\f\t\u0002\u0002\u0130\u0131\t\u0007\u0002",
    "\u0002\u0131\u0136\u0005,\u0017\n\u0132\u0133\f\b\u0002\u0002\u0133",
    "\u0134\t\u0006\u0002\u0002\u0134\u0136\u0005,\u0017\t\u0135\u012c\u0003",
    "\u0002\u0002\u0002\u0135\u012f\u0003\u0002\u0002\u0002\u0135\u0132\u0003",
    "\u0002\u0002\u0002\u0136\u0139\u0003\u0002\u0002\u0002\u0137\u0135\u0003",
    "\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002\u0138-\u0003",
    "\u0002\u0002\u0002\u0139\u0137\u0003\u0002\u0002\u0002\u013a\u013f\u0005",
    ",\u0017\u0002\u013b\u013c\u0007$\u0002\u0002\u013c\u013e\u0005,\u0017",
    "\u0002\u013d\u013b\u0003\u0002\u0002\u0002\u013e\u0141\u0003\u0002\u0002",
    "\u0002\u013f\u013d\u0003\u0002\u0002\u0002\u013f\u0140\u0003\u0002\u0002",
    "\u0002\u0140\u0144\u0003\u0002\u0002\u0002\u0141\u013f\u0003\u0002\u0002",
    "\u0002\u0142\u0144\u0003\u0002\u0002\u0002\u0143\u013a\u0003\u0002\u0002",
    "\u0002\u0143\u0142\u0003\u0002\u0002\u0002\u0144/\u0003\u0002\u0002",
    "\u0002\u001e3;@KU^doy}\u008b\u0094\u00b2\u00b5\u00bd\u00c7\u00cf\u00e7",
    "\u00ef\u00f1\u0107\u0110\u0114\u012a\u0135\u0137\u013f\u0143"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'#'", "'(t0)'", "'set'", "'on'", "'from'", "'der'", 
                     "'terminal'", "'true'", "'false'", "'sum'", "'macro'", 
                     "'state'", "'for'", "'in'", "'if'", "'else'", "'local'", 
                     "'constant'", null, null, null, "'['", "']'", null, 
                     null, null, "'+'", "'-'", "'*'", "'/'", "'('", "')'", 
                     "'.'", "','", "'^'", "'<'", "'>'", "'<='", "'>='", 
                     "'!='", "'='", "';'", "':'", "'{'", "'}'", "'''", "'?'" ];

var symbolicNames = [ null, null, "T0", "SET", "ON", "FROM", "DER", "TERMINAL", 
                      "TRUE", "FALSE", "SUM", "MACRO", "STATE", "FOR", "IN", 
                      "IF", "ELSE", "LOCAL", "CONSTANT", "OR", "AND", "NOT", 
                      "LSQR", "RSQR", "FLOAT", "INT", "ID", "PLUS", "MINUS", 
                      "ASTERISK", "DIVISION", "LPAREN", "RPAREN", "DOT", 
                      "COMMA", "CARET", "L", "G", "LE", "GE", "NE", "E", 
                      "SEMICOLON", "COLON", "LCRL", "RCRL", "APOSTROPHE", 
                      "QUESTIONMARK", "NEWLINE", "WHITESPACE", "COMMENT" ];

var ruleNames =  [ "dae", "daeStatement", "hybrid", "number", "hybridStatement", 
                   "index", "varIdentifier", "loopStatement", "loopBody", 
                   "macroStatement", "macroArguments", "loopBounds", "loop", 
                   "equation", "setter", "initialCondition", "constantStatement", 
                   "stateStatement", "stateDef", "stateTransition", "boolExpression", 
                   "expression", "functionArguments" ];

function odeGrammarParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

odeGrammarParser.prototype = Object.create(antlr4.Parser.prototype);
odeGrammarParser.prototype.constructor = odeGrammarParser;

Object.defineProperty(odeGrammarParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

odeGrammarParser.EOF = antlr4.Token.EOF;
odeGrammarParser.T__0 = 1;
odeGrammarParser.T0 = 2;
odeGrammarParser.SET = 3;
odeGrammarParser.ON = 4;
odeGrammarParser.FROM = 5;
odeGrammarParser.DER = 6;
odeGrammarParser.TERMINAL = 7;
odeGrammarParser.TRUE = 8;
odeGrammarParser.FALSE = 9;
odeGrammarParser.SUM = 10;
odeGrammarParser.MACRO = 11;
odeGrammarParser.STATE = 12;
odeGrammarParser.FOR = 13;
odeGrammarParser.IN = 14;
odeGrammarParser.IF = 15;
odeGrammarParser.ELSE = 16;
odeGrammarParser.LOCAL = 17;
odeGrammarParser.CONSTANT = 18;
odeGrammarParser.OR = 19;
odeGrammarParser.AND = 20;
odeGrammarParser.NOT = 21;
odeGrammarParser.LSQR = 22;
odeGrammarParser.RSQR = 23;
odeGrammarParser.FLOAT = 24;
odeGrammarParser.INT = 25;
odeGrammarParser.ID = 26;
odeGrammarParser.PLUS = 27;
odeGrammarParser.MINUS = 28;
odeGrammarParser.ASTERISK = 29;
odeGrammarParser.DIVISION = 30;
odeGrammarParser.LPAREN = 31;
odeGrammarParser.RPAREN = 32;
odeGrammarParser.DOT = 33;
odeGrammarParser.COMMA = 34;
odeGrammarParser.CARET = 35;
odeGrammarParser.L = 36;
odeGrammarParser.G = 37;
odeGrammarParser.LE = 38;
odeGrammarParser.GE = 39;
odeGrammarParser.NE = 40;
odeGrammarParser.E = 41;
odeGrammarParser.SEMICOLON = 42;
odeGrammarParser.COLON = 43;
odeGrammarParser.LCRL = 44;
odeGrammarParser.RCRL = 45;
odeGrammarParser.APOSTROPHE = 46;
odeGrammarParser.QUESTIONMARK = 47;
odeGrammarParser.NEWLINE = 48;
odeGrammarParser.WHITESPACE = 49;
odeGrammarParser.COMMENT = 50;

odeGrammarParser.RULE_dae = 0;
odeGrammarParser.RULE_daeStatement = 1;
odeGrammarParser.RULE_hybrid = 2;
odeGrammarParser.RULE_number = 3;
odeGrammarParser.RULE_hybridStatement = 4;
odeGrammarParser.RULE_index = 5;
odeGrammarParser.RULE_varIdentifier = 6;
odeGrammarParser.RULE_loopStatement = 7;
odeGrammarParser.RULE_loopBody = 8;
odeGrammarParser.RULE_macroStatement = 9;
odeGrammarParser.RULE_macroArguments = 10;
odeGrammarParser.RULE_loopBounds = 11;
odeGrammarParser.RULE_loop = 12;
odeGrammarParser.RULE_equation = 13;
odeGrammarParser.RULE_setter = 14;
odeGrammarParser.RULE_initialCondition = 15;
odeGrammarParser.RULE_constantStatement = 16;
odeGrammarParser.RULE_stateStatement = 17;
odeGrammarParser.RULE_stateDef = 18;
odeGrammarParser.RULE_stateTransition = 19;
odeGrammarParser.RULE_boolExpression = 20;
odeGrammarParser.RULE_expression = 21;
odeGrammarParser.RULE_functionArguments = 22;


function DaeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_dae;
    return this;
}

DaeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DaeContext.prototype.constructor = DaeContext;

DaeContext.prototype.daeStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DaeStatementContext);
    } else {
        return this.getTypedRuleContext(DaeStatementContext,i);
    }
};

DaeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitDae(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.DaeContext = DaeContext;

odeGrammarParser.prototype.dae = function() {

    var localctx = new DaeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, odeGrammarParser.RULE_dae);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 49;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << odeGrammarParser.T__0) | (1 << odeGrammarParser.DER) | (1 << odeGrammarParser.SUM) | (1 << odeGrammarParser.MACRO) | (1 << odeGrammarParser.FOR) | (1 << odeGrammarParser.CONSTANT) | (1 << odeGrammarParser.FLOAT) | (1 << odeGrammarParser.INT) | (1 << odeGrammarParser.ID) | (1 << odeGrammarParser.PLUS) | (1 << odeGrammarParser.MINUS) | (1 << odeGrammarParser.LPAREN))) !== 0) || _la===odeGrammarParser.LCRL) {
            this.state = 46;
            this.daeStatement();
            this.state = 51;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DaeStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_daeStatement;
    return this;
}

DaeStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DaeStatementContext.prototype.constructor = DaeStatementContext;

DaeStatementContext.prototype.equation = function() {
    return this.getTypedRuleContext(EquationContext,0);
};

DaeStatementContext.prototype.initialCondition = function() {
    return this.getTypedRuleContext(InitialConditionContext,0);
};

DaeStatementContext.prototype.constantStatement = function() {
    return this.getTypedRuleContext(ConstantStatementContext,0);
};

DaeStatementContext.prototype.macroStatement = function() {
    return this.getTypedRuleContext(MacroStatementContext,0);
};

DaeStatementContext.prototype.loop = function() {
    return this.getTypedRuleContext(LoopContext,0);
};

DaeStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitDaeStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.DaeStatementContext = DaeStatementContext;

odeGrammarParser.prototype.daeStatement = function() {

    var localctx = new DaeStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, odeGrammarParser.RULE_daeStatement);
    try {
        this.state = 57;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 52;
            this.equation();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 53;
            this.initialCondition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 54;
            this.constantStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 55;
            this.macroStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 56;
            this.loop();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HybridContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_hybrid;
    return this;
}

HybridContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HybridContext.prototype.constructor = HybridContext;

HybridContext.prototype.hybridStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HybridStatementContext);
    } else {
        return this.getTypedRuleContext(HybridStatementContext,i);
    }
};

HybridContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitHybrid(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.HybridContext = HybridContext;

odeGrammarParser.prototype.hybrid = function() {

    var localctx = new HybridContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, odeGrammarParser.RULE_hybrid);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 62;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << odeGrammarParser.T__0) | (1 << odeGrammarParser.DER) | (1 << odeGrammarParser.TERMINAL) | (1 << odeGrammarParser.SUM) | (1 << odeGrammarParser.MACRO) | (1 << odeGrammarParser.STATE) | (1 << odeGrammarParser.FOR) | (1 << odeGrammarParser.CONSTANT) | (1 << odeGrammarParser.FLOAT) | (1 << odeGrammarParser.INT) | (1 << odeGrammarParser.ID) | (1 << odeGrammarParser.PLUS) | (1 << odeGrammarParser.MINUS) | (1 << odeGrammarParser.LPAREN))) !== 0) || _la===odeGrammarParser.LCRL) {
            this.state = 59;
            this.hybridStatement();
            this.state = 64;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_number;
    this.value = null; // Token
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.FLOAT = function() {
    return this.getToken(odeGrammarParser.FLOAT, 0);
};

NumberContext.prototype.INT = function() {
    return this.getToken(odeGrammarParser.INT, 0);
};

NumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitNumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.NumberContext = NumberContext;

odeGrammarParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, odeGrammarParser.RULE_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 65;
        localctx.value = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===odeGrammarParser.FLOAT || _la===odeGrammarParser.INT)) {
            localctx.value = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HybridStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_hybridStatement;
    return this;
}

HybridStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HybridStatementContext.prototype.constructor = HybridStatementContext;

HybridStatementContext.prototype.equation = function() {
    return this.getTypedRuleContext(EquationContext,0);
};

HybridStatementContext.prototype.initialCondition = function() {
    return this.getTypedRuleContext(InitialConditionContext,0);
};

HybridStatementContext.prototype.constantStatement = function() {
    return this.getTypedRuleContext(ConstantStatementContext,0);
};

HybridStatementContext.prototype.macroStatement = function() {
    return this.getTypedRuleContext(MacroStatementContext,0);
};

HybridStatementContext.prototype.loop = function() {
    return this.getTypedRuleContext(LoopContext,0);
};

HybridStatementContext.prototype.stateDef = function() {
    return this.getTypedRuleContext(StateDefContext,0);
};

HybridStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitHybridStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.HybridStatementContext = HybridStatementContext;

odeGrammarParser.prototype.hybridStatement = function() {

    var localctx = new HybridStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, odeGrammarParser.RULE_hybridStatement);
    try {
        this.state = 73;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 67;
            this.equation();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 68;
            this.initialCondition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 69;
            this.constantStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 70;
            this.macroStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 71;
            this.loop();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 72;
            this.stateDef();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IndexContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_index;
    this.exp = null; // ExpressionContext
    return this;
}

IndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexContext.prototype.constructor = IndexContext;

IndexContext.prototype.LSQR = function() {
    return this.getToken(odeGrammarParser.LSQR, 0);
};

IndexContext.prototype.RSQR = function() {
    return this.getToken(odeGrammarParser.RSQR, 0);
};

IndexContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.IndexContext = IndexContext;

odeGrammarParser.prototype.index = function() {

    var localctx = new IndexContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, odeGrammarParser.RULE_index);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 75;
        this.match(odeGrammarParser.LSQR);
        this.state = 76;
        localctx.exp = this.expression(0);
        this.state = 77;
        this.match(odeGrammarParser.RSQR);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function VarIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_varIdentifier;
    this.id = null; // Token
    return this;
}

VarIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarIdentifierContext.prototype.constructor = VarIdentifierContext;

VarIdentifierContext.prototype.ID = function() {
    return this.getToken(odeGrammarParser.ID, 0);
};

VarIdentifierContext.prototype.index = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexContext);
    } else {
        return this.getTypedRuleContext(IndexContext,i);
    }
};

VarIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitVarIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.VarIdentifierContext = VarIdentifierContext;

odeGrammarParser.prototype.varIdentifier = function() {

    var localctx = new VarIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, odeGrammarParser.RULE_varIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 79;
        localctx.id = this.match(odeGrammarParser.ID);
        this.state = 83;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 80;
                this.index(); 
            }
            this.state = 85;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoopStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_loopStatement;
    return this;
}

LoopStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopStatementContext.prototype.constructor = LoopStatementContext;

LoopStatementContext.prototype.equation = function() {
    return this.getTypedRuleContext(EquationContext,0);
};

LoopStatementContext.prototype.initialCondition = function() {
    return this.getTypedRuleContext(InitialConditionContext,0);
};

LoopStatementContext.prototype.macroStatement = function() {
    return this.getTypedRuleContext(MacroStatementContext,0);
};

LoopStatementContext.prototype.constantStatement = function() {
    return this.getTypedRuleContext(ConstantStatementContext,0);
};

LoopStatementContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

LoopStatementContext.prototype.loop = function() {
    return this.getTypedRuleContext(LoopContext,0);
};

LoopStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitLoopStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.LoopStatementContext = LoopStatementContext;

odeGrammarParser.prototype.loopStatement = function() {

    var localctx = new LoopStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, odeGrammarParser.RULE_loopStatement);
    try {
        this.state = 92;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 86;
            this.equation();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 87;
            this.initialCondition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 88;
            this.macroStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 89;
            this.constantStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 90;
            this.setter();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 91;
            this.loop();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoopBodyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_loopBody;
    return this;
}

LoopBodyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopBodyContext.prototype.constructor = LoopBodyContext;

LoopBodyContext.prototype.LCRL = function() {
    return this.getToken(odeGrammarParser.LCRL, 0);
};

LoopBodyContext.prototype.RCRL = function() {
    return this.getToken(odeGrammarParser.RCRL, 0);
};

LoopBodyContext.prototype.loopStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LoopStatementContext);
    } else {
        return this.getTypedRuleContext(LoopStatementContext,i);
    }
};

LoopBodyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitLoopBody(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.LoopBodyContext = LoopBodyContext;

odeGrammarParser.prototype.loopBody = function() {

    var localctx = new LoopBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, odeGrammarParser.RULE_loopBody);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 94;
        this.match(odeGrammarParser.LCRL);
        this.state = 98;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << odeGrammarParser.T__0) | (1 << odeGrammarParser.SET) | (1 << odeGrammarParser.DER) | (1 << odeGrammarParser.SUM) | (1 << odeGrammarParser.MACRO) | (1 << odeGrammarParser.FOR) | (1 << odeGrammarParser.CONSTANT) | (1 << odeGrammarParser.FLOAT) | (1 << odeGrammarParser.INT) | (1 << odeGrammarParser.ID) | (1 << odeGrammarParser.PLUS) | (1 << odeGrammarParser.MINUS) | (1 << odeGrammarParser.LPAREN))) !== 0) || _la===odeGrammarParser.LCRL) {
            this.state = 95;
            this.loopStatement();
            this.state = 100;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 101;
        this.match(odeGrammarParser.RCRL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MacroStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_macroStatement;
    this.id = null; // VarIdentifierContext
    this.exp = null; // ExpressionContext
    return this;
}

MacroStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MacroStatementContext.prototype.constructor = MacroStatementContext;

MacroStatementContext.prototype.MACRO = function() {
    return this.getToken(odeGrammarParser.MACRO, 0);
};

MacroStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(odeGrammarParser.SEMICOLON, 0);
};

MacroStatementContext.prototype.varIdentifier = function() {
    return this.getTypedRuleContext(VarIdentifierContext,0);
};

MacroStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MacroStatementContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

MacroStatementContext.prototype.macroArguments = function() {
    return this.getTypedRuleContext(MacroArgumentsContext,0);
};

MacroStatementContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};

MacroStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitMacroStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.MacroStatementContext = MacroStatementContext;

odeGrammarParser.prototype.macroStatement = function() {

    var localctx = new MacroStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, odeGrammarParser.RULE_macroStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 103;
        this.match(odeGrammarParser.MACRO);
        this.state = 104;
        localctx.id = this.varIdentifier();
        this.state = 109;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        if(la_===1) {
            this.state = 105;
            this.match(odeGrammarParser.LPAREN);
            this.state = 106;
            this.macroArguments();
            this.state = 107;
            this.match(odeGrammarParser.RPAREN);

        }
        this.state = 111;
        localctx.exp = this.expression(0);
        this.state = 112;
        this.match(odeGrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function MacroArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_macroArguments;
    return this;
}

MacroArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MacroArgumentsContext.prototype.constructor = MacroArgumentsContext;

MacroArgumentsContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(odeGrammarParser.ID);
    } else {
        return this.getToken(odeGrammarParser.ID, i);
    }
};


MacroArgumentsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(odeGrammarParser.COMMA);
    } else {
        return this.getToken(odeGrammarParser.COMMA, i);
    }
};


MacroArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitMacroArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.MacroArgumentsContext = MacroArgumentsContext;

odeGrammarParser.prototype.macroArguments = function() {

    var localctx = new MacroArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, odeGrammarParser.RULE_macroArguments);
    var _la = 0; // Token type
    try {
        this.state = 123;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case odeGrammarParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 114;
            this.match(odeGrammarParser.ID);
            this.state = 119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===odeGrammarParser.COMMA) {
                this.state = 115;
                this.match(odeGrammarParser.COMMA);
                this.state = 116;
                this.match(odeGrammarParser.ID);
                this.state = 121;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case odeGrammarParser.RPAREN:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoopBoundsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_loopBounds;
    this.lbound = null; // Token
    this.rbound = null; // Token
    return this;
}

LoopBoundsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopBoundsContext.prototype.constructor = LoopBoundsContext;

LoopBoundsContext.prototype.COLON = function() {
    return this.getToken(odeGrammarParser.COLON, 0);
};

LoopBoundsContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(odeGrammarParser.INT);
    } else {
        return this.getToken(odeGrammarParser.INT, i);
    }
};


LoopBoundsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitLoopBounds(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.LoopBoundsContext = LoopBoundsContext;

odeGrammarParser.prototype.loopBounds = function() {

    var localctx = new LoopBoundsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, odeGrammarParser.RULE_loopBounds);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 125;
        localctx.lbound = this.match(odeGrammarParser.INT);
        this.state = 126;
        this.match(odeGrammarParser.COLON);
        this.state = 127;
        localctx.rbound = this.match(odeGrammarParser.INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LoopContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_loop;
    this.iterator = null; // Token
    return this;
}

LoopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoopContext.prototype.constructor = LoopContext;

LoopContext.prototype.FOR = function() {
    return this.getToken(odeGrammarParser.FOR, 0);
};

LoopContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

LoopContext.prototype.IN = function() {
    return this.getToken(odeGrammarParser.IN, 0);
};

LoopContext.prototype.LSQR = function() {
    return this.getToken(odeGrammarParser.LSQR, 0);
};

LoopContext.prototype.RSQR = function() {
    return this.getToken(odeGrammarParser.RSQR, 0);
};

LoopContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};

LoopContext.prototype.loopBody = function() {
    return this.getTypedRuleContext(LoopBodyContext,0);
};

LoopContext.prototype.ID = function() {
    return this.getToken(odeGrammarParser.ID, 0);
};

LoopContext.prototype.loopBounds = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LoopBoundsContext);
    } else {
        return this.getTypedRuleContext(LoopBoundsContext,i);
    }
};

LoopContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitLoop(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.LoopContext = LoopContext;

odeGrammarParser.prototype.loop = function() {

    var localctx = new LoopContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, odeGrammarParser.RULE_loop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 129;
        this.match(odeGrammarParser.FOR);
        this.state = 130;
        this.match(odeGrammarParser.LPAREN);
        this.state = 131;
        localctx.iterator = this.match(odeGrammarParser.ID);
        this.state = 132;
        this.match(odeGrammarParser.IN);
        this.state = 133;
        this.match(odeGrammarParser.LSQR);
        this.state = 135; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 134;
            this.loopBounds();
            this.state = 137; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===odeGrammarParser.INT);
        this.state = 139;
        this.match(odeGrammarParser.RSQR);
        this.state = 140;
        this.match(odeGrammarParser.RPAREN);
        this.state = 141;
        this.loopBody();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EquationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_equation;
    this.label = null; // VarIdentifierContext
    this.left = null; // ExpressionContext
    this.right = null; // ExpressionContext
    return this;
}

EquationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EquationContext.prototype.constructor = EquationContext;

EquationContext.prototype.E = function() {
    return this.getToken(odeGrammarParser.E, 0);
};

EquationContext.prototype.SEMICOLON = function() {
    return this.getToken(odeGrammarParser.SEMICOLON, 0);
};

EquationContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

EquationContext.prototype.COLON = function() {
    return this.getToken(odeGrammarParser.COLON, 0);
};

EquationContext.prototype.varIdentifier = function() {
    return this.getTypedRuleContext(VarIdentifierContext,0);
};

EquationContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitEquation(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.EquationContext = EquationContext;

odeGrammarParser.prototype.equation = function() {

    var localctx = new EquationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, odeGrammarParser.RULE_equation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 146;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        if(la_===1) {
            this.state = 143;
            localctx.label = this.varIdentifier();
            this.state = 144;
            this.match(odeGrammarParser.COLON);

        }
        this.state = 148;
        localctx.left = this.expression(0);
        this.state = 149;
        this.match(odeGrammarParser.E);
        this.state = 150;
        localctx.right = this.expression(0);
        this.state = 151;
        this.match(odeGrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_setter;
    this.variable = null; // VarIdentifierContext
    this.exp = null; // ExpressionContext
    return this;
}

SetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetterContext.prototype.constructor = SetterContext;

SetterContext.prototype.SET = function() {
    return this.getToken(odeGrammarParser.SET, 0);
};

SetterContext.prototype.E = function() {
    return this.getToken(odeGrammarParser.E, 0);
};

SetterContext.prototype.SEMICOLON = function() {
    return this.getToken(odeGrammarParser.SEMICOLON, 0);
};

SetterContext.prototype.varIdentifier = function() {
    return this.getTypedRuleContext(VarIdentifierContext,0);
};

SetterContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SetterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitSetter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.SetterContext = SetterContext;

odeGrammarParser.prototype.setter = function() {

    var localctx = new SetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, odeGrammarParser.RULE_setter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 153;
        this.match(odeGrammarParser.SET);
        this.state = 154;
        localctx.variable = this.varIdentifier();
        this.state = 155;
        this.match(odeGrammarParser.E);
        this.state = 156;
        localctx.exp = this.expression(0);
        this.state = 157;
        this.match(odeGrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InitialConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_initialCondition;
    this.variable = null; // VarIdentifierContext
    this.exp = null; // ExpressionContext
    return this;
}

InitialConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitialConditionContext.prototype.constructor = InitialConditionContext;

InitialConditionContext.prototype.T0 = function() {
    return this.getToken(odeGrammarParser.T0, 0);
};

InitialConditionContext.prototype.E = function() {
    return this.getToken(odeGrammarParser.E, 0);
};

InitialConditionContext.prototype.SEMICOLON = function() {
    return this.getToken(odeGrammarParser.SEMICOLON, 0);
};

InitialConditionContext.prototype.varIdentifier = function() {
    return this.getTypedRuleContext(VarIdentifierContext,0);
};

InitialConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

InitialConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitInitialCondition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.InitialConditionContext = InitialConditionContext;

odeGrammarParser.prototype.initialCondition = function() {

    var localctx = new InitialConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, odeGrammarParser.RULE_initialCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 159;
        localctx.variable = this.varIdentifier();
        this.state = 160;
        this.match(odeGrammarParser.T0);
        this.state = 161;
        this.match(odeGrammarParser.E);
        this.state = 162;
        localctx.exp = this.expression(0);
        this.state = 163;
        this.match(odeGrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ConstantStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_constantStatement;
    this.constant = null; // VarIdentifierContext
    this.exp = null; // ExpressionContext
    return this;
}

ConstantStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantStatementContext.prototype.constructor = ConstantStatementContext;

ConstantStatementContext.prototype.CONSTANT = function() {
    return this.getToken(odeGrammarParser.CONSTANT, 0);
};

ConstantStatementContext.prototype.E = function() {
    return this.getToken(odeGrammarParser.E, 0);
};

ConstantStatementContext.prototype.SEMICOLON = function() {
    return this.getToken(odeGrammarParser.SEMICOLON, 0);
};

ConstantStatementContext.prototype.varIdentifier = function() {
    return this.getTypedRuleContext(VarIdentifierContext,0);
};

ConstantStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstantStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitConstantStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.ConstantStatementContext = ConstantStatementContext;

odeGrammarParser.prototype.constantStatement = function() {

    var localctx = new ConstantStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, odeGrammarParser.RULE_constantStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 165;
        this.match(odeGrammarParser.CONSTANT);
        this.state = 166;
        localctx.constant = this.varIdentifier();
        this.state = 167;
        this.match(odeGrammarParser.E);
        this.state = 168;
        localctx.exp = this.expression(0);
        this.state = 169;
        this.match(odeGrammarParser.SEMICOLON);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_stateStatement;
    return this;
}

StateStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateStatementContext.prototype.constructor = StateStatementContext;

StateStatementContext.prototype.equation = function() {
    return this.getTypedRuleContext(EquationContext,0);
};

StateStatementContext.prototype.setter = function() {
    return this.getTypedRuleContext(SetterContext,0);
};

StateStatementContext.prototype.loop = function() {
    return this.getTypedRuleContext(LoopContext,0);
};

StateStatementContext.prototype.macroStatement = function() {
    return this.getTypedRuleContext(MacroStatementContext,0);
};

StateStatementContext.prototype.constantStatement = function() {
    return this.getTypedRuleContext(ConstantStatementContext,0);
};

StateStatementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitStateStatement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.StateStatementContext = StateStatementContext;

odeGrammarParser.prototype.stateStatement = function() {

    var localctx = new StateStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, odeGrammarParser.RULE_stateStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 176;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case odeGrammarParser.T__0:
        case odeGrammarParser.DER:
        case odeGrammarParser.SUM:
        case odeGrammarParser.FLOAT:
        case odeGrammarParser.INT:
        case odeGrammarParser.ID:
        case odeGrammarParser.PLUS:
        case odeGrammarParser.MINUS:
        case odeGrammarParser.LPAREN:
        case odeGrammarParser.LCRL:
            this.state = 171;
            this.equation();
            break;
        case odeGrammarParser.SET:
            this.state = 172;
            this.setter();
            break;
        case odeGrammarParser.FOR:
            this.state = 173;
            this.loop();
            break;
        case odeGrammarParser.MACRO:
            this.state = 174;
            this.macroStatement();
            break;
        case odeGrammarParser.CONSTANT:
            this.state = 175;
            this.constantStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_stateDef;
    this.name = null; // Token
    return this;
}

StateDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateDefContext.prototype.constructor = StateDefContext;

StateDefContext.prototype.STATE = function() {
    return this.getToken(odeGrammarParser.STATE, 0);
};

StateDefContext.prototype.LCRL = function() {
    return this.getToken(odeGrammarParser.LCRL, 0);
};

StateDefContext.prototype.RCRL = function() {
    return this.getToken(odeGrammarParser.RCRL, 0);
};

StateDefContext.prototype.FROM = function() {
    return this.getToken(odeGrammarParser.FROM, 0);
};

StateDefContext.prototype.stateTransition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateTransitionContext);
    } else {
        return this.getTypedRuleContext(StateTransitionContext,i);
    }
};

StateDefContext.prototype.ID = function() {
    return this.getToken(odeGrammarParser.ID, 0);
};

StateDefContext.prototype.TERMINAL = function() {
    return this.getToken(odeGrammarParser.TERMINAL, 0);
};

StateDefContext.prototype.stateStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateStatementContext);
    } else {
        return this.getTypedRuleContext(StateStatementContext,i);
    }
};

StateDefContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(odeGrammarParser.COMMA);
    } else {
        return this.getToken(odeGrammarParser.COMMA, i);
    }
};


StateDefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitStateDef(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.StateDefContext = StateDefContext;

odeGrammarParser.prototype.stateDef = function() {

    var localctx = new StateDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, odeGrammarParser.RULE_stateDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 179;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===odeGrammarParser.TERMINAL) {
            this.state = 178;
            this.match(odeGrammarParser.TERMINAL);
        }

        this.state = 181;
        this.match(odeGrammarParser.STATE);
        this.state = 182;
        localctx.name = this.match(odeGrammarParser.ID);
        this.state = 183;
        this.match(odeGrammarParser.LCRL);
        this.state = 187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << odeGrammarParser.T__0) | (1 << odeGrammarParser.SET) | (1 << odeGrammarParser.DER) | (1 << odeGrammarParser.SUM) | (1 << odeGrammarParser.MACRO) | (1 << odeGrammarParser.FOR) | (1 << odeGrammarParser.CONSTANT) | (1 << odeGrammarParser.FLOAT) | (1 << odeGrammarParser.INT) | (1 << odeGrammarParser.ID) | (1 << odeGrammarParser.PLUS) | (1 << odeGrammarParser.MINUS) | (1 << odeGrammarParser.LPAREN))) !== 0) || _la===odeGrammarParser.LCRL) {
            this.state = 184;
            this.stateStatement();
            this.state = 189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 190;
        this.match(odeGrammarParser.RCRL);
        this.state = 191;
        this.match(odeGrammarParser.FROM);
        this.state = 192;
        this.stateTransition();
        this.state = 197;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===odeGrammarParser.COMMA) {
            this.state = 193;
            this.match(odeGrammarParser.COMMA);
            this.state = 194;
            this.stateTransition();
            this.state = 199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StateTransitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_stateTransition;
    this.condition = null; // BoolExpressionContext
    return this;
}

StateTransitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateTransitionContext.prototype.constructor = StateTransitionContext;

StateTransitionContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(odeGrammarParser.ID);
    } else {
        return this.getToken(odeGrammarParser.ID, i);
    }
};


StateTransitionContext.prototype.ON = function() {
    return this.getToken(odeGrammarParser.ON, 0);
};

StateTransitionContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

StateTransitionContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};

StateTransitionContext.prototype.boolExpression = function() {
    return this.getTypedRuleContext(BoolExpressionContext,0);
};

StateTransitionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(odeGrammarParser.COMMA);
    } else {
        return this.getToken(odeGrammarParser.COMMA, i);
    }
};


StateTransitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitStateTransition(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.StateTransitionContext = StateTransitionContext;

odeGrammarParser.prototype.stateTransition = function() {

    var localctx = new StateTransitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, odeGrammarParser.RULE_stateTransition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 200;
        this.match(odeGrammarParser.ID);
        this.state = 205;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===odeGrammarParser.COMMA) {
            this.state = 201;
            this.match(odeGrammarParser.COMMA);
            this.state = 202;
            this.match(odeGrammarParser.ID);
            this.state = 207;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 208;
        this.match(odeGrammarParser.ON);
        this.state = 209;
        this.match(odeGrammarParser.LPAREN);
        this.state = 210;
        localctx.condition = this.boolExpression(0);
        this.state = 211;
        this.match(odeGrammarParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function BoolExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_boolExpression;
    return this;
}

BoolExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolExpressionContext.prototype.constructor = BoolExpressionContext;


 
BoolExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function BoolConstantContext(parser, ctx) {
	BoolExpressionContext.call(this, parser);
    this.value = null; // Token;
    BoolExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BoolConstantContext.prototype = Object.create(BoolExpressionContext.prototype);
BoolConstantContext.prototype.constructor = BoolConstantContext;

odeGrammarParser.BoolConstantContext = BoolConstantContext;

BoolConstantContext.prototype.TRUE = function() {
    return this.getToken(odeGrammarParser.TRUE, 0);
};

BoolConstantContext.prototype.FALSE = function() {
    return this.getToken(odeGrammarParser.FALSE, 0);
};
BoolConstantContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitBoolConstant(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BoolUnaryOperatorContext(parser, ctx) {
	BoolExpressionContext.call(this, parser);
    this.op = null; // Token;
    BoolExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BoolUnaryOperatorContext.prototype = Object.create(BoolExpressionContext.prototype);
BoolUnaryOperatorContext.prototype.constructor = BoolUnaryOperatorContext;

odeGrammarParser.BoolUnaryOperatorContext = BoolUnaryOperatorContext;

BoolUnaryOperatorContext.prototype.boolExpression = function() {
    return this.getTypedRuleContext(BoolExpressionContext,0);
};

BoolUnaryOperatorContext.prototype.NOT = function() {
    return this.getToken(odeGrammarParser.NOT, 0);
};
BoolUnaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitBoolUnaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BracketBoolExpressionContext(parser, ctx) {
	BoolExpressionContext.call(this, parser);
    BoolExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BracketBoolExpressionContext.prototype = Object.create(BoolExpressionContext.prototype);
BracketBoolExpressionContext.prototype.constructor = BracketBoolExpressionContext;

odeGrammarParser.BracketBoolExpressionContext = BracketBoolExpressionContext;

BracketBoolExpressionContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

BracketBoolExpressionContext.prototype.boolExpression = function() {
    return this.getTypedRuleContext(BoolExpressionContext,0);
};

BracketBoolExpressionContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};
BracketBoolExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitBracketBoolExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BBoolBinaryOperatorContext(parser, ctx) {
	BoolExpressionContext.call(this, parser);
    this.left = null; // BoolExpressionContext;
    this.op = null; // Token;
    this.right = null; // BoolExpressionContext;
    BoolExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BBoolBinaryOperatorContext.prototype = Object.create(BoolExpressionContext.prototype);
BBoolBinaryOperatorContext.prototype.constructor = BBoolBinaryOperatorContext;

odeGrammarParser.BBoolBinaryOperatorContext = BBoolBinaryOperatorContext;

BBoolBinaryOperatorContext.prototype.boolExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BoolExpressionContext);
    } else {
        return this.getTypedRuleContext(BoolExpressionContext,i);
    }
};

BBoolBinaryOperatorContext.prototype.AND = function() {
    return this.getToken(odeGrammarParser.AND, 0);
};

BBoolBinaryOperatorContext.prototype.OR = function() {
    return this.getToken(odeGrammarParser.OR, 0);
};
BBoolBinaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitBBoolBinaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EBoolBinaryOperatorContext(parser, ctx) {
	BoolExpressionContext.call(this, parser);
    this.leftexp = null; // ExpressionContext;
    this.op = null; // Token;
    this.rightexp = null; // ExpressionContext;
    BoolExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EBoolBinaryOperatorContext.prototype = Object.create(BoolExpressionContext.prototype);
EBoolBinaryOperatorContext.prototype.constructor = EBoolBinaryOperatorContext;

odeGrammarParser.EBoolBinaryOperatorContext = EBoolBinaryOperatorContext;

EBoolBinaryOperatorContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

EBoolBinaryOperatorContext.prototype.L = function() {
    return this.getToken(odeGrammarParser.L, 0);
};

EBoolBinaryOperatorContext.prototype.LE = function() {
    return this.getToken(odeGrammarParser.LE, 0);
};

EBoolBinaryOperatorContext.prototype.G = function() {
    return this.getToken(odeGrammarParser.G, 0);
};

EBoolBinaryOperatorContext.prototype.GE = function() {
    return this.getToken(odeGrammarParser.GE, 0);
};

EBoolBinaryOperatorContext.prototype.E = function() {
    return this.getToken(odeGrammarParser.E, 0);
};

EBoolBinaryOperatorContext.prototype.NE = function() {
    return this.getToken(odeGrammarParser.NE, 0);
};
EBoolBinaryOperatorContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitEBoolBinaryOperator(this);
    } else {
        return visitor.visitChildren(this);
    }
};



odeGrammarParser.prototype.boolExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BoolExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 40;
    this.enterRecursionRule(localctx, 40, odeGrammarParser.RULE_boolExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 229;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            localctx = new BracketBoolExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 214;
            this.match(odeGrammarParser.LPAREN);
            this.state = 215;
            this.boolExpression(0);
            this.state = 216;
            this.match(odeGrammarParser.RPAREN);
            break;

        case 2:
            localctx = new BoolUnaryOperatorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 218;
            localctx.op = this.match(odeGrammarParser.NOT);
            this.state = 219;
            this.boolExpression(6);
            break;

        case 3:
            localctx = new EBoolBinaryOperatorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 220;
            localctx.leftexp = this.expression(0);
            this.state = 221;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (odeGrammarParser.L - 36)) | (1 << (odeGrammarParser.G - 36)) | (1 << (odeGrammarParser.LE - 36)) | (1 << (odeGrammarParser.GE - 36)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 222;
            localctx.rightexp = this.expression(0);
            break;

        case 4:
            localctx = new EBoolBinaryOperatorContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 224;
            localctx.leftexp = this.expression(0);
            this.state = 225;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===odeGrammarParser.NE || _la===odeGrammarParser.E)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 226;
            localctx.rightexp = this.expression(0);
            break;

        case 5:
            localctx = new BoolConstantContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 228;
            localctx.value = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===odeGrammarParser.TRUE || _la===odeGrammarParser.FALSE)) {
                localctx.value = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 239;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 237;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BBoolBinaryOperatorContext(this, new BoolExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, odeGrammarParser.RULE_boolExpression);
                    this.state = 231;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 232;
                    localctx.op = this.match(odeGrammarParser.AND);
                    this.state = 233;
                    localctx.right = this.boolExpression(4);
                    break;

                case 2:
                    localctx = new BBoolBinaryOperatorContext(this, new BoolExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, odeGrammarParser.RULE_boolExpression);
                    this.state = 234;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 235;
                    localctx.op = this.match(odeGrammarParser.OR);
                    this.state = 236;
                    localctx.right = this.boolExpression(3);
                    break;

                } 
            }
            this.state = 241;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function BracketExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BracketExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BracketExpressionContext.prototype.constructor = BracketExpressionContext;

odeGrammarParser.BracketExpressionContext = BracketExpressionContext;

BracketExpressionContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

BracketExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BracketExpressionContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};
BracketExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitBracketExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MacroExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.id = null; // VarIdentifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MacroExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MacroExpressionContext.prototype.constructor = MacroExpressionContext;

odeGrammarParser.MacroExpressionContext = MacroExpressionContext;

MacroExpressionContext.prototype.varIdentifier = function() {
    return this.getTypedRuleContext(VarIdentifierContext,0);
};

MacroExpressionContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

MacroExpressionContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};

MacroExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
MacroExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitMacroExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function BinaryOperatorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.left = null; // ExpressionContext;
    this.op = null; // Token;
    this.right = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BinaryOperatorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BinaryOperatorExpressionContext.prototype.constructor = BinaryOperatorExpressionContext;

odeGrammarParser.BinaryOperatorExpressionContext = BinaryOperatorExpressionContext;

BinaryOperatorExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BinaryOperatorExpressionContext.prototype.CARET = function() {
    return this.getToken(odeGrammarParser.CARET, 0);
};

BinaryOperatorExpressionContext.prototype.DIVISION = function() {
    return this.getToken(odeGrammarParser.DIVISION, 0);
};

BinaryOperatorExpressionContext.prototype.ASTERISK = function() {
    return this.getToken(odeGrammarParser.ASTERISK, 0);
};

BinaryOperatorExpressionContext.prototype.PLUS = function() {
    return this.getToken(odeGrammarParser.PLUS, 0);
};

BinaryOperatorExpressionContext.prototype.MINUS = function() {
    return this.getToken(odeGrammarParser.MINUS, 0);
};
BinaryOperatorExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitBinaryOperatorExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.func = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionExpressionContext.prototype = Object.create(ExpressionContext.prototype);
FunctionExpressionContext.prototype.constructor = FunctionExpressionContext;

odeGrammarParser.FunctionExpressionContext = FunctionExpressionContext;

FunctionExpressionContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

FunctionExpressionContext.prototype.functionArguments = function() {
    return this.getTypedRuleContext(FunctionArgumentsContext,0);
};

FunctionExpressionContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};

FunctionExpressionContext.prototype.ID = function() {
    return this.getToken(odeGrammarParser.ID, 0);
};
FunctionExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitFunctionExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function UnaryOperatorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryOperatorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnaryOperatorExpressionContext.prototype.constructor = UnaryOperatorExpressionContext;

odeGrammarParser.UnaryOperatorExpressionContext = UnaryOperatorExpressionContext;

UnaryOperatorExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UnaryOperatorExpressionContext.prototype.PLUS = function() {
    return this.getToken(odeGrammarParser.PLUS, 0);
};

UnaryOperatorExpressionContext.prototype.MINUS = function() {
    return this.getToken(odeGrammarParser.MINUS, 0);
};
UnaryOperatorExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitUnaryOperatorExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ConstantExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.value = null; // NumberContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

odeGrammarParser.ConstantExpressionContext = ConstantExpressionContext;

ConstantExpressionContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};
ConstantExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitConstantExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SummationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.iterator = null; // Token;
    this.bounds = null; // LoopBoundsContext;
    this.summationExp = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SummationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
SummationExpressionContext.prototype.constructor = SummationExpressionContext;

odeGrammarParser.SummationExpressionContext = SummationExpressionContext;

SummationExpressionContext.prototype.SUM = function() {
    return this.getToken(odeGrammarParser.SUM, 0);
};

SummationExpressionContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

SummationExpressionContext.prototype.IN = function() {
    return this.getToken(odeGrammarParser.IN, 0);
};

SummationExpressionContext.prototype.LSQR = function() {
    return this.getToken(odeGrammarParser.LSQR, 0);
};

SummationExpressionContext.prototype.RSQR = function() {
    return this.getToken(odeGrammarParser.RSQR, 0);
};

SummationExpressionContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};

SummationExpressionContext.prototype.LCRL = function() {
    return this.getToken(odeGrammarParser.LCRL, 0);
};

SummationExpressionContext.prototype.RCRL = function() {
    return this.getToken(odeGrammarParser.RCRL, 0);
};

SummationExpressionContext.prototype.ID = function() {
    return this.getToken(odeGrammarParser.ID, 0);
};

SummationExpressionContext.prototype.loopBounds = function() {
    return this.getTypedRuleContext(LoopBoundsContext,0);
};

SummationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
SummationExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitSummationExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FunctionDerivativeContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.id = null; // VarIdentifierContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FunctionDerivativeContext.prototype = Object.create(ExpressionContext.prototype);
FunctionDerivativeContext.prototype.constructor = FunctionDerivativeContext;

odeGrammarParser.FunctionDerivativeContext = FunctionDerivativeContext;

FunctionDerivativeContext.prototype.DER = function() {
    return this.getToken(odeGrammarParser.DER, 0);
};

FunctionDerivativeContext.prototype.LPAREN = function() {
    return this.getToken(odeGrammarParser.LPAREN, 0);
};

FunctionDerivativeContext.prototype.RPAREN = function() {
    return this.getToken(odeGrammarParser.RPAREN, 0);
};

FunctionDerivativeContext.prototype.varIdentifier = function() {
    return this.getTypedRuleContext(VarIdentifierContext,0);
};
FunctionDerivativeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitFunctionDerivative(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function VariableExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.id = null; // VarIdentifierContext;
    this.der = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VariableExpressionContext.prototype = Object.create(ExpressionContext.prototype);
VariableExpressionContext.prototype.constructor = VariableExpressionContext;

odeGrammarParser.VariableExpressionContext = VariableExpressionContext;

VariableExpressionContext.prototype.varIdentifier = function() {
    return this.getTypedRuleContext(VarIdentifierContext,0);
};

VariableExpressionContext.prototype.APOSTROPHE = function() {
    return this.getToken(odeGrammarParser.APOSTROPHE, 0);
};
VariableExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitVariableExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TernaryOperatorExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.condition = null; // BoolExpressionContext;
    this.first = null; // ExpressionContext;
    this.second = null; // ExpressionContext;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TernaryOperatorExpressionContext.prototype = Object.create(ExpressionContext.prototype);
TernaryOperatorExpressionContext.prototype.constructor = TernaryOperatorExpressionContext;

odeGrammarParser.TernaryOperatorExpressionContext = TernaryOperatorExpressionContext;

TernaryOperatorExpressionContext.prototype.LCRL = function() {
    return this.getToken(odeGrammarParser.LCRL, 0);
};

TernaryOperatorExpressionContext.prototype.QUESTIONMARK = function() {
    return this.getToken(odeGrammarParser.QUESTIONMARK, 0);
};

TernaryOperatorExpressionContext.prototype.COLON = function() {
    return this.getToken(odeGrammarParser.COLON, 0);
};

TernaryOperatorExpressionContext.prototype.RCRL = function() {
    return this.getToken(odeGrammarParser.RCRL, 0);
};

TernaryOperatorExpressionContext.prototype.boolExpression = function() {
    return this.getTypedRuleContext(BoolExpressionContext,0);
};

TernaryOperatorExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
TernaryOperatorExpressionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitTernaryOperatorExpression(this);
    } else {
        return visitor.visitChildren(this);
    }
};



odeGrammarParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 42;
    this.enterRecursionRule(localctx, 42, odeGrammarParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 296;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            localctx = new BracketExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 243;
            this.match(odeGrammarParser.LPAREN);
            this.state = 244;
            this.expression(0);
            this.state = 245;
            this.match(odeGrammarParser.RPAREN);
            break;

        case 2:
            localctx = new FunctionDerivativeContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 247;
            this.match(odeGrammarParser.DER);
            this.state = 248;
            this.match(odeGrammarParser.LPAREN);
            this.state = 249;
            localctx.id = this.varIdentifier();
            this.state = 250;
            this.match(odeGrammarParser.RPAREN);
            break;

        case 3:
            localctx = new FunctionExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 252;
            localctx.func = this.match(odeGrammarParser.ID);
            this.state = 253;
            this.match(odeGrammarParser.LPAREN);
            this.state = 254;
            this.functionArguments();
            this.state = 255;
            this.match(odeGrammarParser.RPAREN);
            break;

        case 4:
            localctx = new UnaryOperatorExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 257;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===odeGrammarParser.PLUS || _la===odeGrammarParser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 258;
            this.expression(8);
            break;

        case 5:
            localctx = new VariableExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 259;
            localctx.id = this.varIdentifier();
            this.state = 261;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
            if(la_===1) {
                this.state = 260;
                localctx.der = this.match(odeGrammarParser.APOSTROPHE);

            }
            break;

        case 6:
            localctx = new ConstantExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 263;
            localctx.value = this.number();
            break;

        case 7:
            localctx = new MacroExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 264;
            this.match(odeGrammarParser.T__0);
            this.state = 265;
            localctx.id = this.varIdentifier();
            this.state = 274;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 266;
                this.match(odeGrammarParser.LPAREN);
                this.state = 270;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << odeGrammarParser.T__0) | (1 << odeGrammarParser.DER) | (1 << odeGrammarParser.SUM) | (1 << odeGrammarParser.FLOAT) | (1 << odeGrammarParser.INT) | (1 << odeGrammarParser.ID) | (1 << odeGrammarParser.PLUS) | (1 << odeGrammarParser.MINUS) | (1 << odeGrammarParser.LPAREN))) !== 0) || _la===odeGrammarParser.LCRL) {
                    this.state = 267;
                    this.expression(0);
                    this.state = 272;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 273;
                this.match(odeGrammarParser.RPAREN);

            }
            break;

        case 8:
            localctx = new SummationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 276;
            this.match(odeGrammarParser.SUM);
            this.state = 277;
            this.match(odeGrammarParser.LPAREN);
            this.state = 278;
            localctx.iterator = this.match(odeGrammarParser.ID);
            this.state = 279;
            this.match(odeGrammarParser.IN);
            this.state = 280;
            this.match(odeGrammarParser.LSQR);
            this.state = 281;
            localctx.bounds = this.loopBounds();
            this.state = 282;
            this.match(odeGrammarParser.RSQR);
            this.state = 283;
            this.match(odeGrammarParser.RPAREN);
            this.state = 284;
            this.match(odeGrammarParser.LCRL);
            this.state = 285;
            localctx.summationExp = this.expression(0);
            this.state = 286;
            this.match(odeGrammarParser.RCRL);
            break;

        case 9:
            localctx = new TernaryOperatorExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 288;
            this.match(odeGrammarParser.LCRL);
            this.state = 289;
            localctx.condition = this.boolExpression(0);
            this.state = 290;
            this.match(odeGrammarParser.QUESTIONMARK);
            this.state = 291;
            localctx.first = this.expression(0);
            this.state = 292;
            this.match(odeGrammarParser.COLON);
            this.state = 293;
            localctx.second = this.expression(0);
            this.state = 294;
            this.match(odeGrammarParser.RCRL);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 309;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 307;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, odeGrammarParser.RULE_expression);
                    this.state = 298;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 299;
                    localctx.op = this.match(odeGrammarParser.CARET);
                    this.state = 300;
                    localctx.right = this.expression(9);
                    break;

                case 2:
                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, odeGrammarParser.RULE_expression);
                    this.state = 301;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 302;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===odeGrammarParser.ASTERISK || _la===odeGrammarParser.DIVISION)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 303;
                    localctx.right = this.expression(8);
                    break;

                case 3:
                    localctx = new BinaryOperatorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, odeGrammarParser.RULE_expression);
                    this.state = 304;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 305;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===odeGrammarParser.PLUS || _la===odeGrammarParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 306;
                    localctx.right = this.expression(7);
                    break;

                } 
            }
            this.state = 311;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function FunctionArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = odeGrammarParser.RULE_functionArguments;
    return this;
}

FunctionArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionArgumentsContext.prototype.constructor = FunctionArgumentsContext;

FunctionArgumentsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

FunctionArgumentsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(odeGrammarParser.COMMA);
    } else {
        return this.getToken(odeGrammarParser.COMMA, i);
    }
};


FunctionArgumentsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof odeGrammarVisitor ) {
        return visitor.visitFunctionArguments(this);
    } else {
        return visitor.visitChildren(this);
    }
};




odeGrammarParser.FunctionArgumentsContext = FunctionArgumentsContext;

odeGrammarParser.prototype.functionArguments = function() {

    var localctx = new FunctionArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, odeGrammarParser.RULE_functionArguments);
    var _la = 0; // Token type
    try {
        this.state = 321;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case odeGrammarParser.T__0:
        case odeGrammarParser.DER:
        case odeGrammarParser.SUM:
        case odeGrammarParser.FLOAT:
        case odeGrammarParser.INT:
        case odeGrammarParser.ID:
        case odeGrammarParser.PLUS:
        case odeGrammarParser.MINUS:
        case odeGrammarParser.LPAREN:
        case odeGrammarParser.LCRL:
            this.enterOuterAlt(localctx, 1);
            this.state = 312;
            this.expression(0);
            this.state = 317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===odeGrammarParser.COMMA) {
                this.state = 313;
                this.match(odeGrammarParser.COMMA);
                this.state = 314;
                this.expression(0);
                this.state = 319;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case odeGrammarParser.RPAREN:
            this.enterOuterAlt(localctx, 2);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


odeGrammarParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 20:
			return this.boolExpression_sempred(localctx, predIndex);
	case 21:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

odeGrammarParser.prototype.boolExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		case 1:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

odeGrammarParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 9);
		case 3:
			return this.precpred(this._ctx, 7);
		case 4:
			return this.precpred(this._ctx, 6);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.odeGrammarParser = odeGrammarParser;


/***/ }),

/***/ "./src/grammar/antlrOutput/odeGrammarVisitor.js":
/*!******************************************************!*\
  !*** ./src/grammar/antlrOutput/odeGrammarVisitor.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Generated from e:\projects\SolversJS\src\grammar\odeGrammar.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = __webpack_require__(/*! antlr4/index */ "./node_modules/antlr4/index.js");

// This class defines a complete generic visitor for a parse tree produced by odeGrammarParser.

function odeGrammarVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

odeGrammarVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
odeGrammarVisitor.prototype.constructor = odeGrammarVisitor;

// Visit a parse tree produced by odeGrammarParser#dae.
odeGrammarVisitor.prototype.visitDae = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#daeStatement.
odeGrammarVisitor.prototype.visitDaeStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#hybrid.
odeGrammarVisitor.prototype.visitHybrid = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#number.
odeGrammarVisitor.prototype.visitNumber = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#hybridStatement.
odeGrammarVisitor.prototype.visitHybridStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#index.
odeGrammarVisitor.prototype.visitIndex = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#varIdentifier.
odeGrammarVisitor.prototype.visitVarIdentifier = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#loopStatement.
odeGrammarVisitor.prototype.visitLoopStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#loopBody.
odeGrammarVisitor.prototype.visitLoopBody = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#macroStatement.
odeGrammarVisitor.prototype.visitMacroStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#macroArguments.
odeGrammarVisitor.prototype.visitMacroArguments = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#loopBounds.
odeGrammarVisitor.prototype.visitLoopBounds = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#loop.
odeGrammarVisitor.prototype.visitLoop = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#equation.
odeGrammarVisitor.prototype.visitEquation = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#setter.
odeGrammarVisitor.prototype.visitSetter = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#initialCondition.
odeGrammarVisitor.prototype.visitInitialCondition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#constantStatement.
odeGrammarVisitor.prototype.visitConstantStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#stateStatement.
odeGrammarVisitor.prototype.visitStateStatement = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#stateDef.
odeGrammarVisitor.prototype.visitStateDef = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#stateTransition.
odeGrammarVisitor.prototype.visitStateTransition = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#BoolConstant.
odeGrammarVisitor.prototype.visitBoolConstant = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#BoolUnaryOperator.
odeGrammarVisitor.prototype.visitBoolUnaryOperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#BracketBoolExpression.
odeGrammarVisitor.prototype.visitBracketBoolExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#BBoolBinaryOperator.
odeGrammarVisitor.prototype.visitBBoolBinaryOperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#EBoolBinaryOperator.
odeGrammarVisitor.prototype.visitEBoolBinaryOperator = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#BracketExpression.
odeGrammarVisitor.prototype.visitBracketExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#MacroExpression.
odeGrammarVisitor.prototype.visitMacroExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#BinaryOperatorExpression.
odeGrammarVisitor.prototype.visitBinaryOperatorExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#FunctionExpression.
odeGrammarVisitor.prototype.visitFunctionExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#UnaryOperatorExpression.
odeGrammarVisitor.prototype.visitUnaryOperatorExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#ConstantExpression.
odeGrammarVisitor.prototype.visitConstantExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#SummationExpression.
odeGrammarVisitor.prototype.visitSummationExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#FunctionDerivative.
odeGrammarVisitor.prototype.visitFunctionDerivative = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#VariableExpression.
odeGrammarVisitor.prototype.visitVariableExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#TernaryOperatorExpression.
odeGrammarVisitor.prototype.visitTernaryOperatorExpression = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by odeGrammarParser#functionArguments.
odeGrammarVisitor.prototype.visitFunctionArguments = function(ctx) {
  return this.visitChildren(ctx);
};



exports.odeGrammarVisitor = odeGrammarVisitor;

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ui_1 = __webpack_require__(/*! ./ui */ "./src/ui.ts");
const jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
ui_1.ui.init();
(function () {
    var data = [];
    var layout = {
        title: 'Result',
        width: jquery_1.default("#plot-area").width(),
        height: jquery_1.default("#plot-area").height(),
        paper_bgcolor: 'rgba(245,245,245,1)',
        plot_bgcolor: 'rgba(245,245,245,1)'
    };
    //@ts-ignore
    Plotly.newPlot('plot-area', data, layout, { responsive: true });
})();
window.onresize = function () {
    if (ui_1.ui.isResultsTab) {
        //@ts-ignore
        Plotly.relayout('plot-area', {
            width: jquery_1.default("#plot-area").width(),
            height: jquery_1.default("#plot-area").height()
        });
        //console.log($("#plot-area").width());
    }
};
ui_1.ui.openTab("run");
ui_1.ui.addLogMessage("Start");
ui_1.ui.loadDaeExample("stiff-equation");
ui_1.ui.showDebug();


/***/ }),

/***/ "./src/math/gauss.ts":
/*!***************************!*\
  !*** ./src/math/gauss.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.gauss = void 0;
const vector_1 = __webpack_require__(/*! ./vector */ "./src/math/vector.ts");
class gauss {
    /**
     * gauss method for linear equations with rows sorting
     */
    static solve(A, b) {
        var rang = b.length();
        var x = vector_1.vector.empty(rang);
        let epsilon = 0.001;
        var indexes = new Array(rang);
        for (var i = 0; i < rang; i++) {
            indexes[i] = i;
        }
        for (var l = 0; l < rang; l++) {
            var max = l;
            for (var i = l + 1; i < rang; i++) {
                if (Math.abs(A.get(indexes[i], l)) > Math.abs(A.get(indexes[max], l)))
                    max = i;
            }
            if (max != l) {
                var temp = indexes[l];
                indexes[l] = indexes[max];
                indexes[max] = temp;
            }
            if (Math.abs(A.get(indexes[l], l)) < epsilon) {
                for (var i = 0; i < rang; i++)
                    x.set(0.0, i);
                return x;
            }
            for (var i = l + 1; i < rang; i++)
                A.set(A.get(indexes[l], i) / A.get(indexes[l], l), indexes[l], i);
            b.set(b.get(indexes[l]) / A.get(indexes[l], l), indexes[l]);
            A.set(1, indexes[l], l);
            for (var i = l + 1; i < rang; i++) {
                for (var k = l + 1; k < rang; k++)
                    A.set(A.get(indexes[i], k) - A.get(indexes[i], l) * A.get(indexes[l], k), indexes[i], k);
                b.set(b.get(indexes[i]) - A.get(indexes[i], l) * b.get(indexes[l]), indexes[i]);
                A.set(0, indexes[i], l);
            }
        }
        x.set(b.get(indexes[rang - 1]), rang - 1);
        for (var i = rang - 2; i > -1; i--) {
            var k = 0.;
            for (var j = i + 1; j < rang; j++) {
                k = k + A.get(indexes[i], j) * x.get(j);
            }
            x.set(b.get(indexes[i]) - k, i);
        }
        return x;
    }
}
exports.gauss = gauss;


/***/ }),

/***/ "./src/math/matrix.ts":
/*!****************************!*\
  !*** ./src/math/matrix.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.matrix = void 0;
const vector_1 = __webpack_require__(/*! ./vector */ "./src/math/vector.ts");
class matrix {
    constructor(data, columns, rows) {
        this.data = data;
        this.width = columns;
        this.height = rows;
    }
    multVec(dx) {
        let result = vector_1.vector.empty(this.height);
        for (let i = 0; i < this.height; i++) {
            let v = 0;
            for (let j = 0; j < this.width; j++) {
                v += this.get(j, i) * dx.get(j);
            }
            result.set(v, i);
        }
        return result;
    }
    /**
    * creates empty identity matrix
    */
    static identity(size) {
        let data;
        (data = []).length = size * size;
        data.fill(0);
        for (let i = 0; i < size; i++) {
            data[i + i * size] = 1;
        }
        return new matrix(data, size, size);
    }
    /**
    * creates empty square matrix
    */
    static emptySquare(size) {
        let data;
        (data = []).length = size * size;
        data.fill(0);
        return new matrix(data, size, size);
    }
    /**
    * creates empty rectangular matrix
    */
    static empty(rows, columns) {
        let data;
        (data = []).length = rows * columns;
        data.fill(0);
        return new matrix(data, columns, rows);
    }
    static add(a, b) {
        let result = [];
        for (let i = 0; i < a.data.length; i++)
            result.push(a.data[i] + b.data[i]);
        return new matrix(result, a.width, a.height);
    }
    static sub(a, b) {
        let result = [];
        for (let i = 0; i < a.data.length; i++)
            result.push(a.data[i] - b.data[i]);
        return new matrix(result, a.width, a.height);
    }
    static scale(a, b) {
        let result = [];
        for (let i = 0; i < a.data.length; i++)
            result.push(a.data[i] * b);
        return new matrix(result, a.width, a.height);
    }
    /**
     * matrix multiplication
     * @param a matrix with (width = w_a, height = h_a)
     * @param b matrix with (width = w_b, height = w_a)
     * @returns matrix with (width = w_b, height = h_a)
     */
    static mult(a, b) {
        let result = matrix.empty(a.height, b.width);
        //for each cell in the result
        for (let j = 0; j < a.height; j++) {
            for (let i = 0; i < b.width; i++) {
                let value = 0;
                for (let k = 0; k < a.width; k++) {
                    value += a.get(j, k) * b.get(k, i);
                }
                result.set(value, j, i);
            }
        }
        return result;
    }
    /**
    * get value
    * @param row row
    * @param column column
    */
    get(row, column) {
        return this.data[row * this.width + column];
    }
    /**
    * set value
    * @param value value
    * @param row row
    * @param column column
    */
    set(value, row, column) {
        this.data[row * this.width + column] = value;
    }
    /**
    * multiply matrix by scalar and store result in dest
    * @param b scalar
    * @param dest destination matrix
    * @return result
    */
    scale(b, dest) {
        if (dest == undefined) {
            dest = this;
        }
        for (let i = 0; i < this.data.length; i++)
            dest.data[i] = this.data[i] * b;
        return this;
    }
    add(b, dest) {
        if (dest == undefined) {
            dest = this;
        }
        for (let i = 0; i < this.data.length; i++)
            dest.data[i] = this.data[i] + b.data[i];
        return this;
    }
    sub(b, dest) {
        if (dest == undefined) {
            dest = this;
        }
        for (let i = 0; i < this.data.length; i++)
            dest.data[i] = this.data[i] - b.data[i];
        return this;
    }
    scaleSelf(b) {
        for (let i = 0; i < this.data.length; i++)
            this.data[i] *= b;
        return this;
    }
    addSelf(b) {
        for (let i = 0; i < this.data.length; i++)
            this.data[i] += b.data[i];
        return this;
    }
    subSelf(b) {
        for (let i = 0; i < this.data.length; i++)
            this.data[i] -= b.data[i];
        return this;
    }
    addSubMatrix(b, rowOffset, columnOffset) {
        for (let j = 0; j < b.height; j++) {
            for (let i = 0; i < b.width; i++) {
                let value = this.get(j + rowOffset, i + columnOffset) + b.get(j, i);
                this.set(value, j + rowOffset, i + columnOffset);
            }
        }
        return this;
    }
    subSubMatrix(b, rowOffset, columnOffset) {
        for (let j = 0; j < b.height; j++) {
            for (let i = 0; i < b.width; i++) {
                let value = this.get(j + rowOffset, i + columnOffset) - b.get(j, i);
                this.set(value, j + rowOffset, i + columnOffset);
            }
        }
        return this;
    }
}
exports.matrix = matrix;


/***/ }),

/***/ "./src/math/newton.ts":
/*!****************************!*\
  !*** ./src/math/newton.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.NewtonSolver = void 0;
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const gauss_1 = __webpack_require__(/*! ../math/gauss */ "./src/math/gauss.ts");
class NewtonSolver {
    constructor(iterations, fAbsTol, fRelTol, alpha, minIterations = 0) {
        this.minIterations = 0;
        this.iterations = iterations;
        this.fAbsTol = fAbsTol;
        this.fRelTol = fRelTol;
        this.alpha = alpha;
        this.minIterations = minIterations;
    }
    getMinIterations() {
        return this.minIterations;
    }
    getIterations() {
        return this.iterations;
    }
    getAbsTol() {
        return this.fAbsTol;
    }
    getRelTol() {
        return this.fRelTol;
    }
    getAlpha() {
        return this.alpha;
    }
    setMinIterations(value) {
        this.minIterations = value;
    }
    setIterations(value) {
        this.iterations = value;
    }
    setAbsTol(value) {
        this.fAbsTol = value;
    }
    setRelTol(value) {
        this.fRelTol = value;
    }
    setAlpha(value) {
        this.alpha = value;
    }
    solve(F, J, length, x0) {
        let x;
        if (x0 == undefined)
            x = vector_1.vector.empty(length);
        else
            x = x0.clone();
        let f = F(x);
        let f0Norm = f.norm2();
        for (let i = 0; i < this.iterations; i++) {
            let j = J(x);
            let dx = gauss_1.gauss.solve(j, f.scaleSelf(-this.alpha));
            x.addSelf(dx);
            f = F(x);
            if (i >= this.minIterations && f.norm2() < this.fAbsTol + this.fRelTol * f0Norm) {
                return x;
            }
        }
        throw new Error("Divergence of newton method");
    }
    solveSystem(system, x0) {
        let x;
        if (x0 == undefined)
            x = vector_1.vector.empty(system.length());
        else
            x = x0.clone();
        let F = system.F(x);
        let f0Norm = F.norm2();
        for (let i = 0; i < this.iterations; i++) {
            let J = system.J(x);
            let dx = gauss_1.gauss.solve(J, F.scaleSelf(-this.alpha));
            x.addSelf(dx);
            F = system.F(x);
            if (i >= this.minIterations && F.norm2() < this.fAbsTol + this.fRelTol * f0Norm) {
                return x;
            }
        }
        throw new Error("Divergence of newton method");
    }
}
exports.NewtonSolver = NewtonSolver;


/***/ }),

/***/ "./src/math/vector.ts":
/*!****************************!*\
  !*** ./src/math/vector.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.vector = void 0;
const matrix_1 = __webpack_require__(/*! ./matrix */ "./src/math/matrix.ts");
function lerp(a, b, t) {
    return a * (1 - t) + b * t;
}
class vector {
    constructor(data) {
        this.data = data;
    }
    static outer(a, b) {
        let result = matrix_1.matrix.empty(a.length(), b.length());
        for (let j = 0; j < a.length(); j++) {
            for (let i = 0; i < b.length(); i++) {
                result.set(a.get(j) * b.get(i), j, i);
            }
        }
        return result;
    }
    static concat(vectors) {
        let data = [];
        vectors.forEach(function (item) {
            data = data.concat(item.data);
        });
        return new vector(data);
    }
    static dot(a, b) {
        let result = 0;
        for (let i = 0; i < a.length(); i++) {
            result += a.data[i] * b.data[i];
        }
        return result;
    }
    /**
     * vector interpolation
     */
    static mix(a, b, t) {
        let result = a.clone();
        for (let i = 0; i < a.length(); i++) {
            result.data[i] = lerp(result.data[i], b.data[i], t);
        }
        return result;
    }
    static empty(length) {
        let data;
        (data = []).length = length;
        data.fill(0);
        return new vector(data);
    }
    static add(a, b) {
        let result = [];
        for (let i = 0; i < a.data.length; i++)
            result.push(a.data[i] + b.data[i]);
        return new vector(result);
    }
    static sub(a, b) {
        let result = [];
        for (let i = 0; i < a.data.length; i++)
            result.push(a.data[i] - b.data[i]);
        return new vector(result);
    }
    static scale(a, b) {
        let result = [];
        for (let i = 0; i < a.data.length; i++)
            result.push(a.data[i] * b);
        return new vector(result);
    }
    clone() {
        return new vector(this.data.slice());
    }
    addSelf(b) {
        for (let i = 0; i < this.data.length; i++)
            this.data[i] += b.data[i];
        return this;
    }
    subSelf(b) {
        for (let i = 0; i < this.data.length; i++)
            this.data[i] -= b.data[i];
        return this;
    }
    scaleSelf(b) {
        for (let i = 0; i < this.data.length; i++)
            this.data[i] *= b;
        return this;
    }
    get(i) {
        return this.data[i];
    }
    set(value, i) {
        this.data[i] = value;
    }
    length() {
        return this.data.length;
    }
    getSubVector(offset, length) {
        let resultData = new Array(length);
        for (let i = 0; i < length; i++)
            resultData[i] = this.data[offset + i];
        return new vector(resultData);
    }
    addSubVector(b, offset) {
        for (let i = 0; i < b.length(); i++)
            this.data[i + offset] += b.get(i);
        return this;
    }
    subSubVector(b, offset) {
        for (let i = 0; i < b.length(); i++)
            this.data[i + offset] -= b.get(i);
        return this;
    }
    add(b, dest) {
        if (dest == undefined) {
            dest = this;
        }
        for (let i = 0; i < this.data.length; i++)
            dest.data[i] = this.data[i] + b.data[i];
        return dest;
    }
    sub(b, dest) {
        if (dest == undefined) {
            dest = this;
        }
        for (let i = 0; i < this.data.length; i++)
            dest.data[i] = this.data[i] - b.data[i];
        return dest;
    }
    scale(b, dest) {
        if (dest == undefined) {
            dest = this;
        }
        for (let i = 0; i < this.data.length; i++)
            dest.data[i] = this.data[i] * b;
        return dest;
    }
    norm2() {
        let result = 0;
        for (let i = 0; i < this.data.length; i++)
            result += this.data[i] * this.data[i];
        return Math.sqrt(result);
    }
    norm2Sqr() {
        return vector.dot(this, this);
    }
}
exports.vector = vector;


/***/ }),

/***/ "./src/methods.ts":
/*!************************!*\
  !*** ./src/methods.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.methods = exports.UIParameters = void 0;
const euler_1 = __webpack_require__(/*! ./dae/solvers/edae/euler */ "./src/dae/solvers/edae/euler.ts");
const euler_2 = __webpack_require__(/*! ./dae/solvers/idae/euler */ "./src/dae/solvers/idae/euler.ts");
const rk_1 = __webpack_require__(/*! ./dae/solvers/edae/rk */ "./src/dae/solvers/edae/rk.ts");
const rk_2 = __webpack_require__(/*! ./dae/solvers/idae/rk */ "./src/dae/solvers/idae/rk.ts");
const midpoint_1 = __webpack_require__(/*! ./dae/solvers/idae/midpoint */ "./src/dae/solvers/idae/midpoint.ts");
const trapezoidal_1 = __webpack_require__(/*! ./dae/solvers/idae/trapezoidal */ "./src/dae/solvers/idae/trapezoidal.ts");
const midpoint_2 = __webpack_require__(/*! ./dae/solvers/edae/midpoint */ "./src/dae/solvers/edae/midpoint.ts");
const trapezoidal_2 = __webpack_require__(/*! ./dae/solvers/edae/trapezoidal */ "./src/dae/solvers/edae/trapezoidal.ts");
const algebraicSolver_1 = __webpack_require__(/*! ./dae/solvers/edae/algebraicSolver */ "./src/dae/solvers/edae/algebraicSolver.ts");
const algebraicSolver_2 = __webpack_require__(/*! ./dae/solvers/idae/algebraicSolver */ "./src/dae/solvers/idae/algebraicSolver.ts");
const newton_1 = __webpack_require__(/*! ./math/newton */ "./src/math/newton.ts");
class UIParameters {
}
exports.UIParameters = UIParameters;
class Method {
}
exports.methods = {
    edopri5: {
        name: "DOPRI5",
        autostep: true,
        implicit: false,
        edaeInit: function (p) {
            let s = p.solver.stepControl;
            return new rk_1.EDAE_DOPRI5(s.minStep, p.solver.step, s.errTol);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_DOPRI5(p.solver.stepControl.minStep, p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters), p.solver.stepControl.errTol);
        }
    },
    eeuler: {
        name: "Euler",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new euler_1.EDAE_EEuler(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new euler_2.IDAE_EEuler(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    emidpoint: {
        name: "Midpoint",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new midpoint_2.EDAE_EMidpoint(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new midpoint_1.IDAE_EMidpoint(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    etrapezoidal: {
        name: "Trapezoidal",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new trapezoidal_2.EDAE_ETrapezoidal(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new trapezoidal_1.IDAE_ETrapezoidal(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    erk4: {
        name: "Standart RK4",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new rk_1.EDAE_RK4(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RK4(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    "erk4-2": {
        name: "Alt. RK4",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new rk_1.EDAE_RK4_2(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RK4_2(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    "erk4-ralston": {
        name: "RK4 by Ralston",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new rk_1.EDAE_RK4_RALSTON(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RK4_RALSTON(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    "ebs23": {
        name: "Bogacki Shampine 23 emb.",
        autostep: true,
        implicit: false,
        edaeInit: function (p) {
            return new rk_1.EDAE_BS23(p.solver.stepControl.minStep, p.solver.step, p.solver.stepControl.errTol);
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_BS23(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    erk6: {
        name: "RK6",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new rk_1.EDAE_RK6(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RK6(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    "erk6-2": {
        name: "Alt. RK6",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new rk_1.EDAE_RK6_2(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RK6_2(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    erk8: {
        name: "RK8",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new rk_1.EDAE_RK8(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RK8(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    ealgebraic: {
        name: "Algebraic solver",
        autostep: false,
        implicit: false,
        edaeInit: function (p) {
            return new algebraicSolver_1.EDAE_AlgebraicSolver(p.solver.step);
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new algebraicSolver_2.IDAE_AlgebraicSolver(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    ieuler: {
        name: "Euler",
        autostep: false,
        implicit: true,
        edaeInit: function (p) {
            let i = p.solver.implicitStepSolver;
            return new euler_1.EDAE_IEuler(p.solver.step, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new euler_2.IDAE_IEuler(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    imidpoint: {
        name: "Midpoint",
        autostep: false,
        implicit: true,
        edaeInit: function (p) {
            let i = p.solver.implicitStepSolver;
            return new midpoint_2.EDAE_IMidpoint(p.solver.step, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new midpoint_1.IDAE_IMidpoint(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    itrapezoidal: {
        name: "Trapezoidal",
        autostep: false,
        implicit: true,
        edaeInit: function (p) {
            let i = p.solver.implicitStepSolver;
            return new trapezoidal_2.EDAE_ITrapezoidal(p.solver.step, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let i = p.solver.implicitStepSolver;
            let s = p.solver.implicitSystemSolver;
            return new trapezoidal_1.IDAE_ITrapezoidal(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters), new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        }
    },
    iradauia5: {
        name: "RADAU IA5",
        autostep: false,
        implicit: true,
        edaeInit: function (p) {
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_RADAUIA5(p.solver.step, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RADAUIA5(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    iradauiia3: {
        name: "RADAU IIA3",
        autostep: false,
        implicit: true,
        edaeInit: function (p) {
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_RADAUIIA3(p.solver.step, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RADAUIIA3(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    iradauiia5: {
        name: "RADAU IIA5",
        autostep: false,
        implicit: true,
        edaeInit: function (p) {
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_RADAUIIA5(p.solver.step, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_RADAUIIA5(p.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    lobattoiiia2: {
        name: "LOBATTO IIIA2",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_LOBATTOIIIA2(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_LOBATTOIIIA2(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    lobattoiiia4: {
        name: "LOBATTO IIIA4",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_LOBATTOIIIA4(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_LOBATTOIIIA4(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    lobatoiiib2: {
        name: "LOBATTO IIIB2",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_LOBATTOIIIB2(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_LOBATTOIIIB2(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    lobattoiiib4: {
        name: "LOBATTO IIIB4",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_LOBATTOIIIB4(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_LOBATTOIIIB4(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    lobattoiiic2: {
        name: "LOBATTO IIIC2",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_LOBATTOIIIC2(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_LOBATTOIIIC2(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    lobattoiiic4: {
        name: "LOBATTO IIIC4",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_LOBATTOIIIC4(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_LOBATTOIIIC4(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    gausslegendre4: {
        name: "GAUSS LEGENDRE 4",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_GAUSSLEGENDRE4(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_GAUSSLEGENDRE4(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    gausslegendre6: {
        name: "GAUSS LEGENDRE 6",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            let i = p.solver.implicitStepSolver;
            return new rk_1.EDAE_GAUSSLEGENDRE6(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(i.iters, i.absTol, i.relTol, i.alpha, i.minIters));
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_GAUSSLEGENDRE6(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    iheunEuler: {
        name: "Heun Euler emb.",
        autostep: true,
        implicit: true,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            return new rk_1.EDAE_HeunEuler(c.minStep, p.solver.step, c.errTol);
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_HeunEuler(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    },
    imidpointEuler: {
        name: "Midpoint Euler emb.",
        autostep: true,
        implicit: false,
        edaeInit: function (p) {
            let c = p.solver.stepControl;
            return new rk_1.EDAE_MidpointEuler(c.minStep, p.solver.step, c.errTol);
        },
        idaeInit: function (p) {
            let c = p.solver.stepControl;
            let s = p.solver.implicitSystemSolver;
            return new rk_2.IDAE_MidpointEuler(c.minStep, p.solver.step, c.errTol, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
        }
    }
};


/***/ }),

/***/ "./src/test/test.ts":
/*!**************************!*\
  !*** ./src/test/test.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Test = exports.handleErrors = exports.plotExpression = void 0;
const adaptiveStep_1 = __webpack_require__(/*! ../dae/adaptiveStep */ "./src/dae/adaptiveStep.ts");
const eventDetection_1 = __webpack_require__(/*! ../dae/eventDetection */ "./src/dae/eventDetection.ts");
const daeVector_1 = __webpack_require__(/*! ../dae/daeVector */ "./src/dae/daeVector.ts");
const idaeHybridSystem_1 = __webpack_require__(/*! ../dae/idaeHybridSystem */ "./src/dae/idaeHybridSystem.ts");
const edaeHybridSystem_1 = __webpack_require__(/*! ../dae/edaeHybridSystem */ "./src/dae/edaeHybridSystem.ts");
const edaeHybridSolver_1 = __webpack_require__(/*! ../dae/edaeHybridSolver */ "./src/dae/edaeHybridSolver.ts");
const idaeHybridSolver_1 = __webpack_require__(/*! ../dae/idaeHybridSolver */ "./src/dae/idaeHybridSolver.ts");
const vector_1 = __webpack_require__(/*! ../math/vector */ "./src/math/vector.ts");
const matrix_1 = __webpack_require__(/*! ../math/matrix */ "./src/math/matrix.ts");
const euler_1 = __webpack_require__(/*! ../dae/solvers/idae/euler */ "./src/dae/solvers/idae/euler.ts");
const jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
const rk_1 = __webpack_require__(/*! ../dae/solvers/edae/rk */ "./src/dae/solvers/edae/rk.ts");
const rk_2 = __webpack_require__(/*! ../dae/solvers/idae/rk */ "./src/dae/solvers/idae/rk.ts");
const adams_bashforth_1 = __webpack_require__(/*! ../dae/solvers/edae/adams-bashforth */ "./src/dae/solvers/edae/adams-bashforth.ts");
const adams_bashforth_2 = __webpack_require__(/*! ../dae/solvers/idae/adams-bashforth */ "./src/dae/solvers/idae/adams-bashforth.ts");
const newton_1 = __webpack_require__(/*! ../math/newton */ "./src/math/newton.ts");
const ui_1 = __webpack_require__(/*! ../ui */ "./src/ui.ts");
const compiler_1 = __webpack_require__(/*! ../compiler/compiler */ "./src/compiler/compiler.ts");
const compilerError_1 = __webpack_require__(/*! ../compiler/compilerError */ "./src/compiler/compilerError.ts");
const hybridCompiler_1 = __webpack_require__(/*! ../compiler/hybridCompiler */ "./src/compiler/hybridCompiler.ts");
const astNode_1 = __webpack_require__(/*! ../compiler/astNode */ "./src/compiler/astNode.ts");
const douglasPeuckerSimplification_1 = __webpack_require__(/*! ../curveSimplification/douglasPeuckerSimplification */ "./src/curveSimplification/douglasPeuckerSimplification.ts");
const perpendicularDistanceSimplification_1 = __webpack_require__(/*! ../curveSimplification/perpendicularDistanceSimplification */ "./src/curveSimplification/perpendicularDistanceSimplification.ts");
const radialDistanceSimplification_1 = __webpack_require__(/*! ../curveSimplification/radialDistanceSimplification */ "./src/curveSimplification/radialDistanceSimplification.ts");
const langSimplification_1 = __webpack_require__(/*! ../curveSimplification/langSimplification */ "./src/curveSimplification/langSimplification.ts");
const reumannWitkamSimplification_1 = __webpack_require__(/*! ../curveSimplification/reumannWitkamSimplification */ "./src/curveSimplification/reumannWitkamSimplification.ts");
const opheimSimplification_1 = __webpack_require__(/*! ../curveSimplification/opheimSimplification */ "./src/curveSimplification/opheimSimplification.ts");
const douglasPeuckerNSimplification_1 = __webpack_require__(/*! ../curveSimplification/douglasPeuckerNSimplification */ "./src/curveSimplification/douglasPeuckerNSimplification.ts");
const nthPointSimplification_1 = __webpack_require__(/*! ../curveSimplification/nthPointSimplification */ "./src/curveSimplification/nthPointSimplification.ts");
function solveExplicit(x0, t0, t1, solver, system) {
    let solution = [];
    let z0 = system.g(x0, t0);
    let point = new daeVector_1.DAEVector(x0, z0, t0);
    solution.push(point);
    for (let t = t0; t <= t1; t = point.t) {
        point = solver.makeStep(point.x, point.z, point.t, system);
        solution.push(point);
    }
    return solution;
}
function solveImplicit(x0, z0, t0, t1, solver, system) {
    let solution = [];
    z0 = solver.solve_z(x0, z0, t0, system);
    let point = new daeVector_1.DAEVector(x0, z0, t0);
    solution.push(point);
    for (let t = t0; t <= t1; t = point.t) {
        point = solver.makeStep(point.x, point.z, point.t, system);
        solution.push(point);
    }
    return solution;
}
function plotExpression(t0, t1, dt, expression, label) {
    let trace = {
        x: [],
        y: [],
        type: "scattergl",
        mode: 'markers+lines',
        name: label
    };
    for (let t = t0; t <= t1; t += dt) {
        trace.x.push(t);
        trace.y.push(expression.execute([t]));
    }
    //@ts-ignore
    Plotly.addTraces('plot-area', [trace]);
}
exports.plotExpression = plotExpression;
function handleErrors(e) {
    if (e instanceof compilerError_1.CompilerError) {
        e.messages.forEach(function (item) {
            ui_1.ui.addLogMessage(item.print());
            ui_1.ui.addErrorMessage(item.message, item.textPos);
            console.log(item.print());
        });
    }
    else if (e instanceof Error) {
        ui_1.ui.addLogMessage(e.message);
        ui_1.ui.addErrorMessage(e.message, astNode_1.TextPosition.invalid());
        console.log(e.message);
    }
    else {
        ui_1.ui.addLogMessage("Exception: " + e);
        ui_1.ui.addErrorMessage("Exception: " + e, astNode_1.TextPosition.invalid());
    }
}
exports.handleErrors = handleErrors;
class Test {
    static testEDAESolvers(t0, t1, x0, solvers, system, xNames, zNames, label) {
        solvers.forEach(function (item) {
            ui_1.ui.addLogMessage(label + ": " + item.label);
            console.log(label + ": " + item.label);
            try {
                let values = solveExplicit(x0, t0, t1, item.method, system);
                Test.showOutput(values, xNames, zNames, label + " " + item.label);
            }
            catch (error) {
                console.log("Error during " + label + ": " + error);
                ui_1.ui.addLogMessage("Error during " + label + ": " + error);
            }
        });
    }
    static testIDAESolvers(t0, t1, x0, solvers, system, xNames, zNames, label) {
        solvers.forEach(function (item) {
            ui_1.ui.addLogMessage(label + ": " + item.label);
            console.log(label + ": " + item.label);
            try {
                let values = solveImplicit(x0, vector_1.vector.empty(system.length_z()), t0, t1, item.method, system);
                Test.showOutput(values, xNames, zNames, label + " " + item.label);
            }
            catch (error) {
                console.log("Error during " + label + ": " + error);
                ui_1.ui.addLogMessage("Error during " + label + ": " + error);
            }
        });
    }
    static showOutput(values, difVariables, algVariables, label) {
        let data = [];
        difVariables.forEach(function (item, index) {
            if (item == null)
                return;
            let trace = {
                x: [],
                y: [],
                type: "scattergl",
                mode: 'markers+lines',
                name: label + ": " + item
            };
            for (let i = 0; i < values.length; i++) {
                let valueVector = values[i];
                trace.y.push(valueVector.x.get(index));
                trace.x.push(valueVector.t);
            }
            data.push(trace);
        });
        algVariables.forEach(function (item, index) {
            if (item == null)
                return;
            let trace = {
                x: [],
                y: [],
                type: "scattergl",
                mode: 'markers+lines',
                name: label + ": " + item
            };
            for (let i = 0; i < values.length; i++) {
                let valueVector = values[i];
                trace.y.push(valueVector.z.get(index));
                trace.x.push(valueVector.t);
            }
            data.push(trace);
        });
        //@ts-ignore
        Plotly.addTraces('plot-area', data);
    }
    /*static serializeOutput(values:DAEVector[],states:number[],variableNamesX:string[],variableNamesZ:string[]):string{
        let result = "";
        variableNamesX.forEach(function(name, index){
            result.append(name);
            result.append(",");
        });
        variableNamesZ.forEach(function(name, index){
            result.append(name);
            result.append(",");
        });
        result.append("state");
        result.append(",");
        result.append("t");
        values.t.forEach(function(id){
                result.append("\n");
            variableNamesX.forEach(function(name,index){
                result.append(values.x[id].get(index));
                result.append(",");
            });
            variableNamesZ.forEach(function(name,index){
                result.append(values.z[id].get(index));
                result.append(",");
            });
            result.append(states[id]);
            result.append(",");
            result.append(values.t[id]);
        });
    }*/
    static initPlot() {
        var layout = {
            title: 'Result',
            type: "scattergl",
            width: jquery_1.default("#plot-area").width(),
            height: jquery_1.default("#plot-area").height(),
            paper_bgcolor: 'rgba(245,245,245,1)',
            plot_bgcolor: 'rgba(245,245,245,1)',
            nticks: 30
        };
        //@ts-ignore
        Plotly.newPlot('plot-area', [], layout, { responsive: true });
    }
    static runTests() {
        jquery_1.default("log").val("");
        ui_1.ui.addLogMessage("Run tests");
        //ui.clearLog();
        let EDAESolvers = [
            /*{method:new EDAE_EEuler(1e-3),label:"EEuler"},
            {method:new EDAE_IEuler(1e-3,new NewtonSolver(20,1e-5,1e-5,0.95,4)),label:"IEuler"},
            {method:new EDAE_EMidpoint(1e-2),label:"EMidpoint"},
            {method:new EDAE_IMidpoint(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"IMidpoint"},
            {method:new EDAE_ETrapezoidal(1e-2),label:"ETrapezoidal"},
            {method:new EDAE_ITrapezoidal(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"ITrapezoidal"},*/
            { method: new rk_1.EDAE_RK4(1e-2), label: "ERK4" },
            /*{method:new EDAE_RK4_2(1e-2),label:"ERK4_2"},
            {method:new EDAE_RK4_RALSTON(1e-2),label:"ERK4_Ralston"},
            {method:new EDAE_DOPRI5(1e-2,3e-2,1e-6),label:"EDOPRI5"},
            {method:new EDAE_BS23(1e-2,3e-2,1e-6),label:"EBS23"},
            {method:new EDAE_RK6(1e-2),label:"ERK6_1"},
            {method:new EDAE_RK6_2(1e-2),label:"ERK6_2"},
            {method:new EDAE_RK8(1e-2),label:"ERK8"},
            {method:new EDAE_RADAUIA5(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"IRadau_IA5"},
            {method:new EDAE_RADAUIIA3(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"IRadau_IIA3"},
            {method:new EDAE_RADAUIIA5(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"IRadau_IIA5"},
            {method:new EDAE_LOBATTOIIIA2(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"ILLobatto_IIIA2"},
            {method:new EDAE_LOBATTOIIIA4(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"ILLobatto_IIIA4"},
            {method:new EDAE_LOBATTOIIIB2(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"ILLobatto_IIIB2"},
            {method:new EDAE_LOBATTOIIIB4(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"ILLobatto_IIIB4"},
            {method:new EDAE_LOBATTOIIIC2(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"ILLobatto_IIIC2"},
            {method:new EDAE_LOBATTOIIIC4(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95)),label:"ILobatto_IIIC4"},
            {method:new EDAE_GAUSSLEGENDRE4(1e-2,3e-2,1e-3,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IGaussLegender4"},
            {method:new EDAE_GAUSSLEGENDRE6(1e-2,3e-2,1e-3,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IGaussLegender6"},
            {method:new EDAE_HeunEuler(1e-2,3e-2,1e-4),label:"IHeunEuler"},
            {method:new EDAE_MidpointEuler(1e-2,3e-2,1e-4),label:"IMidpointEuler"},
            {method:new EDAE_BDF2(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF2"},
            {method:new EDAE_BDF3(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF3"},
            {method:new EDAE_BDF4(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF4"},
            {method:new EDAE_BDF5(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF5"},
            {method:new EDAE_BDF6(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF6"},
            {method:new EDAE_AM2(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6)),label:"IAM2"},
            {method:new EDAE_AM3(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6)),label:"IAM3"},
            {method:new EDAE_AM4(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6)),label:"IAM4"},
            {method:new EDAE_AM5(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6)),label:"IAM5"},
            {method:new EDAE_AM6(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6)),label:"IAM6"},*/
            { method: new adams_bashforth_1.EDAE_AB2(1e-2), label: "EAB2" },
            { method: new adams_bashforth_1.EDAE_AB3(1e-2), label: "EAB3" },
            { method: new adams_bashforth_1.EDAE_AB4(1e-2), label: "EAB4" },
            { method: new adams_bashforth_1.EDAE_AB5(1e-2), label: "EAB5" },
            { method: new adams_bashforth_1.EDAE_AB6(1e-2), label: "EAB6" }
        ];
        let IDAESolvers = [
            /*{method:new IDAE_EEuler(1e-3,new NewtonSolver(20,1e-5,1e-5,0.95,4)),label:"EEuler"},
            {method:new IDAE_IEuler(1e-3, new NewtonSolver(20,1e-5,1e-5,0.95,4)),label:"IEuler"},
            {method:new IDAE_EMidpoint(1e-2,new NewtonSolver(20,1e-5,1e-5,0.95,4)),label:"EMidpoint"},
            {method:new IDAE_IMidpoint(1e-2,new NewtonSolver(20,1e-5,1e-5,0.95,4)),label:"IMidpoint"},
            {method:new IDAE_ETrapezoidal(1e-2,new NewtonSolver(20,1e-5,1e-5,0.95,4)),label:"ETrapezoidal"},
            {method:new IDAE_ITrapezoidal(1e-2,new NewtonSolver(20,1e-5,1e-5,0.95,4), new NewtonSolver(20,1e-2,1e-3,0.95)),label:"ITrapezoidal"},*/
            { method: new rk_2.IDAE_RK4(1e-2, new newton_1.NewtonSolver(20, 1e-4, 1e-5, 0.95, 4)), label: "ERK4" },
            /*{method:new IDAE_RK4_2(1e-2,new NewtonSolver(20,1e-4,1e-5,0.95,4)),label:"ERK4_2"},
            {method:new IDAE_RK4_RALSTON(1e-2,new NewtonSolver(20,1e-4,1e-5,0.95,4)),label:"ERK4_Ralston"},
            {method:new IDAE_DOPRI5(1e-2,3e-2,new NewtonSolver(20,1e-4,1e-5,0.95,4),1e-6),label:"EDOPRI5"},
            {method:new IDAE_BS23(1e-2,3e-2,1e-6,new NewtonSolver(20,1e-4,1e-5,0.95,4)),label:"EBS23"},
            {method:new IDAE_RK6(1e-2,new NewtonSolver(20,1e-4,1e-5,0.95,4)),label:"ERK6_1"},
            {method:new IDAE_RK6_2(1e-2,new NewtonSolver(20,1e-4,1e-5,0.95,4)),label:"ERK6_2"},
            {method:new IDAE_RK8(1e-2,new NewtonSolver(20,1e-4,1e-5,0.95,4)),label:"ERK8"},
            {method:new IDAE_RADAUIA5(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IRadau_IA5"},
            {method:new IDAE_RADAUIIA3(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IRadau_IIA3"},
            {method:new IDAE_RADAUIIA5(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IRadau_IIA5"},
            {method:new IDAE_LOBATTOIIIA2(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"ILLobatto_IIIA2"},
            {method:new IDAE_LOBATTOIIIA4(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"ILLobatto_IIIA4"},
            {method:new IDAE_LOBATTOIIIB2(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"ILLobatto_IIIB2"},
            {method:new IDAE_LOBATTOIIIB4(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"ILLobatto_IIIB4"},
            {method:new IDAE_LOBATTOIIIC2(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"ILLobatto_IIIC2"},
            {method:new IDAE_LOBATTOIIIC4(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"ILobatto_IIIC4"},
            {method:new IDAE_GAUSSLEGENDRE4(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IGaussLegender4"},
            {method:new IDAE_GAUSSLEGENDRE6(1e-2,3e-2,1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IGaussLegender6"},
            {method:new IDAE_HeunEuler(1e-2,3e-2,1e-4,new NewtonSolver(20,1e-5,1e-5,0.95,4)),label:"E_HeunEuler"},
            {method:new IDAE_MidpointEuler(1e-2,3e-2,1e-4,new NewtonSolver(20,1e-5,1e-5,0.95,4)),label:"E_MidpointEuler"},
            {method:new IDAE_BDF2(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF2"},
            {method:new IDAE_BDF3(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF3"},
            {method:new IDAE_BDF4(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF4"},
            {method:new IDAE_BDF5(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF5"},
            {method:new IDAE_BDF6(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IBDF6"},
            {method:new IDAE_AM2(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6),new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IAM2"},
            {method:new IDAE_AM3(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6),new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IAM3"},
            {method:new IDAE_AM4(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6),new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IAM4"},
            {method:new IDAE_AM5(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6),new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IAM5"},
            {method:new IDAE_AM6(1e-2,new NewtonSolver(20,1e-3,1e-4,0.95,6),new NewtonSolver(20,1e-3,1e-4,0.95,4)),label:"IAM6"},*/
            { method: new adams_bashforth_2.IDAE_AB2(1e-2, new newton_1.NewtonSolver(25, 1e-3, 1e-4, 0.95, 4)), label: "EAB2" },
            { method: new adams_bashforth_2.IDAE_AB3(1e-2, new newton_1.NewtonSolver(25, 1e-3, 1e-4, 0.95, 4)), label: "EAB3" },
            { method: new adams_bashforth_2.IDAE_AB4(1e-2, new newton_1.NewtonSolver(25, 1e-3, 1e-4, 0.95, 4)), label: "EAB4" },
            { method: new adams_bashforth_2.IDAE_AB5(1e-2, new newton_1.NewtonSolver(25, 1e-3, 1e-4, 0.95, 4)), label: "EAB5" },
            { method: new adams_bashforth_2.IDAE_AB6(1e-2, new newton_1.NewtonSolver(25, 1e-3, 1e-4, 0.95, 4)), label: "EAB6" }
        ];
        try {
            this.initPlot();
            this.testEDAECompiler();
            //this.testDalquist(EDAESolvers,IDAESolvers);//
            //this.testVanDerPol(EDAESolvers,IDAESolvers);//
            //this.testLorenz(EDAESolvers,IDAESolvers);//
            //this.testIDAE(EDAESolvers,IDAESolvers);//
            //this.testJumpingBall();//passed
            //this.testIDAEJumpingBall();
            //this.testAlgebraic();//Passed
        }
        catch (error) {
            console.log(error);
            ui_1.ui.addLogMessage(JSON.stringify(error));
            jquery_1.default("#log").val(JSON.stringify(error));
        }
    }
    static testDalquist(edaeSolvers, idaeSolvers) {
        function exponentAnalytical(x0, a, t0, t1, step) {
            let result = [];
            let c = x0 / Math.exp(a * t0);
            for (let t = t0; t <= t1 * 1.001; t += step) {
                result.push(new daeVector_1.DAEVector(new vector_1.vector([Math.exp(a * t) * c]), new vector_1.vector([]), t));
            }
            return result;
        }
        /**
        dx = ax
        */
        class DalquistProblem {
            constructor(a) {
                this.a = a;
            }
            f(x, z, t) {
                return new vector_1.vector([
                    this.a * x.get(0)
                ]);
            }
            g(z, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, z, t) {
                return new matrix_1.matrix([this.a], 1, 1);
            }
            dfdz(x, z, t) {
                return new matrix_1.matrix([], 0, 1);
            }
            dgdx(x, t) {
                return new matrix_1.matrix([], 1, 0);
            }
            length_x() {
                return 1;
            }
            length_z() {
                return 0;
            }
        }
        let t0 = 0;
        let t1 = 1;
        let a = -2;
        let x0 = new vector_1.vector([1]);
        let ESystem = new DalquistProblem(a);
        /*let EDAEESolver = new EDAE_EEuler(0.01);
        let EDAEISolver = new EDAE_IEuler(0.01,20,0.025,0.95);
        let EDAEESolution = solveExplicit(new vector([1]),t0,t1,EDAEESolver,ESystem);
        let EDAEISolution = solveExplicit(new vector([1]),t0,t1,EDAEISolver,ESystem);
        Test.showOutput(EDAEESolution,["x"],[],"Exponent EDAEE");
        Test.showOutput(EDAEISolution,["x"],[],"Exponent EDAEI");*/
        /**
         * dx - ax = 0
         */
        class ImplicitDalquistProblem {
            constructor(a) {
                this.a = a;
            }
            f(x, dx, z, t) {
                return new vector_1.vector([
                    dx.get(0) - this.a * x.get(0)
                ]);
            }
            g(x, z, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, dx, z, t) {
                return new matrix_1.matrix([-this.a], 1, 1);
            }
            dfddx(x, dx, z, t) {
                return new matrix_1.matrix([1], 1, 1);
            }
            dfdz(x, dx, z, t) {
                return new matrix_1.matrix([], 0, 1);
            }
            dgdx(x, z, t) {
                return new matrix_1.matrix([], 1, 0);
            }
            dgdz(x, z, t) {
                return new matrix_1.matrix([], 0, 0);
            }
            length_x() {
                return 1;
            }
            length_z() {
                return 0;
            }
        }
        let ISystem = new ImplicitDalquistProblem(a);
        /*let IDAEESolver = new IDAE_EEuler(0.01,20,0.025,0.95);
        let IDAEISolver = new IDAE_IEuler(0.01,20,0.025,0.95);
        let IDAEESolution = solveImplicit(new vector([1]),t0,t1,IDAEESolver,ISystem);
        let IDAEISolution = solveImplicit(new vector([1]),t0,t1,IDAEISolver,ISystem);
        Test.showOutput(IDAEESolution,["x"],[],"Exponent IDAEE");
        Test.showOutput(IDAEISolution,["x"],[],"Exponent IDAEI");*/
        this.testEDAESolvers(t0, t1, x0, edaeSolvers, ESystem, ["x"], [], "EDAE");
        this.testIDAESolvers(t0, t1, x0, idaeSolvers, ISystem, ["x"], [], "IDAE");
        Test.showOutput(exponentAnalytical(x0.get(0), a, t0, t1, 0.01), ["x"], [], "Exponent analytical");
    }
    static testVanDerPol(edaeSolvers, idaeSolvers) {
        /*
            dx = y;
            dy = mu(1-x^2)y - x;
        */
        class EVanDerPol {
            constructor(parameter) {
                this.parameter = parameter;
            }
            f(x, z, t) {
                let _x = x.get(0);
                let _y = x.get(1);
                return new vector_1.vector([
                    _y,
                    this.parameter * (1 - _x * _x) * _y - _x
                ]);
            }
            g(z, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, z, t) {
                let _x = x.get(0);
                let _y = x.get(1);
                let result;
                result = matrix_1.matrix.emptySquare(2);
                result.set(0, 0, 0);
                result.set(1, 0, 1);
                result.set(-2 * this.parameter * _y * _x - 1, 1, 0);
                result.set(this.parameter * (1 - _x * _x), 1, 1);
                return result;
            }
            dfdz(x, z, t) {
                return new matrix_1.matrix([], 0, 2);
            }
            dgdx(x, t) {
                return new matrix_1.matrix([], 2, 0);
            }
            dgdz(x, t) {
                return new matrix_1.matrix([], 0, 0);
            }
            length_x() {
                return 2;
            }
            length_z() {
                return 0;
            }
        }
        /*
            dx - y = 0;
            dy - mu(1-x^2)y + x = 0;
        */
        class IVanDerPol {
            constructor(parameter) {
                this.parameter = parameter;
            }
            f(x, dx, z, t) {
                let _x = x.get(0);
                let _y = x.get(1);
                let _dx = dx.get(0);
                let _dy = dx.get(1);
                return new vector_1.vector([
                    _dx - _y,
                    _dy - this.parameter * (1 - _x * _x) * _y + _x
                ]);
            }
            g(x, z, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, dx, z, t) {
                let _x = x.get(0);
                let _y = x.get(1);
                return new matrix_1.matrix([
                    0, -1,
                    1 + 2 * this.parameter * _y * _x, -this.parameter * (1 - _x * _x)
                ], 2, 2);
            }
            dfddx(x, dx, z, t) {
                return new matrix_1.matrix([
                    1, 0,
                    0, 1
                ], 2, 2);
            }
            dfdz(x, dx, z, t) {
                return new matrix_1.matrix([], 0, 2);
            }
            dgdx(x, z, t) {
                return new matrix_1.matrix([], 2, 0);
            }
            dgdz(x, z, t) {
                return new matrix_1.matrix([], 0, 0);
            }
            length_x() {
                return 2;
            }
            length_z() {
                return 0;
            }
        }
        let t0 = 0;
        let t1 = 5;
        let x0 = new vector_1.vector([1, 1]);
        let ESystem = new EVanDerPol(20);
        this.testEDAESolvers(t0, t1, x0, edaeSolvers, ESystem, ["x", "x'"], [], "EDAE");
        let ISystem = new IVanDerPol(20);
        this.testIDAESolvers(t0, t1, x0, idaeSolvers, ISystem, ["x", "x'"], [], "IDAE");
        /*let EDAEESolver = new EDAE_EEuler(0.01);
        let EDAEISolver = new EDAE_IEuler(0.01,20,0.05,0.95);
        let EDAEESolution = solveExplicit(new vector([1,1]),t0,t1,EDAEESolver,ESystem);
        let EDAEISolution = solveExplicit(new vector([1,1]),t0,t1,EDAEISolver,ESystem);
        Test.showOutput(EDAEESolution,["x","x'"],[],"Van der pol EDAEE");
        Test.showOutput(EDAEISolution,["x","x'"],[],"Van der pol EDAEI");*/
    }
    static testWeissinger() {
        class IWeissinger {
            f(x, dx, z, t) {
                let _x = x.get(0);
                let _dx = dx.get(0);
                return new vector_1.vector([
                    t * Math.pow(_x * _dx, 2) * _dx - Math.pow(_x * _dx, 2) * _x + t * (t * t + 1) * _dx - t * t * _x
                ]);
            }
            g(x, z, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, dx, z, t) {
                let _x = x.get(0);
                let _dx = dx.get(0);
                return new matrix_1.matrix([
                    2 * t * _x * Math.pow(_dx, 3) - 3 * Math.pow(_x * _dx, 2) - t * t
                ], 1, 1);
            }
            dfddx(x, dx, z, t) {
                let _x = x.get(0);
                let _dx = dx.get(0);
                return new matrix_1.matrix([
                    3 * t * Math.pow(_x * _dx, 2) - 2 * _dx * Math.pow(_x, 3) - t * (t * t + 1)
                ], 1, 1);
            }
            dfdz(x, dx, z, t) {
                return new matrix_1.matrix([], 0, 1);
            }
            dgdx(x, z, t) {
                return new matrix_1.matrix([], 1, 0);
            }
            dgdz(x, z, t) {
                return new matrix_1.matrix([], 0, 0);
            }
            length_x() {
                return 1;
            }
            length_z() {
                return 0;
            }
        }
    }
    static testLorenz(edaeSolvers, idaeSolvers) {
        /*
            dx = s(y-x)
            dy = x(p-z) - y
            dz = xy - bz
        */
        class ELorenz {
            constructor(sigma, rho, beta) {
                this.sigma = sigma;
                this.rho = rho;
                this.beta = beta;
            }
            f(x, z, t) {
                let _x = x.get(0);
                let _y = x.get(1);
                let _z = x.get(2);
                return new vector_1.vector([
                    this.sigma * (_y - _x),
                    _x * (this.rho - _z) - _y,
                    _x * _y - this.beta * _z
                ]);
            }
            g(x, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, z, t) {
                let _x = x.get(0);
                let _y = x.get(1);
                let _z = x.get(2);
                return new matrix_1.matrix([
                    -this.sigma, this.sigma, 0,
                    this.rho - _z, -1, -_x,
                    _y, _x, -this.beta
                ], 3, 3);
            }
            dfdz(x, z, t) {
                return new matrix_1.matrix([], 0, 3);
            }
            dgdx(x, t) {
                return new matrix_1.matrix([], 3, 0);
            }
            length_x() {
                return 3;
            }
            length_z() {
                return 0;
            }
        }
        class ILorenz {
            constructor(sigma, rho, beta) {
                this.sigma = sigma;
                this.rho = rho;
                this.beta = beta;
            }
            f(x, dx, z, t) {
                let _x = x.get(0);
                let _y = x.get(1);
                let _z = x.get(2);
                let _dx = dx.get(0);
                let _dy = dx.get(1);
                let _dz = dx.get(2);
                return new vector_1.vector([
                    _dx - this.sigma * (_y - _x),
                    _dy - _x * (this.rho - _z) + _y,
                    _dz - _x * _y + this.beta * _z
                ]);
            }
            g(x, z, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, dx, z, t) {
                let _x = x.get(0);
                let _y = x.get(1);
                let _z = x.get(2);
                return new matrix_1.matrix([
                    this.sigma, -this.sigma, 0,
                    -this.rho + _z, 1, _x,
                    -_y, -_x, this.beta
                ], 3, 3);
            }
            dfddx(x, dx, z, t) {
                return new matrix_1.matrix([
                    1, 0, 0,
                    0, 1, 0,
                    0, 0, 1
                ], 3, 3);
            }
            dfdz(x, dx, z, t) {
                return new matrix_1.matrix([], 0, 3);
            }
            dgdz(x, z, t) {
                return new matrix_1.matrix([], 0, 0);
            }
            dgdx(x, z, t) {
                return new matrix_1.matrix([], 3, 0);
            }
            length_x() {
                return 3;
            }
            length_z() {
                return 0;
            }
        }
        let t0 = 0;
        let t1 = 5;
        let x0 = new vector_1.vector([1, 1, 1]);
        let ESystem = new ELorenz(10, 28, 8 / 3);
        let ISystem = new ILorenz(10, 28, 8 / 3);
        this.testEDAESolvers(t0, t1, x0, edaeSolvers, ESystem, ["x", "y", "z"], [], "EDAE");
        this.testIDAESolvers(t0, t1, x0, idaeSolvers, ISystem, ["x", "y", "z"], [], "IDAE");
        /*let EDAEESolver = new EDAE_EEuler(0.02);
        let EDAEISolver = new EDAE_IEuler(0.02,20,0.05,0.95);
        let EDAEESolution = solveExplicit(new vector([1,1,1]),t0,t1,EDAEESolver,ESystem);
        let EDAEISolution = solveExplicit(new vector([1,1,1]),t0,t1,EDAEISolver,ESystem);
        Test.showOutput(EDAEESolution,["x","y","z"],[],"Lorenz EDAEE");
        Test.showOutput(EDAEISolution,["x","y","z"],[],"Lorenz EDAEI");*/
    }
    static testIDAE(edaeSolvers, idaeSolvers) {
        /**
            dx = y + z + t
            dy = x
            z = x + y
            dx-y-z-t=0
            dy-x=0
            z-x-y=0
        */
        class EDAEProblem {
            f(x, z, t) {
                return new vector_1.vector([
                    x.get(1) + z.get(0) + t,
                    x.get(0)
                ]);
            }
            g(x, t) {
                return new vector_1.vector([x.get(0) + x.get(1)]);
            }
            dfdx(x, z, t) {
                return new matrix_1.matrix([0, 1, 1, 0], 2, 2);
            }
            dfdz(x, z, t) {
                return new matrix_1.matrix([1, 0], 1, 2);
            }
            dgdx(x, t) {
                return new matrix_1.matrix([1, 1], 2, 1);
            }
            length_x() {
                return 2;
            }
            length_z() {
                return 1;
            }
        }
        class IDAEProblem {
            f(x, dx, z, t) {
                return new vector_1.vector([
                    dx.get(0) - x.get(1) - z.get(0) - t,
                    dx.get(1) - x.get(0)
                ]);
            }
            g(x, z, t) {
                return new vector_1.vector([z.get(0) - x.get(0) - x.get(1)]);
            }
            dfdx(x, dx, z, t) {
                let result;
                result = matrix_1.matrix.emptySquare(2);
                result.set(0, 0, 0);
                result.set(-1, 0, 1);
                result.set(-1, 1, 0);
                result.set(0, 1, 1);
                return result;
            }
            dfdz(x, dx, z, t) {
                let result;
                result = matrix_1.matrix.empty(2, 1);
                result.set(-1, 0, 0);
                result.set(0, 1, 0);
                return result;
            }
            dfddx(x, dx, z, t) {
                let result;
                result = matrix_1.matrix.emptySquare(2);
                result.set(1, 0, 0);
                result.set(0, 0, 1);
                result.set(0, 1, 0);
                result.set(1, 1, 1);
                return result;
            }
            dgdx(x, z, t) {
                let result;
                result = matrix_1.matrix.empty(1, 2);
                result.set(-1, 0, 0);
                result.set(-1, 0, 1);
                return result;
            }
            dgdz(x, z, t) {
                let result;
                result = matrix_1.matrix.empty(1, 1);
                result.set(1, 0, 0);
                return result;
            }
            length_x() {
                return 2;
            }
            length_z() {
                return 1;
            }
        }
        let t0 = 0;
        let t1 = 1;
        let x0 = new vector_1.vector([0, 0]);
        let ISystem = new IDAEProblem();
        let ESystem = new EDAEProblem();
        /*let IDAEESolver = new IDAE_EEuler(0.005,20,0.05,0.95);
        let IDAEISolver = new IDAE_IEuler(0.010,20,0.01,0.95);
        let IDAEESolution = solveImplicit(new vector([0,0]),t0,t1,IDAEESolver,ISystem);
        let IDAEISolution = solveImplicit(new vector([0,0]),t0,t1,IDAEISolver,ISystem);*/
        this.testEDAESolvers(t0, t1, x0, edaeSolvers, ESystem, ["x", "y"], ["z"], "EDAE");
        this.testIDAESolvers(t0, t1, x0, idaeSolvers, ISystem, ["x", "y"], ["z"], "IDAE");
        /*Test.showOutput(IDAEESolution,["x","y"],["z"],"IDAEE problem");
        Test.showOutput(IDAEISolution,["x","y"],["z"],"IDAEI problem");*/
    }
    static testIDAEJumpingBall() {
        function getAnaltyticJumpingBall(x0, v0, t1, dt, k) {
            let result = [];
            let point = new daeVector_1.DAEVector(new vector_1.vector([x0, v0]), new vector_1.vector([]), 0);
            result.push();
            let _v0 = v0;
            let _x0 = x0;
            let g = 10;
            let t = 0;
            while (t < t1) {
                //find time of next intersection with x axis
                let eventStep = (_v0 + Math.sqrt(_v0 * _v0 + 2 * _x0 * g)) / g;
                let tNext = t + eventStep;
                let vNext = Math.abs(_v0 - g * eventStep);
                if (eventStep <= 0.001)
                    break;
                for (let _dt = 0; t < tNext; t += dt, _dt += dt) {
                    if (t >= t1)
                        return result;
                    point = new daeVector_1.DAEVector(new vector_1.vector([
                        _x0 + _v0 * _dt - g * _dt * _dt / 2,
                        _v0 - g * _dt
                    ]), new vector_1.vector([]), t);
                    result.push(point);
                }
                t = tNext;
                _x0 = 0;
                _v0 = vNext * k;
                result.push(new daeVector_1.DAEVector(new vector_1.vector([_x0, _v0]), new vector_1.vector([]), t));
            }
            return result;
        }
        /*
            constant m = 1;
            v(t0) = 0;
            x(t0) = 1;
            position: x' - v = 0;
            velocity: v' + mg = 0;
            state jump on (v<=0&&x<=0){
                set v = -v;
            } from init, jump;
        */
        class JumpStateLink {
            constructor(stateNumber, k) {
                this.stateNumber = stateNumber;
                this.k = k;
            }
            getNewState() {
                return this.stateNumber;
            }
            pr(x, z, t) {
                return x.get(0) <= 0 && x.get(1) <= 0;
            }
            p(x, z, t) {
                return Math.min(-x.get(0), -x.get(1));
            }
            dpdt(x, z, t) {
                return 0;
            }
            dpdz(x, z, t) {
                return new vector_1.vector([]);
            }
            dpdx(x, z, t) {
                let _x = x.get(0);
                let _v = x.get(1);
                if (-_x < -_v) {
                    return new vector_1.vector([-1, 0]);
                }
                return new vector_1.vector([0, -1]);
            }
            setConditions(x, z, t) {
                return new vector_1.vector([x.get(0), -x.get(1) * this.k]);
            }
        }
        class IDAEJumpState extends idaeHybridSystem_1.IDAEHybridState {
            constructor(name, links, terminal, g) {
                super(name, links, terminal);
                this._g = g;
            }
            f(x, dx, z, t) {
                return new vector_1.vector([
                    dx.get(0) - x.get(1),
                    dx.get(1) + this._g
                ]);
            }
            g(x, z, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, dx, z, t) {
                return new matrix_1.matrix([0, -1, 0, 0], 2, 2);
            }
            dfddx(x, dx, z, t) {
                return new matrix_1.matrix([1, 0, 0, 1], 2, 2);
            }
            dfdz(x, dx, z, t) {
                return new matrix_1.matrix([], 0, 2);
            }
            dgdx(x, z, t) {
                return new matrix_1.matrix([], 2, 0);
            }
            dgdz(x, z, t) {
                return new matrix_1.matrix([], 0, 0);
            }
            dgdt(x, z, t) {
                return new vector_1.vector([]);
            }
            length_x() {
                return 2;
            }
            length_z() {
                return 0;
            }
        }
        class IDAEJumpingBall extends idaeHybridSystem_1.IDAEHybridSystem {
            constructor(g, k) {
                let link = new JumpStateLink(1, k);
                let init = new IDAEJumpState("init", [link], false, g);
                let jump = new IDAEJumpState("jump", [link], false, g);
                super([init, jump]);
                this.currentState = 0;
            }
        }
        let t1 = 23;
        let k = 0.8;
        let eventDetectorSimple = new eventDetection_1.EventDetectionSimple();
        let eventDetectorComplex = new eventDetection_1.EventDetectionComplex();
        let adaptiveStepStrategy = new adaptiveStep_1.AdaptiveStepNewton(0.95, 1e-5);
        let idaeHybridSolver = new idaeHybridSolver_1.IDAEHybridSolver(eventDetectorComplex, adaptiveStepStrategy);
        let idaeSystem = new IDAEJumpingBall(10, k);
        let initialState = new vector_1.vector([10, 15]);
        let idaeSolution;
        //idaeSolution = idaeHybridSolver.solve(initialState,0,1,idaeiEulerSolver,idaeSystem,[]);
        //Test.showOutput(idaeSolution.values,["x","v"],[],"Jumping ball idae complex with step");
        idaeHybridSolver = new idaeHybridSolver_1.IDAEHybridSolver(eventDetectorSimple, adaptiveStepStrategy);
        //idaeSolution = idaeHybridSolver.solve(initialState,0,1,idaeiEulerSolver,idaeSystem,[]);
        //Test.showOutput(idaeSolution.values,["x","v"],[],"Jumping ball idae simple with step");
        idaeHybridSolver = new idaeHybridSolver_1.IDAEHybridSolver(eventDetectorComplex, null);
        //idaeSolution = idaeHybridSolver.solve(initialState,0,1,idaeiEulerSolver,idaeSystem,[]);
        //Test.showOutput(idaeSolution.values,["x","v"],[],"Jumping ball idae complex");
        idaeHybridSolver = new idaeHybridSolver_1.IDAEHybridSolver(eventDetectorSimple, null);
        //idaeSolution = idaeHybridSolver.solve(initialState,0,1,idaeiEulerSolver,idaeSystem,[]);
        //Test.showOutput(idaeSolution.values,["x","v"],[],"Jumping ball idae simple");
        Test.showOutput(getAnaltyticJumpingBall(initialState.get(0), initialState.get(1), t1, 0.05, k), ["x"], [], "Jumping ball analytical");
    }
    static testJumpingBall() {
        function getAnaltyticJumpingBall(x0, v0, t1, dt, k) {
            let result = [];
            let point = new daeVector_1.DAEVector(new vector_1.vector([x0, v0]), new vector_1.vector([]), 0);
            result.push();
            let _v0 = v0;
            let _x0 = x0;
            let g = 10;
            let t = 0;
            while (t < t1) {
                //find time of next intersection with x axis
                let eventStep = (_v0 + Math.sqrt(_v0 * _v0 + 2 * _x0 * g)) / g;
                let tNext = t + eventStep;
                let vNext = Math.abs(_v0 - g * eventStep);
                if (eventStep <= 0.001)
                    break;
                for (let _dt = 0; t < tNext; t += dt, _dt += dt) {
                    if (t >= t1)
                        return result;
                    point = new daeVector_1.DAEVector(new vector_1.vector([
                        _x0 + _v0 * _dt - g * _dt * _dt / 2,
                        _v0 - g * _dt
                    ]), new vector_1.vector([]), t);
                    result.push(point);
                }
                t = tNext;
                _x0 = 0;
                _v0 = vNext * k;
                result.push(new daeVector_1.DAEVector(new vector_1.vector([_x0, _v0]), new vector_1.vector([]), t));
            }
            return result;
        }
        class JumpStateLink {
            constructor(stateNumber, k) {
                this.stateNumber = stateNumber;
                this.k = k;
            }
            getNewState() {
                return this.stateNumber;
            }
            pr(x, z, t) {
                return x.get(0) <= 0 && x.get(1) <= 0;
            }
            p(x, z, t) {
                return Math.min(-x.get(0), -x.get(1));
            }
            dpdt(x, z, t) {
                return 0;
            }
            dpdz(x, z, t) {
                return new vector_1.vector([]);
            }
            dpdx(x, z, t) {
                let _x = x.get(0);
                let _v = x.get(1);
                if (-_x < -_v) {
                    return new vector_1.vector([-1, 0]);
                }
                return new vector_1.vector([0, -1]);
            }
            setConditions(x, z, t) {
                return new vector_1.vector([x.get(0), -x.get(1) * this.k]);
            }
        }
        class EDAEJumpState extends edaeHybridSystem_1.EDAEHybridState {
            constructor(name, links, terminal, g) {
                super(name, links, terminal);
                this._g = g;
            }
            f(x, z, t) {
                let _x = x.get(0);
                let _v = x.get(1);
                return new vector_1.vector([_v, -this._g]);
            }
            g(x, t) {
                return new vector_1.vector([]);
            }
            dfdx(x, z, t) {
                return new matrix_1.matrix([
                    0, 1,
                    0, 0
                ], 2, 2);
            }
            dfdz(x, z, t) {
                return new matrix_1.matrix([], 0, 2);
            }
            dgdx(x, t) {
                return new matrix_1.matrix([], 2, 0);
            }
            dgdt(x, t) {
                return new vector_1.vector([]);
            }
            length_x() {
                return 2;
            }
            length_z() {
                return 0;
            }
        }
        /*
            constant m = 1;
            v(t0) = 0;
            x(t0) = 1;
            x' = v;
            v'= - mg;
            state jump on (v<=0&&x<=0){
                set v = -v;
            } from init, jump;
        */
        class EDAEJumpingBall extends edaeHybridSystem_1.EDAEHybridSystem {
            constructor(g, k) {
                let link = new JumpStateLink(1, k);
                let init = new EDAEJumpState("init", [link], false, g);
                let jump = new EDAEJumpState("jump", [link], false, g);
                super([init, jump]);
                this.currentState = 0;
                //this.states = [];
                //this.states = [{name:"init",links:[link],terminal:false},{name:"jump",links:[link],terminal:false}];
            }
        }
        let t1 = 23;
        let k = 0.8;
        let adaptiveStepStrategy = new adaptiveStep_1.AdaptiveStepNewton(0.95, 1e-5);
        let eventDetectorComplex = new eventDetection_1.EventDetectionComplex();
        let eventDetectorSimple = new eventDetection_1.EventDetectionSimple();
        let initialState = new vector_1.vector([10, 15]);
        let edaeeRK4Solver = new rk_1.EDAE_RK4(1e-2);
        let edaeHybridSolver = new edaeHybridSolver_1.EDAEHybridSolver(eventDetectorComplex, adaptiveStepStrategy);
        let edaeSystem = new EDAEJumpingBall(10, k);
        let edaeSolution;
        edaeSolution = edaeHybridSolver.solve(initialState, 0, t1, edaeeRK4Solver, edaeSystem);
        Test.showOutput(edaeSolution.values, ["x", null], [], "Jumping ball edae complex with step");
        edaeHybridSolver = new edaeHybridSolver_1.EDAEHybridSolver(eventDetectorSimple, adaptiveStepStrategy);
        edaeSolution = edaeHybridSolver.solve(initialState, 0, t1, edaeeRK4Solver, edaeSystem);
        Test.showOutput(edaeSolution.values, ["x", null], [], "Jumping ball edae simple with step");
        edaeHybridSolver = new edaeHybridSolver_1.EDAEHybridSolver(eventDetectorComplex, null);
        edaeSolution = edaeHybridSolver.solve(initialState, 0, t1, edaeeRK4Solver, edaeSystem);
        Test.showOutput(edaeSolution.values, ["x", null], [], "Jumping ball edae complex");
        edaeHybridSolver = new edaeHybridSolver_1.EDAEHybridSolver(eventDetectorSimple, null);
        edaeSolution = edaeHybridSolver.solve(initialState, 0, t1, edaeeRK4Solver, edaeSystem);
        Test.showOutput(edaeSolution.values, ["x", null], [], "Jumping ball edae simple");
        Test.showOutput(getAnaltyticJumpingBall(initialState.get(0), initialState.get(1), t1, 0.1, k), ["x"], [], "Jumping ball analytical");
    }
    static testAlgebraic() {
        class AlgebraicProblem {
            f(x, dx, z, t) {
                return new vector_1.vector([]);
            }
            g(x, z, t) {
                return new vector_1.vector([Math.sin(t + z.get(0)) - t * z.get(0)]);
            }
            dfddx(x, dx, z, t) {
                return new matrix_1.matrix([], 0, 0);
            }
            dfdx(x, dx, z, t) {
                return new matrix_1.matrix([], 0, 0);
            }
            dfdz() {
                return new matrix_1.matrix([], 0, 1);
            }
            dgdx(x, z, t) {
                return new matrix_1.matrix([], 1, 0);
            }
            dgdz(x, z, t) {
                return new matrix_1.matrix([Math.cos(t + z.get(0)) - t], 1, 1);
            }
            length_x() {
                return 0;
            }
            length_z() {
                return 1;
            }
        }
        let t0 = 0.5;
        let t1 = 0.8;
        let idaeeEulerSolver = new euler_1.IDAE_EEuler(0.1, new newton_1.NewtonSolver(160, 0.05, 1e-4, 0.5));
        let idaeiEulerSolver = new euler_1.IDAE_IEuler(0.05, new newton_1.NewtonSolver(80, 0.05, 1e-4, 0.75));
        let system = new AlgebraicProblem();
        let IDAEESolution = solveImplicit(new vector_1.vector([]), vector_1.vector.empty(system.length_z()), t0, t1, idaeeEulerSolver, system);
        let IDAEISolution = solveImplicit(new vector_1.vector([]), vector_1.vector.empty(system.length_z()), t0, t1, idaeiEulerSolver, system);
        Test.showOutput(IDAEESolution, [], ["z"], "Algebraic problem IDAEE");
        Test.showOutput(IDAEISolution, [], ["z"], "Algebraic problem IDAEI");
    }
    static testEDAECompiler() {
        ui_1.ui.clearErrors();
        Test.initPlot();
        try {
            let parameters = ui_1.ui.getParameters();
            let text = jquery_1.default("#text-input").val();
            let compiler = new compiler_1.DAECompiler();
            let { system, x0, x, z } = compiler.compileExplicit(text);
            let solver = new rk_1.EDAE_RK4(parameters.solver.step);
            let t0 = parameters.solver.t0;
            let t1 = parameters.solver.t0 + parameters.solver.time;
            let solution = solveExplicit(x0, t0, t1, solver, system);
            Test.showOutput(solution, x, z, "Test edae compiler");
            ui_1.ui.openTab("results");
        }
        catch (e) {
            handleErrors(e);
            ui_1.ui.openTab("main");
            ui_1.ui.openTab("errors-tab");
        }
    }
    static testIDAECompiler() {
        ui_1.ui.clearErrors();
        Test.initPlot();
        try {
            let parameters = ui_1.ui.getParameters();
            let text = jquery_1.default("#text-input").val();
            let compiler = new compiler_1.DAECompiler();
            let { system, x0, x, z, z0 } = compiler.compileImplicit(text);
            let s = parameters.solver.implicitSystemSolver;
            let solver = new rk_2.IDAE_RK4(parameters.solver.step, new newton_1.NewtonSolver(s.iters, s.absTol, s.relTol, s.alpha, s.minIters));
            let t0 = parameters.solver.t0;
            let t1 = parameters.solver.t0 + parameters.solver.time;
            let solution = solveImplicit(x0, z0, t0, t1, solver, system);
            Test.showOutput(solution, x, z, "Test idae compiler");
            ui_1.ui.openTab("results");
        }
        catch (e) {
            handleErrors(e);
            ui_1.ui.openTab("main");
            ui_1.ui.openTab("errors-tab");
        }
    }
    static testExplicitHybridCompiler() {
        ui_1.ui.clearErrors();
        Test.initPlot();
        try {
            let text = jquery_1.default("#text-input").val();
            let compiler = new hybridCompiler_1.HybridSystemCompiler();
            let sysDef = compiler.compileExplicit(text);
            let parameters = ui_1.ui.getParameters();
            let eventDetection;
            if (parameters.eventDetection.zeroCrossing.enabled) {
                let params = parameters.eventDetection.zeroCrossing;
                eventDetection = new eventDetection_1.EventDetectionComplex(params.newtonIters, params.relTol, params.absTol, params.newtonAlpha, params.bisectIters, params.timeAbsTol, params.timeRelTol);
            }
            else {
                eventDetection = new eventDetection_1.EventDetectionSimple();
            }
            let adaptiveStepStrategy;
            if (parameters.eventDetection.adaptiveStep.enabled) {
            }
            else {
                adaptiveStepStrategy = null;
            }
            let t0 = parameters.solver.t0;
            let t1 = t0 + parameters.solver.time;
            let method = ui_1.ui.methods[parameters.solver.method].edaeInit(parameters);
            let solver = new edaeHybridSolver_1.EDAEHybridSolver(eventDetection, adaptiveStepStrategy);
            let solution = solver.solve(sysDef.x0, t0, t1, method, sysDef.system);
            Test.showOutput(solution.values, sysDef.x, sysDef.z, "Test explicit hybrid compiler");
            //ui.plotSolution(solution,sysDef.x,sysDef.z);
            ui_1.ui.openTab("results");
        }
        catch (e) {
            handleErrors(e);
            ui_1.ui.openTab("main");
            ui_1.ui.openTab("errors-tab");
        }
    }
    static testSimplification() {
        ui_1.ui.clearErrors();
        Test.initPlot();
        let methods = [
            { alg: new douglasPeuckerSimplification_1.DouglasPeuckerSimplification(0.005), name: "douglasPeucker" },
            { alg: new perpendicularDistanceSimplification_1.PerpendicularDistanceSimplification(0.01), name: "perpDist" },
            //{alg:new MaxPointsSimplification(100),name:"maxPoints"},
            { alg: new radialDistanceSimplification_1.RadialDistanceSimplification(0.1), name: "radDist" },
            { alg: new langSimplification_1.LangSimplification(0.1, 4), name: "lang" },
            { alg: new reumannWitkamSimplification_1.ReumannWitkamSimplification(0.1), name: "reumannWitkam" },
            { alg: new opheimSimplification_1.OpheimSimplification(0.05, 0.1), name: "opheim" },
            { alg: new douglasPeuckerNSimplification_1.DouglasPeuckerNSimplification(100), name: "douglasPeuckerN" },
            { alg: new nthPointSimplification_1.NthPointSimplification(100), name: "Nth point simplification" }
        ];
        let data = [];
        for (let i = 0; i < 1000; i++) {
            let t = i * 0.01;
            let x = Math.cos(t * 6.0) * Math.exp(-2. * t);
            data.push(new daeVector_1.DAEVector(new vector_1.vector([x]), new vector_1.vector([]), t));
        }
        Test.showOutput(data, ["x"], [], "sin output");
        for (let i = 0; i < methods.length; i++) {
            let res = methods[i].alg.simplify(data);
            Test.showOutput(res, ["x"], [], methods[i].name);
            ui_1.ui.addLogMessage(`${methods[i].name}: ${res.length} points`);
        }
        ui_1.ui.openTab("results");
    }
    static testImplicitHybridCompiler() {
        ui_1.ui.clearErrors();
        Test.initPlot();
        try {
            let text = jquery_1.default("#text-input").val();
            let compiler = new hybridCompiler_1.HybridSystemCompiler();
            let sysDef = compiler.compileImplicit(text);
            let parameters = ui_1.ui.getParameters();
            let eventDetection;
            if (parameters.eventDetection.zeroCrossing.enabled) {
                let params = parameters.eventDetection.zeroCrossing;
                eventDetection = new eventDetection_1.EventDetectionComplex(params.newtonIters, params.relTol, params.absTol, params.newtonAlpha, params.bisectIters, params.timeAbsTol, params.timeRelTol);
            }
            else {
                eventDetection = new eventDetection_1.EventDetectionSimple();
            }
            let adaptiveStepStrategy;
            if (parameters.eventDetection.adaptiveStep.enabled) {
            }
            else {
                adaptiveStepStrategy = null;
            }
            let t0 = parameters.solver.t0;
            let t1 = t0 + parameters.solver.time;
            let method = ui_1.ui.methods[parameters.solver.method].idaeInit(parameters);
            let solver = new idaeHybridSolver_1.IDAEHybridSolver(eventDetection, adaptiveStepStrategy);
            let solution = solver.solve(sysDef.x0, sysDef.z0, t0, t1, method, sysDef.system);
            Test.showOutput(solution.values, sysDef.x, sysDef.z, "Test explicit hybrid compiler");
            ui_1.ui.openTab("results");
        }
        catch (e) {
            if (e instanceof compilerError_1.CompilerError) {
                e.messages.forEach(function (item) {
                    ui_1.ui.addLogMessage(item.print());
                    console.log(item.print());
                });
            }
            else if (e instanceof Error) {
                ui_1.ui.addLogMessage(e.message);
                console.log(e.message);
            }
            else {
                ui_1.ui.addLogMessage("Exception: " + e);
            }
            ui_1.ui.openTab("main");
            ui_1.ui.openTab("errors-tab");
        }
    }
    static testWeissingerImplicit() {
        class IWeissinger {
            f(x, dx, z, t) {
                let _x = x.get(0);
                let _dx = dx.get(0);
                return new vector_1.vector([
                    t * Math.pow(_x, 2) * Math.pow(_dx, 3) -
                        Math.pow(_x, 3) * Math.pow(_dx, 2) +
                        t * (t * t + 1) * _dx - t * t * _x
                ]);
            }
            g(x, z, t) {
                let _z = z.get(0);
                return new vector_1.vector([_z - Math.sqrt(t * t + 0.5)]);
            }
            dfdx(x, dx, z, t) {
                let _x = x.get(0);
                let _dx = dx.get(0);
                return new matrix_1.matrix([
                    2 * t * _x * Math.pow(_dx, 3) - 3 * Math.pow(_x * _dx, 2) - t * t
                ], 1, 1);
            }
            dfddx(x, dx, z, t) {
                let _x = x.get(0);
                let _dx = dx.get(0);
                return new matrix_1.matrix([
                    3 * t * Math.pow(_x * _dx, 2) - 2 * Math.pow(_x, 3) * _dx + t * (t * t + 1)
                ], 1, 1);
            }
            dfdz(x, dx, z, t) {
                return new matrix_1.matrix([], 0, 1);
            }
            dgdz(x, z, t) {
                return new matrix_1.matrix([1], 1, 1);
            }
            dgdx(x, z, t) {
                return new matrix_1.matrix([], 1, 0);
            }
            length_x() {
                return 1;
            }
            length_z() {
                return 1;
            }
        }
        let t0 = 0;
        let t1 = 1;
        let system = new IWeissinger();
        let solver = new rk_2.IDAE_RK4(0.01, new newton_1.NewtonSolver(20, 1e-3, 1e-5, 0.95, 3));
        let solution = solveImplicit(new vector_1.vector([Math.sqrt(3 / 2)]), new vector_1.vector([0]), t0, t1, solver, system);
        Test.showOutput(solution, ["x"], ["z"], "Implicit weissinger");
    }
}
exports.Test = Test;


/***/ }),

/***/ "./src/ui.ts":
/*!*******************!*\
  !*** ./src/ui.ts ***!
  \*******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ui = void 0;
const examples_1 = __webpack_require__(/*! ./examples */ "./src/examples.ts");
const jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
const test_1 = __webpack_require__(/*! ./test/test */ "./src/test/test.ts");
const edaeHybridSolver_1 = __webpack_require__(/*! ./dae/edaeHybridSolver */ "./src/dae/edaeHybridSolver.ts");
const idaeHybridSolver_1 = __webpack_require__(/*! ./dae/idaeHybridSolver */ "./src/dae/idaeHybridSolver.ts");
const hybridCompiler_1 = __webpack_require__(/*! ./compiler/hybridCompiler */ "./src/compiler/hybridCompiler.ts");
const compilerError_1 = __webpack_require__(/*! ./compiler/compilerError */ "./src/compiler/compilerError.ts");
const eventDetection_1 = __webpack_require__(/*! ./dae/eventDetection */ "./src/dae/eventDetection.ts");
const astNode_1 = __webpack_require__(/*! ./compiler/astNode */ "./src/compiler/astNode.ts");
const methods_1 = __webpack_require__(/*! ./methods */ "./src/methods.ts");
//tabs init
exports.ui = {
    isResultsTab: false,
    methods: methods_1.methods,
    showDebug: function () {
        jquery_1.default("#debug").css("display", "block");
    },
    hideDebug: function () {
        jquery_1.default("#debug").css("display", "none");
    },
    init: function () {
        //init debug
        jquery_1.default("#debug").append('<button class="button" id="debug-hide">Hide</button>');
        jquery_1.default("#debug-hide").click(exports.ui.hideDebug);
        jquery_1.default("#debug").append('<button class="button" id="edae-test">Test EDAE</button>');
        jquery_1.default("#debug").append('<button class="button" id="idae-test">Test IDAE</button>');
        jquery_1.default("#debug").append('<button class="button" id="e-hybrid-test">Test Explicit Hybrid</button>');
        jquery_1.default("#debug").append('<button class="button" id="i-hybrid-test">Test Implicit Hybrid</button>');
        jquery_1.default('#edae-test').click(test_1.Test.testEDAECompiler);
        jquery_1.default('#idae-test').click(test_1.Test.testIDAECompiler);
        jquery_1.default('#e-hybrid-test').click(test_1.Test.testExplicitHybridCompiler);
        jquery_1.default('#i-hybrid-test').click(test_1.Test.testImplicitHybridCompiler);
        jquery_1.default("#run-button").click(exports.ui.run);
        jquery_1.default("#export-button").click(exports.ui.run);
        jquery_1.default('*[data-role="tab"]').click(function (e) {
            exports.ui.openTab(jquery_1.default(e.target).data("tab"));
        });
        let examplesContainer = jquery_1.default('#examples-dae');
        Object.entries(examples_1.examples.dae).forEach(function ([key, value]) {
            examplesContainer.append(`<button id="${key}" class="example-button dae button">${value.name}</button`);
        });
        examplesContainer = jquery_1.default('#examples-hybrid');
        Object.entries(examples_1.examples.hybrid).forEach(function ([key, value]) {
            examplesContainer.append(`<button id="${key}" class="example-button hybrid button">${value.name}</button`);
        });
        jquery_1.default('.example-button.dae').click(function (e) {
            exports.ui.loadDaeExample(this.id);
        });
        jquery_1.default('.example-button.hybrid').click(function (e) {
            exports.ui.loadHybridExample(this.id);
        });
        let stepControl = jquery_1.default('#step-control');
        let stepSolver = jquery_1.default('#step-solver');
        let systemSolver = jquery_1.default('#system-solver');
        let adaptive = jquery_1.default('#adaptive');
        let zeroCrossing = jquery_1.default('#zero-crossing');
        let simplification = jquery_1.default('#simplification');
        let adaptiveGamma = jquery_1.default('#adaptive-gamma');
        let adaptiveMinStep = jquery_1.default('#adaptive-min-step');
        let zeroCrossingNewtonIterations = jquery_1.default('#newton-iterations-zero-crossing');
        let zeroCrossingNewtonAlphha = jquery_1.default('#alpha-zero-crossing');
        let zeroCrossingAbsTol = jquery_1.default('#abs-tol-zero-crossing');
        let zeroCrossingRelTol = jquery_1.default('#rel-tol-zero-crossing');
        let zeroCrossingBisectionIterations = jquery_1.default('#bisection-iterations-zero-crossing');
        let zeroCrossingTimeResAbsTol = jquery_1.default('#time-abs-tol-zero-crossing');
        let zeroCrossingTimeResRelTol = jquery_1.default('#time-rel-tol-zero-crossing');
        let simplificationMethod = jquery_1.default('#simplification-method');
        let simplificationPointsLimit = jquery_1.default('#simplification-limit');
        jquery_1.default('#dae-form').change(function () {
            if (jquery_1.default(this).val() == "explicit")
                systemSolver.attr("disabled", "disabled");
            else
                systemSolver.attr("disabled", null);
        });
        jquery_1.default('#dae-form').trigger("change");
        let explicitMethods = jquery_1.default("#explicitMethods");
        let implicitMethods = jquery_1.default("#implicitMethods");
        //init methods select element
        Object.entries(methods_1.methods).forEach(function ([key, item]) {
            let el = `<option value="${key}">${item.name}</option>`;
            if (item.implicit) {
                implicitMethods.append(el);
            }
            else {
                explicitMethods.append(el);
            }
        });
        jquery_1.default('#method').change(function () {
            if (methods_1.methods[jquery_1.default(this).val()].autostep == true)
                stepControl.attr("disabled", null);
            else
                stepControl.attr("disabled", "disabled");
            if (methods_1.methods[jquery_1.default(this).val()].implicit == true)
                stepSolver.attr("disabled", null);
            else
                stepSolver.attr("disabled", "disabled");
        });
        jquery_1.default('#method').trigger("change");
        jquery_1.default('#adaptive-step').change(function () {
            if (jquery_1.default(this).prop("checked")) {
                adaptive.attr("disabled", null);
            }
            else {
                adaptive.attr("disabled", "disabled");
            }
        });
        jquery_1.default('#adaptive-step').trigger("change");
        jquery_1.default('#zero-crossing-detection').change(function () {
            if (jquery_1.default(this).prop("checked")) {
                zeroCrossing.attr("disabled", null);
            }
            else {
                zeroCrossing.attr("disabled", "disabled");
            }
        });
        jquery_1.default('#zero-crossing-detection').trigger("change");
        jquery_1.default('#use-simplification').change(function () {
            if (jquery_1.default(this).prop("checked")) {
                simplification.attr("disabled", null);
            }
            else {
                simplification.attr("disabled", "disabled");
            }
        });
        jquery_1.default('#use-simplification').trigger("change");
    },
    getParameters: function () {
        return {
            solver: {
                daeForm: jquery_1.default("#dae-form").val(),
                method: jquery_1.default("#method").val(),
                step: parseFloat(jquery_1.default("#step").val()) * 1e-3,
                t0: parseFloat(jquery_1.default("#t0").val()),
                time: parseFloat(jquery_1.default("#time").val()),
                stepControl: {
                    minStep: parseFloat(jquery_1.default("#min-step").val()) * 1e-3,
                    errTol: parseFloat(jquery_1.default("#error-tolerance").val()) * 1e-3
                },
                implicitStepSolver: {
                    iters: parseFloat(jquery_1.default("#implicit-iterations").val()),
                    minIters: parseFloat(jquery_1.default("#implicit-min-iterations").val()),
                    absTol: parseFloat(jquery_1.default("#implicit-f-abs-tol").val()) * 1e-3,
                    relTol: parseFloat(jquery_1.default("#implicit-f-rel-tol").val()) * 1e-3,
                    alpha: parseFloat(jquery_1.default("#implicit-alpha").val())
                },
                implicitSystemSolver: {
                    iters: parseFloat(jquery_1.default("#idae-iterations").val()),
                    minIters: parseFloat(jquery_1.default("#idae-min-iterations").val()),
                    absTol: parseFloat(jquery_1.default("#idae-f-abs-tol").val()) * 1e-3,
                    relTol: parseFloat(jquery_1.default("#idae-f-rel-tol").val()) * 1e-3,
                    alpha: parseFloat(jquery_1.default("#idae-alpha").val())
                },
            },
            eventDetection: {
                borderTol: parseFloat(jquery_1.default("#zero-crossing-border-tol").val()) * 1e-3,
                adaptiveStep: {
                    enabled: jquery_1.default("#adaptive-step").val() == "on",
                    gamma: parseFloat(jquery_1.default("#adaptive-gamma").val()),
                    minStep: parseFloat(jquery_1.default("#adaptive-min-step").val()) * 1e-3,
                },
                zeroCrossing: {
                    enabled: jquery_1.default("#zero-crossing-detection").val() == "on",
                    newtonIters: parseInt(jquery_1.default("#newton-iterations-zero-crossing").val()),
                    newtonAlpha: parseFloat(jquery_1.default("#alpha-zero-crossing").val()),
                    absTol: parseFloat(jquery_1.default("#abs-tol-zero-crossing").val()) * 1e-3,
                    relTol: parseFloat(jquery_1.default("#rel-tol-zero-crossing").val()) * 1e-3,
                    bisectIters: parseInt(jquery_1.default("#bisection-iterations-zero-crossing").val()),
                    timeAbsTol: parseFloat(jquery_1.default("#time-abs-tol-zero-crossing").val()) * 1e-3,
                    timeRelTol: parseFloat(jquery_1.default("#time-rel-tol-zero-crossing").val()) * 1e-3
                }
            },
            simplification: {
                enabled: jquery_1.default("#use-simplification").val() == "on",
                method: jquery_1.default("#simplification-method").val(),
                maxPoints: parseInt(jquery_1.default("#simplification-limit").val()),
                tolerance: parseFloat(jquery_1.default("#simplification-tolerance").val())
            }
        };
    },
    openTab: function (tabId) {
        let target = jquery_1.default('[data-role="tab"][data-tab="' + tabId + '"]');
        let parentId = target.data("parent");
        let parent = jquery_1.default('#' + parentId);
        jquery_1.default('[data-role="tab-item"][data-parent="' + parentId + '"').removeClass("show");
        jquery_1.default('[data-role="tab"][data-parent="' + parentId + '"').removeClass("active");
        target.addClass("active");
        jquery_1.default('#' + tabId).addClass("show");
        if (tabId == "results") {
            exports.ui.isResultsTab = true;
            //@ts-ignore
            Plotly.relayout('plot-area', {
                width: jquery_1.default("#plot-area").width(),
                height: jquery_1.default("#plot-area").height()
            });
        }
        else {
            exports.ui.isResultsTab = false;
        }
    },
    loadDaeExample: function (exampleId) {
        jquery_1.default('#text-input').val(examples_1.examples.dae[exampleId].text);
    },
    loadHybridExample: function (exampleId) {
        jquery_1.default('#text-input').val(examples_1.examples.hybrid[exampleId].text);
    },
    clearLog: function () {
        jquery_1.default('#log-area').empty();
    },
    clearErrors: function () {
        jquery_1.default('#error-list').empty();
    },
    addErrorMessage: function (message, textPos) {
        jquery_1.default('#error-list').append(`<div class="errors-row${textPos.line == -1 ? "" : " clickable"}" data-line="${textPos.line}" data-column="${textPos.column}" data-start="${textPos.start}" data-stop="${textPos.stop}">
        <div class="errors-cell">${textPos.line == -1 ? "" : textPos.line}</div>
        <div class="errors-cell">${textPos.line == -1 ? "" : textPos.column}</div>
        <div class="errors-cell">${message}</div>
        </div>`);
        if (textPos.line != -1)
            jquery_1.default('#error-list').children().last().click(exports.ui.onClickErrorMessage);
    },
    setCursor(line, position) {
        let elem = jquery_1.default("#text-input")[0];
        let row = 1;
        let pos = 0;
        while (row < line) {
            let lineEnd = elem.value.indexOf("\n", pos);
            if (lineEnd == -1) {
                return;
            }
            row++;
            pos = lineEnd + 1;
        }
        let lineEnd = elem.value.indexOf("\n", pos);
        lineEnd = (lineEnd == -1 ? elem.value.length : lineEnd);
        pos = Math.min(lineEnd, pos + position);
        elem.focus();
        elem.setSelectionRange(pos, pos + 1);
    },
    onClickErrorMessage: function () {
        let line = parseInt(jquery_1.default(this).data("line"));
        let column = parseInt(jquery_1.default(this).data("column"));
        let start = parseInt(jquery_1.default(this).data("start"));
        let stop = parseInt(jquery_1.default(this).data("stop"));
        if (start == -1)
            exports.ui.setCursor(line, column);
        else {
            let elem = jquery_1.default("#text-input")[0];
            elem.focus();
            elem.setSelectionRange(start, stop);
        }
    },
    addLogMessage: function (message) {
        let logArea = jquery_1.default('#log-area');
        let childs = logArea.children();
        let i = 0;
        while (childs.length > 15 + i) {
            childs[i].remove();
            i++;
        }
        let date = new Date();
        const ss = String(date.getSeconds() + 1).padStart(2, '0');
        const hh = String(date.getHours()).padStart(2, '0');
        const mm = String(date.getMinutes()).padStart(2, '0');
        logArea.append(`<div class="log-message">[${hh}:${mm}:${ss}]: ${message}</div>`);
        var mydiv = jquery_1.default("#scroll");
        logArea.scrollTop(logArea.prop("scrollHeight"));
    },
    registerMethods: function (methods) {
        let explicit = jquery_1.default("#methods").append('<optgroup label="Explicit methods"></optgroup>');
        methods.explicit.forEach(function (item) {
            explicit.append(`<option value="${item.id}">${item.name}</option>`);
        });
        let implicit = jquery_1.default("#methods").append('<optgroup label="Implicit methods"></optgroup>');
        methods.implicit.forEach(function (item) {
            implicit.append(`<option value="${item.id}">${item.name}</option>`);
        });
    },
    plotSolution: function (solution, x, z) {
        let data = [];
        let t = [];
        let xTraces = [];
        let zTraces = [];
        data.push({ x: t, y: [], type: "scattergl", mode: 'markers+lines', name: "State",
            line: { shape: 'hv' }, });
        x.forEach(function (item) {
            xTraces.push({ x: t, y: [], type: "scattergl", mode: 'markers+lines', name: item });
        });
        z.forEach(function (item) {
            zTraces.push({ x: t, y: [], type: "scattergl", mode: 'markers+lines', name: item });
        });
        solution.values.forEach(function (value, index) {
            t.push(value.t);
            data[0].y.push(solution.states[index]);
            xTraces.forEach(function (item, id) {
                item.y.push(value.x.get(id));
            });
            zTraces.forEach(function (item, id) {
                item.y.push(value.z.get(id));
            });
        });
        xTraces.forEach(function (item) {
            data.push(xTraces);
        });
        zTraces.forEach(function (item) {
            data.push(zTraces);
        });
        //@ts-ignore
        Plotly.addTraces('plot-area', data);
    },
    plot: function (x, t, label) {
        let data = [];
        let trace = {
            x: t,
            y: x,
            type: "scattergl",
            mode: 'markers+lines',
            name: label
        };
        data.push(trace);
        //@ts-ignore
        Plotly.addTraces('plot-area', data);
    },
    export: function () {
    },
    run: function () {
        test_1.Test.testSimplification();
        //Test.runTests();
        return;
        throw new Error("Not implemented");
        exports.ui.clearErrors();
        let parameters = exports.ui.getParameters();
        let text = jquery_1.default("#text-input").val();
        try {
            let eventDetection;
            if (parameters.eventDetection.zeroCrossing.enabled) {
                let params = parameters.eventDetection.zeroCrossing;
                eventDetection = new eventDetection_1.EventDetectionComplex(params.newtonIters, params.relTol, params.absTol, params.newtonAlpha, params.bisectIters, params.timeAbsTol, params.timeRelTol);
            }
            else {
                eventDetection = new eventDetection_1.EventDetectionSimple();
            }
            let adaptiveStepStrategy;
            if (parameters.eventDetection.adaptiveStep.enabled) {
            }
            else {
                adaptiveStepStrategy = null;
            }
            let compiler = new hybridCompiler_1.HybridSystemCompiler();
            if (parameters.solver.daeForm == "explicit") {
                let sysDef = compiler.compileExplicit(text);
                let daeSolver = methods_1.methods[parameters.solver.method].edaeInit(parameters);
                let solver = new edaeHybridSolver_1.EDAEHybridSolver(eventDetection, adaptiveStepStrategy);
                let solution = solver.solve(sysDef.x0, parameters.solver.t0, parameters.solver.t0 + parameters.solver.time, daeSolver, sysDef.system);
                exports.ui.plotSolution(solution, sysDef.x, sysDef.z);
            }
            else {
                let sysDef = compiler.compileImplicit(text);
                let daeSolver = methods_1.methods[parameters.solver.method].idaeInit(parameters);
                let solver = new idaeHybridSolver_1.IDAEHybridSolver(eventDetection, adaptiveStepStrategy);
                let solution = solver.solve(sysDef.x0, sysDef.z0, parameters.solver.t0, parameters.solver.t0 + parameters.solver.time, daeSolver, sysDef.system);
                exports.ui.plotSolution(solution, sysDef.x, sysDef.z);
            }
        }
        catch (e) {
            if (e instanceof compilerError_1.CompilerError) {
                e.messages.forEach(function (item) {
                    exports.ui.addErrorMessage(item.message, item.textPos);
                    console.log(item.print());
                });
            }
            else if (e instanceof Error) {
                exports.ui.addErrorMessage(e.message, astNode_1.TextPosition.invalid());
                exports.ui.addLogMessage(e.message);
                console.log(e.message);
            }
            else {
                exports.ui.addErrorMessage("Exception: " + e, astNode_1.TextPosition.invalid());
                exports.ui.addLogMessage("Exception: " + e);
            }
            exports.ui.openTab("main");
            exports.ui.openTab("errors-tab");
        }
    }
};


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,